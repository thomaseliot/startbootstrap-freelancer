
DAQ Node.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000f0c  00000fa0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f0c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00800100  00800100  00000fa0  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000fa0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  0000166c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00001703  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000138  00000000  00000000  00001732  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001208  00000000  00000000  0000186a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000007d2  00000000  00000000  00002a72  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000a79  00000000  00000000  00003244  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000308  00000000  00000000  00003cc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000594  00000000  00000000  00003fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001179  00000000  00000000  0000455c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000e8  00000000  00000000  000056d5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__vector_12>
  34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__vector_13>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a2 32       	cpi	r26, 0x22	; 34
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 9e 00 	call	0x13c	; 0x13c <main>
  9c:	0c 94 84 07 	jmp	0xf08	; 0xf08 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <__vector_13>:
st_cmd_t can_send_msg;						// send command object
st_cmd_t can_receive_msg;					// receive command object

// ADC and SPI sampling interrupt handler, fires at 2ms, 12ms, 22ms, etc
// Use this interrupt for anything you need to do before the main interrupt, i.e. sample things
ISR(TIMER1_COMPB_vect) {
  a4:	1f 92       	push	r1
  a6:	0f 92       	push	r0
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	0f 92       	push	r0
  ac:	11 24       	eor	r1, r1
		case ERROR:
		// Error state
		// 15e_todo: Fill in code for ERROR here
		break;
	}
}
  ae:	0f 90       	pop	r0
  b0:	0f be       	out	0x3f, r0	; 63
  b2:	0f 90       	pop	r0
  b4:	1f 90       	pop	r1
  b6:	18 95       	reti

000000b8 <__vector_12>:

// Main 100Hz interrupt handler, fires at 10ms, 20ms, 30ms, etc
// Use this interrupt for any main things you need to do at 100Hz
ISR(TIMER1_COMPA_vect) { 
  b8:	1f 92       	push	r1
  ba:	0f 92       	push	r0
  bc:	0f b6       	in	r0, 0x3f	; 63
  be:	0f 92       	push	r0
  c0:	11 24       	eor	r1, r1
  c2:	2f 93       	push	r18
  c4:	3f 93       	push	r19
  c6:	4f 93       	push	r20
  c8:	5f 93       	push	r21
  ca:	6f 93       	push	r22
  cc:	7f 93       	push	r23
  ce:	8f 93       	push	r24
  d0:	9f 93       	push	r25
  d2:	af 93       	push	r26
  d4:	bf 93       	push	r27
  d6:	ef 93       	push	r30
  d8:	ff 93       	push	r31
	// Function Variables
	uint8_t cnt;	// Loop counter
	
	// Reset the watchdog timer
	wdt_reset();
  da:	a8 95       	wdr
	
	// Reset counter
	// DO NOT REMOVE THIS LINE
	TCNT1 = 0x0000;
  dc:	10 92 85 00 	sts	0x0085, r1
  e0:	10 92 84 00 	sts	0x0084, r1
			break;
	}
	
	// STATE MACHINE THINGS. THIS MUST BE PRESENT
	// See if there is a new state message and transition state if necessary
	if(can_get_status(&can_receive_msg) != CAN_STATUS_NOT_COMPLETED) {
  e4:	86 e1       	ldi	r24, 0x16	; 22
  e6:	91 e0       	ldi	r25, 0x01	; 1
  e8:	0e 94 46 06 	call	0xc8c	; 0xc8c <can_get_status>
  ec:	81 30       	cpi	r24, 0x01	; 1
  ee:	51 f0       	breq	.+20     	; 0x104 <__vector_12+0x4c>
		// There is, update the state
		state = can_state_buffer[0];
  f0:	80 91 09 01 	lds	r24, 0x0109
  f4:	80 93 00 01 	sts	0x0100, r24
		// Send receive command again
		while(can_cmd(&can_receive_msg) != CAN_CMD_ACCEPTED);
  f8:	86 e1       	ldi	r24, 0x16	; 22
  fa:	91 e0       	ldi	r25, 0x01	; 1
  fc:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <can_cmd>
 100:	81 11       	cpse	r24, r1
 102:	fa cf       	rjmp	.-12     	; 0xf8 <__vector_12+0x40>
	}
	
	// Transmit heartbeat
	// Fill in heartbeat data, current state
	can_send_buffer[0] = state;
 104:	80 91 00 01 	lds	r24, 0x0100
 108:	80 93 01 01 	sts	0x0101, r24
	
	// Transmit over CAN
	can_tx_sync(DAQ_HEARTBEAT_ID, can_send_buffer, 1);
 10c:	41 e0       	ldi	r20, 0x01	; 1
 10e:	61 e0       	ldi	r22, 0x01	; 1
 110:	71 e0       	ldi	r23, 0x01	; 1
 112:	84 e0       	ldi	r24, 0x04	; 4
 114:	92 e0       	ldi	r25, 0x02	; 2
 116:	0e 94 ee 06 	call	0xddc	; 0xddc <can_tx_sync>
	
	// Turn off MCU Status LED
	// 15e_todo: comment this out if you don't have an MCU status LED
	// set_io_pin(MCU_STATUS_PORT, MCU_STATUS_PIN, LOW);
}
 11a:	ff 91       	pop	r31
 11c:	ef 91       	pop	r30
 11e:	bf 91       	pop	r27
 120:	af 91       	pop	r26
 122:	9f 91       	pop	r25
 124:	8f 91       	pop	r24
 126:	7f 91       	pop	r23
 128:	6f 91       	pop	r22
 12a:	5f 91       	pop	r21
 12c:	4f 91       	pop	r20
 12e:	3f 91       	pop	r19
 130:	2f 91       	pop	r18
 132:	0f 90       	pop	r0
 134:	0f be       	out	0x3f, r0	; 63
 136:	0f 90       	pop	r0
 138:	1f 90       	pop	r1
 13a:	18 95       	reti

0000013c <main>:
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	80 e8       	ldi	r24, 0x80	; 128
 140:	0f b6       	in	r0, 0x3f	; 63
 142:	f8 94       	cli
 144:	80 93 61 00 	sts	0x0061, r24
 148:	90 93 61 00 	sts	0x0061, r25
 14c:	0f be       	out	0x3f, r0	; 63
{
	// Set the clock prescaler to be 1 (full clock rate)
	clock_prescale_set(clock_div_1);
	
	// Initialize all board I/O
	init_io();
 14e:	0e 94 d5 00 	call	0x1aa	; 0x1aa <init_io>
	
	// Initialize CAN, fixed baudrate defined in config.h (passing 0 does autobaud)
	can_init(1);	// Fixed baud rate
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <can_init>
	
	// Initialize state mailbox
	init_state_capture(&can_receive_msg, can_state_buffer, STATE_BUFFER_SIZE);
 158:	41 e0       	ldi	r20, 0x01	; 1
 15a:	69 e0       	ldi	r22, 0x09	; 9
 15c:	71 e0       	ldi	r23, 0x01	; 1
 15e:	86 e1       	ldi	r24, 0x16	; 22
 160:	91 e0       	ldi	r25, 0x01	; 1
 162:	0e 94 d6 00 	call	0x1ac	; 0x1ac <init_state_capture>
	
	// Initialize watchdog timer
	// init_watchdog();
	
	// Initialize main timer output compare interrupt (100Hz) and enable interrupts
	init_interrupts();
 166:	0e 94 b6 00 	call	0x16c	; 0x16c <init_interrupts>
 16a:	ff cf       	rjmp	.-2      	; 0x16a <main+0x2e>

0000016c <init_interrupts>:
 * Returns: void
 */
void init_interrupts(void) {
	
	//Enable output compare A interrupt for Timer 1 (enables interrupt)
	TIMSK1 |= _BV(OCIE1A);
 16c:	ef e6       	ldi	r30, 0x6F	; 111
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	80 81       	ld	r24, Z
 172:	82 60       	ori	r24, 0x02	; 2
 174:	80 83       	st	Z, r24
	
	// Set timer1_clk prescaler to clk/256 = 62.5kHz with 16MHz system clock
	TCCR1A = _BV(WGM12);
 176:	a0 e8       	ldi	r26, 0x80	; 128
 178:	b0 e0       	ldi	r27, 0x00	; 0
 17a:	88 e0       	ldi	r24, 0x08	; 8
 17c:	8c 93       	st	X, r24
	TCCR1B = _BV(CS12) | _BV(CS11);
 17e:	e1 e8       	ldi	r30, 0x81	; 129
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	86 e0       	ldi	r24, 0x06	; 6
 184:	80 83       	st	Z, r24
	
	// Reset timer 1
	TCNT1 = 0;
 186:	10 92 85 00 	sts	0x0085, r1
 18a:	10 92 84 00 	sts	0x0084, r1

	// Set timer1_clk prescaler to clk/256 = 62.5kHz with 16MHz system clock
	TCCR1A = 0;
 18e:	1c 92       	st	X, r1
	TCCR1B &= (1 << CS12) | (0 << CS11) | (0 << CS10); 
 190:	80 81       	ld	r24, Z
 192:	84 70       	andi	r24, 0x04	; 4
 194:	80 83       	st	Z, r24
	
	/*Set output compare register 1A to 0x271=625
		This sets the timer to count to 625, making a
		100Hz interrupt
	*/
	OCR1A = 0x0271;
 196:	81 e7       	ldi	r24, 0x71	; 113
 198:	92 e0       	ldi	r25, 0x02	; 2
 19a:	90 93 89 00 	sts	0x0089, r25
 19e:	80 93 88 00 	sts	0x0088, r24
	
	// Clear interrupts
	TIFR1 = (1 << OCF1A) || (1 << OCF1B);
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	86 bb       	out	0x16, r24	; 22

	// enable interrupts
	sei();
 1a6:	78 94       	sei
 1a8:	08 95       	ret

000001aa <init_io>:
/* init_io
 * Initialize digital I/O pins.
 * Arguments: void
 * Returns: void
 */
void init_io(void) {
 1aa:	08 95       	ret

000001ac <init_state_capture>:
 * Arguments:
 *  can_receive_msg: the message object
 *  *can_receive_buffer: the buffer
 *  BUF_LEN: length of the buffer
 */
void init_state_capture(st_cmd_t *can_receive_msg, uint8_t *can_receive_buffer, uint8_t BUF_LEN) {
 1ac:	cf 93       	push	r28
 1ae:	df 93       	push	r29
 1b0:	ec 01       	movw	r28, r24
	// Populate message object
	can_receive_msg->pt_data = &can_receive_buffer[0];			// Point to receive buffer
 1b2:	78 87       	std	Y+8, r23	; 0x08
 1b4:	6f 83       	std	Y+7, r22	; 0x07
	can_receive_msg->ctrl.ide = 0;								// CAN 2.0A
 1b6:	1b 86       	std	Y+11, r1	; 0x0b
	can_receive_msg->dlc	= BUF_LEN;								// Data buffer length
 1b8:	4e 83       	std	Y+6, r20	; 0x06
	can_receive_msg->id.std = STATE_ID;							// Set the receive ID to be the state ID
 1ba:	80 e0       	ldi	r24, 0x00	; 0
 1bc:	91 e0       	ldi	r25, 0x01	; 1
 1be:	9b 83       	std	Y+3, r25	; 0x03
 1c0:	8a 83       	std	Y+2, r24	; 0x02
	can_receive_msg->cmd = CMD_RX_DATA_MASKED;					// Receive data
 1c2:	88 e0       	ldi	r24, 0x08	; 8
 1c4:	89 83       	std	Y+1, r24	; 0x01
	
	// Enable RX
	while(can_cmd(can_receive_msg) != CAN_CMD_ACCEPTED);
 1c6:	ce 01       	movw	r24, r28
 1c8:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <can_cmd>
 1cc:	81 11       	cpse	r24, r1
 1ce:	fb cf       	rjmp	.-10     	; 0x1c6 <init_state_capture+0x1a>
 1d0:	df 91       	pop	r29
 1d2:	cf 91       	pop	r28
 1d4:	08 95       	ret

000001d6 <can_init>:
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
 1d6:	0e 94 76 07 	call	0xeec	; 0xeec <can_fixed_baudrate>
 1da:	88 23       	and	r24, r24
 1dc:	49 f0       	breq	.+18     	; 0x1f0 <can_init+0x1a>
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
 1de:	0e 94 15 07 	call	0xe2a	; 0xe2a <can_clear_all_mob>
    Can_enable();                               // c.f. macro in "can_drv.h" 
 1e2:	e8 ed       	ldi	r30, 0xD8	; 216
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	80 81       	ld	r24, Z
 1e8:	82 60       	ori	r24, 0x02	; 2
 1ea:	80 83       	st	Z, r24
    return (1);
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	08 95       	ret
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
 1f0:	80 e0       	ldi	r24, 0x00	; 0
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
    Can_enable();                               // c.f. macro in "can_drv.h" 
    return (1);
}
 1f2:	08 95       	ret

000001f4 <can_cmd>:
//! @return CAN_CMD_ACCEPTED - command is accepted
//!         CAN_CMD_REFUSED  - command is refused
//!
//------------------------------------------------------------------------------
uint8_t can_cmd(st_cmd_t* cmd)
{
 1f4:	0f 93       	push	r16
 1f6:	1f 93       	push	r17
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
 1fc:	00 d0       	rcall	.+0      	; 0x1fe <can_cmd+0xa>
 1fe:	00 d0       	rcall	.+0      	; 0x200 <can_cmd+0xc>
 200:	cd b7       	in	r28, 0x3d	; 61
 202:	de b7       	in	r29, 0x3e	; 62
 204:	8c 01       	movw	r16, r24
  uint8_t mob_handle, cpt;
  uint32_t u32_temp;
  
  if (cmd->cmd == CMD_ABORT)
 206:	dc 01       	movw	r26, r24
 208:	11 96       	adiw	r26, 0x01	; 1
 20a:	8c 91       	ld	r24, X
 20c:	11 97       	sbiw	r26, 0x01	; 1
 20e:	8c 30       	cpi	r24, 0x0C	; 12
 210:	b1 f4       	brne	.+44     	; 0x23e <can_cmd+0x4a>
  {
    if (cmd->status == MOB_PENDING)
 212:	19 96       	adiw	r26, 0x09	; 9
 214:	8c 91       	ld	r24, X
 216:	19 97       	sbiw	r26, 0x09	; 9
 218:	80 36       	cpi	r24, 0x60	; 96
 21a:	69 f4       	brne	.+26     	; 0x236 <can_cmd+0x42>
    {
      // Rx or Tx not yet performed
      Can_set_mob(cmd->handle);
 21c:	8c 91       	ld	r24, X
 21e:	82 95       	swap	r24
 220:	80 7f       	andi	r24, 0xF0	; 240
 222:	80 93 ed 00 	sts	0x00ED, r24
      Can_mob_abort();
 226:	ef ee       	ldi	r30, 0xEF	; 239
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	80 81       	ld	r24, Z
 22c:	8f 73       	andi	r24, 0x3F	; 63
 22e:	80 83       	st	Z, r24
      Can_clear_status_mob();       // To be sure !
 230:	10 92 ee 00 	sts	0x00EE, r1
      cmd->handle = 0;
 234:	1c 92       	st	X, r1
    }
    cmd->status = STATUS_CLEARED; 
 236:	f8 01       	movw	r30, r16
 238:	11 86       	std	Z+9, r1	; 0x09
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 23a:	80 e0       	ldi	r24, 0x00	; 0
 23c:	1e c5       	rjmp	.+2620   	; 0xc7a <can_cmd+0xa86>
    }
    cmd->status = STATUS_CLEARED; 
  }
  else
  {
    mob_handle = can_get_mob_free();
 23e:	0e 94 27 07 	call	0xe4e	; 0xe4e <can_get_mob_free>
    if (mob_handle!= NO_MOB)
 242:	8f 3f       	cpi	r24, 0xFF	; 255
 244:	09 f4       	brne	.+2      	; 0x248 <can_cmd+0x54>
 246:	14 c5       	rjmp	.+2600   	; 0xc70 <can_cmd+0xa7c>
    {
      cmd->status = MOB_PENDING; 
 248:	90 e6       	ldi	r25, 0x60	; 96
 24a:	d8 01       	movw	r26, r16
 24c:	19 96       	adiw	r26, 0x09	; 9
 24e:	9c 93       	st	X, r25
 250:	19 97       	sbiw	r26, 0x09	; 9
      cmd->handle = mob_handle;
 252:	8c 93       	st	X, r24
      Can_set_mob(mob_handle);
 254:	82 95       	swap	r24
 256:	80 7f       	andi	r24, 0xF0	; 240
 258:	80 93 ed 00 	sts	0x00ED, r24
      Can_clear_mob();
 25c:	ee ee       	ldi	r30, 0xEE	; 238
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	11 92       	st	Z+, r1
 262:	e8 3f       	cpi	r30, 0xF8	; 248
 264:	f1 05       	cpc	r31, r1
 266:	e1 f7       	brne	.-8      	; 0x260 <can_cmd+0x6c>
          
      switch (cmd->cmd)
 268:	f8 01       	movw	r30, r16
 26a:	81 81       	ldd	r24, Z+1	; 0x01
 26c:	86 30       	cpi	r24, 0x06	; 6
 26e:	09 f4       	brne	.+2      	; 0x272 <can_cmd+0x7e>
 270:	fe c1       	rjmp	.+1020   	; 0x66e <can_cmd+0x47a>
 272:	88 f4       	brcc	.+34     	; 0x296 <can_cmd+0xa2>
 274:	83 30       	cpi	r24, 0x03	; 3
 276:	09 f4       	brne	.+2      	; 0x27a <can_cmd+0x86>
 278:	19 c1       	rjmp	.+562    	; 0x4ac <can_cmd+0x2b8>
 27a:	30 f4       	brcc	.+12     	; 0x288 <can_cmd+0x94>
 27c:	81 30       	cpi	r24, 0x01	; 1
 27e:	01 f1       	breq	.+64     	; 0x2c0 <can_cmd+0xcc>
 280:	82 30       	cpi	r24, 0x02	; 2
 282:	09 f0       	breq	.+2      	; 0x286 <can_cmd+0x92>
 284:	f1 c4       	rjmp	.+2530   	; 0xc68 <can_cmd+0xa74>
 286:	9b c0       	rjmp	.+310    	; 0x3be <can_cmd+0x1ca>
 288:	84 30       	cpi	r24, 0x04	; 4
 28a:	09 f4       	brne	.+2      	; 0x28e <can_cmd+0x9a>
 28c:	70 c1       	rjmp	.+736    	; 0x56e <can_cmd+0x37a>
 28e:	85 30       	cpi	r24, 0x05	; 5
 290:	09 f0       	breq	.+2      	; 0x294 <can_cmd+0xa0>
 292:	ea c4       	rjmp	.+2516   	; 0xc68 <can_cmd+0xa74>
 294:	a7 c1       	rjmp	.+846    	; 0x5e4 <can_cmd+0x3f0>
 296:	89 30       	cpi	r24, 0x09	; 9
 298:	09 f4       	brne	.+2      	; 0x29c <can_cmd+0xa8>
 29a:	4a c3       	rjmp	.+1684   	; 0x930 <can_cmd+0x73c>
 29c:	38 f4       	brcc	.+14     	; 0x2ac <can_cmd+0xb8>
 29e:	87 30       	cpi	r24, 0x07	; 7
 2a0:	09 f4       	brne	.+2      	; 0x2a4 <can_cmd+0xb0>
 2a2:	2e c2       	rjmp	.+1116   	; 0x700 <can_cmd+0x50c>
 2a4:	88 30       	cpi	r24, 0x08	; 8
 2a6:	09 f0       	breq	.+2      	; 0x2aa <can_cmd+0xb6>
 2a8:	df c4       	rjmp	.+2494   	; 0xc68 <can_cmd+0xa74>
 2aa:	b1 c2       	rjmp	.+1378   	; 0x80e <can_cmd+0x61a>
 2ac:	8a 30       	cpi	r24, 0x0A	; 10
 2ae:	21 f0       	breq	.+8      	; 0x2b8 <can_cmd+0xc4>
 2b0:	8b 30       	cpi	r24, 0x0B	; 11
 2b2:	09 f0       	breq	.+2      	; 0x2b6 <can_cmd+0xc2>
 2b4:	d9 c4       	rjmp	.+2482   	; 0xc68 <can_cmd+0xa74>
 2b6:	2c c4       	rjmp	.+2136   	; 0xb10 <can_cmd+0x91c>
          Can_set_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
 2b8:	86 81       	ldd	r24, Z+6	; 0x06
 2ba:	81 11       	cpse	r24, r1
 2bc:	ce c3       	rjmp	.+1948   	; 0xa5a <can_cmd+0x866>
 2be:	df c3       	rjmp	.+1982   	; 0xa7e <can_cmd+0x88a>
          
      switch (cmd->cmd)
      {
        //------------      
        case CMD_TX:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
 2c0:	f8 01       	movw	r30, r16
 2c2:	83 85       	ldd	r24, Z+11	; 0x0b
 2c4:	88 23       	and	r24, r24
 2c6:	69 f1       	breq	.+90     	; 0x322 <can_cmd+0x12e>
 2c8:	94 81       	ldd	r25, Z+4	; 0x04
 2ca:	92 95       	swap	r25
 2cc:	96 95       	lsr	r25
 2ce:	97 70       	andi	r25, 0x07	; 7
 2d0:	85 81       	ldd	r24, Z+5	; 0x05
 2d2:	88 0f       	add	r24, r24
 2d4:	88 0f       	add	r24, r24
 2d6:	88 0f       	add	r24, r24
 2d8:	89 0f       	add	r24, r25
 2da:	80 93 f3 00 	sts	0x00F3, r24
 2de:	93 81       	ldd	r25, Z+3	; 0x03
 2e0:	92 95       	swap	r25
 2e2:	96 95       	lsr	r25
 2e4:	97 70       	andi	r25, 0x07	; 7
 2e6:	84 81       	ldd	r24, Z+4	; 0x04
 2e8:	88 0f       	add	r24, r24
 2ea:	88 0f       	add	r24, r24
 2ec:	88 0f       	add	r24, r24
 2ee:	89 0f       	add	r24, r25
 2f0:	80 93 f2 00 	sts	0x00F2, r24
 2f4:	92 81       	ldd	r25, Z+2	; 0x02
 2f6:	92 95       	swap	r25
 2f8:	96 95       	lsr	r25
 2fa:	97 70       	andi	r25, 0x07	; 7
 2fc:	83 81       	ldd	r24, Z+3	; 0x03
 2fe:	88 0f       	add	r24, r24
 300:	88 0f       	add	r24, r24
 302:	88 0f       	add	r24, r24
 304:	89 0f       	add	r24, r25
 306:	80 93 f1 00 	sts	0x00F1, r24
 30a:	82 81       	ldd	r24, Z+2	; 0x02
 30c:	88 0f       	add	r24, r24
 30e:	88 0f       	add	r24, r24
 310:	88 0f       	add	r24, r24
 312:	80 93 f0 00 	sts	0x00F0, r24
 316:	ef ee       	ldi	r30, 0xEF	; 239
 318:	f0 e0       	ldi	r31, 0x00	; 0
 31a:	80 81       	ld	r24, Z
 31c:	80 61       	ori	r24, 0x10	; 16
 31e:	80 83       	st	Z, r24
 320:	17 c0       	rjmp	.+46     	; 0x350 <can_cmd+0x15c>
          else              { Can_set_std_id(cmd->id.std);}
 322:	82 81       	ldd	r24, Z+2	; 0x02
 324:	86 95       	lsr	r24
 326:	86 95       	lsr	r24
 328:	86 95       	lsr	r24
 32a:	93 81       	ldd	r25, Z+3	; 0x03
 32c:	b0 e2       	ldi	r27, 0x20	; 32
 32e:	9b 9f       	mul	r25, r27
 330:	80 0d       	add	r24, r0
 332:	11 24       	eor	r1, r1
 334:	80 93 f3 00 	sts	0x00F3, r24
 338:	f8 01       	movw	r30, r16
 33a:	82 81       	ldd	r24, Z+2	; 0x02
 33c:	82 95       	swap	r24
 33e:	88 0f       	add	r24, r24
 340:	80 7e       	andi	r24, 0xE0	; 224
 342:	80 93 f2 00 	sts	0x00F2, r24
 346:	ef ee       	ldi	r30, 0xEF	; 239
 348:	f0 e0       	ldi	r31, 0x00	; 0
 34a:	80 81       	ld	r24, Z
 34c:	8f 7e       	andi	r24, 0xEF	; 239
 34e:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
 350:	d8 01       	movw	r26, r16
 352:	16 96       	adiw	r26, 0x06	; 6
 354:	8c 91       	ld	r24, X
 356:	88 23       	and	r24, r24
 358:	91 f0       	breq	.+36     	; 0x37e <can_cmd+0x18a>
 35a:	80 e0       	ldi	r24, 0x00	; 0
 35c:	2a ef       	ldi	r18, 0xFA	; 250
 35e:	30 e0       	ldi	r19, 0x00	; 0
 360:	d8 01       	movw	r26, r16
 362:	17 96       	adiw	r26, 0x07	; 7
 364:	ed 91       	ld	r30, X+
 366:	fc 91       	ld	r31, X
 368:	18 97       	sbiw	r26, 0x08	; 8
 36a:	e8 0f       	add	r30, r24
 36c:	f1 1d       	adc	r31, r1
 36e:	90 81       	ld	r25, Z
 370:	f9 01       	movw	r30, r18
 372:	90 83       	st	Z, r25
 374:	8f 5f       	subi	r24, 0xFF	; 255
 376:	16 96       	adiw	r26, 0x06	; 6
 378:	9c 91       	ld	r25, X
 37a:	89 17       	cp	r24, r25
 37c:	88 f3       	brcs	.-30     	; 0x360 <can_cmd+0x16c>
          if (cmd->ctrl.rtr) Can_set_rtr(); 
 37e:	d8 01       	movw	r26, r16
 380:	1a 96       	adiw	r26, 0x0a	; 10
 382:	8c 91       	ld	r24, X
 384:	88 23       	and	r24, r24
 386:	31 f0       	breq	.+12     	; 0x394 <can_cmd+0x1a0>
 388:	e0 ef       	ldi	r30, 0xF0	; 240
 38a:	f0 e0       	ldi	r31, 0x00	; 0
 38c:	80 81       	ld	r24, Z
 38e:	84 60       	ori	r24, 0x04	; 4
 390:	80 83       	st	Z, r24
 392:	05 c0       	rjmp	.+10     	; 0x39e <can_cmd+0x1aa>
            else Can_clear_rtr();    
 394:	e0 ef       	ldi	r30, 0xF0	; 240
 396:	f0 e0       	ldi	r31, 0x00	; 0
 398:	80 81       	ld	r24, Z
 39a:	8b 7f       	andi	r24, 0xFB	; 251
 39c:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
 39e:	ef ee       	ldi	r30, 0xEF	; 239
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	90 81       	ld	r25, Z
 3a4:	d8 01       	movw	r26, r16
 3a6:	16 96       	adiw	r26, 0x06	; 6
 3a8:	8c 91       	ld	r24, X
 3aa:	89 2b       	or	r24, r25
 3ac:	80 83       	st	Z, r24
          Can_config_tx();
 3ae:	80 81       	ld	r24, Z
 3b0:	8f 73       	andi	r24, 0x3F	; 63
 3b2:	80 83       	st	Z, r24
 3b4:	80 81       	ld	r24, Z
 3b6:	80 64       	ori	r24, 0x40	; 64
 3b8:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 3ba:	80 e0       	ldi	r24, 0x00	; 0
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          if (cmd->ctrl.rtr) Can_set_rtr(); 
            else Can_clear_rtr();    
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
 3bc:	5e c4       	rjmp	.+2236   	; 0xc7a <can_cmd+0xa86>
        //------------      
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
 3be:	f8 01       	movw	r30, r16
 3c0:	83 85       	ldd	r24, Z+11	; 0x0b
 3c2:	88 23       	and	r24, r24
 3c4:	69 f1       	breq	.+90     	; 0x420 <can_cmd+0x22c>
 3c6:	94 81       	ldd	r25, Z+4	; 0x04
 3c8:	92 95       	swap	r25
 3ca:	96 95       	lsr	r25
 3cc:	97 70       	andi	r25, 0x07	; 7
 3ce:	85 81       	ldd	r24, Z+5	; 0x05
 3d0:	88 0f       	add	r24, r24
 3d2:	88 0f       	add	r24, r24
 3d4:	88 0f       	add	r24, r24
 3d6:	89 0f       	add	r24, r25
 3d8:	80 93 f3 00 	sts	0x00F3, r24
 3dc:	93 81       	ldd	r25, Z+3	; 0x03
 3de:	92 95       	swap	r25
 3e0:	96 95       	lsr	r25
 3e2:	97 70       	andi	r25, 0x07	; 7
 3e4:	84 81       	ldd	r24, Z+4	; 0x04
 3e6:	88 0f       	add	r24, r24
 3e8:	88 0f       	add	r24, r24
 3ea:	88 0f       	add	r24, r24
 3ec:	89 0f       	add	r24, r25
 3ee:	80 93 f2 00 	sts	0x00F2, r24
 3f2:	92 81       	ldd	r25, Z+2	; 0x02
 3f4:	92 95       	swap	r25
 3f6:	96 95       	lsr	r25
 3f8:	97 70       	andi	r25, 0x07	; 7
 3fa:	83 81       	ldd	r24, Z+3	; 0x03
 3fc:	88 0f       	add	r24, r24
 3fe:	88 0f       	add	r24, r24
 400:	88 0f       	add	r24, r24
 402:	89 0f       	add	r24, r25
 404:	80 93 f1 00 	sts	0x00F1, r24
 408:	82 81       	ldd	r24, Z+2	; 0x02
 40a:	88 0f       	add	r24, r24
 40c:	88 0f       	add	r24, r24
 40e:	88 0f       	add	r24, r24
 410:	80 93 f0 00 	sts	0x00F0, r24
 414:	ef ee       	ldi	r30, 0xEF	; 239
 416:	f0 e0       	ldi	r31, 0x00	; 0
 418:	80 81       	ld	r24, Z
 41a:	80 61       	ori	r24, 0x10	; 16
 41c:	80 83       	st	Z, r24
 41e:	17 c0       	rjmp	.+46     	; 0x44e <can_cmd+0x25a>
          else              { Can_set_std_id(cmd->id.std);}
 420:	82 81       	ldd	r24, Z+2	; 0x02
 422:	86 95       	lsr	r24
 424:	86 95       	lsr	r24
 426:	86 95       	lsr	r24
 428:	93 81       	ldd	r25, Z+3	; 0x03
 42a:	b0 e2       	ldi	r27, 0x20	; 32
 42c:	9b 9f       	mul	r25, r27
 42e:	80 0d       	add	r24, r0
 430:	11 24       	eor	r1, r1
 432:	80 93 f3 00 	sts	0x00F3, r24
 436:	f8 01       	movw	r30, r16
 438:	82 81       	ldd	r24, Z+2	; 0x02
 43a:	82 95       	swap	r24
 43c:	88 0f       	add	r24, r24
 43e:	80 7e       	andi	r24, 0xE0	; 224
 440:	80 93 f2 00 	sts	0x00F2, r24
 444:	ef ee       	ldi	r30, 0xEF	; 239
 446:	f0 e0       	ldi	r31, 0x00	; 0
 448:	80 81       	ld	r24, Z
 44a:	8f 7e       	andi	r24, 0xEF	; 239
 44c:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
 44e:	d8 01       	movw	r26, r16
 450:	16 96       	adiw	r26, 0x06	; 6
 452:	8c 91       	ld	r24, X
 454:	88 23       	and	r24, r24
 456:	91 f0       	breq	.+36     	; 0x47c <can_cmd+0x288>
 458:	80 e0       	ldi	r24, 0x00	; 0
 45a:	2a ef       	ldi	r18, 0xFA	; 250
 45c:	30 e0       	ldi	r19, 0x00	; 0
 45e:	d8 01       	movw	r26, r16
 460:	17 96       	adiw	r26, 0x07	; 7
 462:	ed 91       	ld	r30, X+
 464:	fc 91       	ld	r31, X
 466:	18 97       	sbiw	r26, 0x08	; 8
 468:	e8 0f       	add	r30, r24
 46a:	f1 1d       	adc	r31, r1
 46c:	90 81       	ld	r25, Z
 46e:	f9 01       	movw	r30, r18
 470:	90 83       	st	Z, r25
 472:	8f 5f       	subi	r24, 0xFF	; 255
 474:	16 96       	adiw	r26, 0x06	; 6
 476:	9c 91       	ld	r25, X
 478:	89 17       	cp	r24, r25
 47a:	88 f3       	brcs	.-30     	; 0x45e <can_cmd+0x26a>
          cmd->ctrl.rtr=0; Can_clear_rtr();
 47c:	d8 01       	movw	r26, r16
 47e:	1a 96       	adiw	r26, 0x0a	; 10
 480:	1c 92       	st	X, r1
 482:	1a 97       	sbiw	r26, 0x0a	; 10
 484:	e0 ef       	ldi	r30, 0xF0	; 240
 486:	f0 e0       	ldi	r31, 0x00	; 0
 488:	80 81       	ld	r24, Z
 48a:	8b 7f       	andi	r24, 0xFB	; 251
 48c:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
 48e:	ef ee       	ldi	r30, 0xEF	; 239
 490:	f0 e0       	ldi	r31, 0x00	; 0
 492:	90 81       	ld	r25, Z
 494:	16 96       	adiw	r26, 0x06	; 6
 496:	8c 91       	ld	r24, X
 498:	89 2b       	or	r24, r25
 49a:	80 83       	st	Z, r24
          Can_config_tx();
 49c:	80 81       	ld	r24, Z
 49e:	8f 73       	andi	r24, 0x3F	; 63
 4a0:	80 83       	st	Z, r24
 4a2:	80 81       	ld	r24, Z
 4a4:	80 64       	ori	r24, 0x40	; 64
 4a6:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 4a8:	80 e0       	ldi	r24, 0x00	; 0
          else              { Can_set_std_id(cmd->id.std);}
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          cmd->ctrl.rtr=0; Can_clear_rtr();
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
 4aa:	e7 c3       	rjmp	.+1998   	; 0xc7a <can_cmd+0xa86>
        //------------      
        case CMD_TX_REMOTE:       
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
 4ac:	f8 01       	movw	r30, r16
 4ae:	83 85       	ldd	r24, Z+11	; 0x0b
 4b0:	88 23       	and	r24, r24
 4b2:	69 f1       	breq	.+90     	; 0x50e <can_cmd+0x31a>
 4b4:	94 81       	ldd	r25, Z+4	; 0x04
 4b6:	92 95       	swap	r25
 4b8:	96 95       	lsr	r25
 4ba:	97 70       	andi	r25, 0x07	; 7
 4bc:	85 81       	ldd	r24, Z+5	; 0x05
 4be:	88 0f       	add	r24, r24
 4c0:	88 0f       	add	r24, r24
 4c2:	88 0f       	add	r24, r24
 4c4:	89 0f       	add	r24, r25
 4c6:	80 93 f3 00 	sts	0x00F3, r24
 4ca:	93 81       	ldd	r25, Z+3	; 0x03
 4cc:	92 95       	swap	r25
 4ce:	96 95       	lsr	r25
 4d0:	97 70       	andi	r25, 0x07	; 7
 4d2:	84 81       	ldd	r24, Z+4	; 0x04
 4d4:	88 0f       	add	r24, r24
 4d6:	88 0f       	add	r24, r24
 4d8:	88 0f       	add	r24, r24
 4da:	89 0f       	add	r24, r25
 4dc:	80 93 f2 00 	sts	0x00F2, r24
 4e0:	92 81       	ldd	r25, Z+2	; 0x02
 4e2:	92 95       	swap	r25
 4e4:	96 95       	lsr	r25
 4e6:	97 70       	andi	r25, 0x07	; 7
 4e8:	83 81       	ldd	r24, Z+3	; 0x03
 4ea:	88 0f       	add	r24, r24
 4ec:	88 0f       	add	r24, r24
 4ee:	88 0f       	add	r24, r24
 4f0:	89 0f       	add	r24, r25
 4f2:	80 93 f1 00 	sts	0x00F1, r24
 4f6:	82 81       	ldd	r24, Z+2	; 0x02
 4f8:	88 0f       	add	r24, r24
 4fa:	88 0f       	add	r24, r24
 4fc:	88 0f       	add	r24, r24
 4fe:	80 93 f0 00 	sts	0x00F0, r24
 502:	ef ee       	ldi	r30, 0xEF	; 239
 504:	f0 e0       	ldi	r31, 0x00	; 0
 506:	80 81       	ld	r24, Z
 508:	80 61       	ori	r24, 0x10	; 16
 50a:	80 83       	st	Z, r24
 50c:	17 c0       	rjmp	.+46     	; 0x53c <can_cmd+0x348>
          else              { Can_set_std_id(cmd->id.std);}
 50e:	82 81       	ldd	r24, Z+2	; 0x02
 510:	86 95       	lsr	r24
 512:	86 95       	lsr	r24
 514:	86 95       	lsr	r24
 516:	93 81       	ldd	r25, Z+3	; 0x03
 518:	b0 e2       	ldi	r27, 0x20	; 32
 51a:	9b 9f       	mul	r25, r27
 51c:	80 0d       	add	r24, r0
 51e:	11 24       	eor	r1, r1
 520:	80 93 f3 00 	sts	0x00F3, r24
 524:	f8 01       	movw	r30, r16
 526:	82 81       	ldd	r24, Z+2	; 0x02
 528:	82 95       	swap	r24
 52a:	88 0f       	add	r24, r24
 52c:	80 7e       	andi	r24, 0xE0	; 224
 52e:	80 93 f2 00 	sts	0x00F2, r24
 532:	ef ee       	ldi	r30, 0xEF	; 239
 534:	f0 e0       	ldi	r31, 0x00	; 0
 536:	80 81       	ld	r24, Z
 538:	8f 7e       	andi	r24, 0xEF	; 239
 53a:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtr();
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	d8 01       	movw	r26, r16
 540:	1a 96       	adiw	r26, 0x0a	; 10
 542:	8c 93       	st	X, r24
 544:	1a 97       	sbiw	r26, 0x0a	; 10
 546:	e0 ef       	ldi	r30, 0xF0	; 240
 548:	f0 e0       	ldi	r31, 0x00	; 0
 54a:	80 81       	ld	r24, Z
 54c:	84 60       	ori	r24, 0x04	; 4
 54e:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
 550:	ef ee       	ldi	r30, 0xEF	; 239
 552:	f0 e0       	ldi	r31, 0x00	; 0
 554:	90 81       	ld	r25, Z
 556:	16 96       	adiw	r26, 0x06	; 6
 558:	8c 91       	ld	r24, X
 55a:	89 2b       	or	r24, r25
 55c:	80 83       	st	Z, r24
          Can_config_tx();
 55e:	80 81       	ld	r24, Z
 560:	8f 73       	andi	r24, 0x3F	; 63
 562:	80 83       	st	Z, r24
 564:	80 81       	ld	r24, Z
 566:	80 64       	ori	r24, 0x40	; 64
 568:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 56a:	80 e0       	ldi	r24, 0x00	; 0
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
          cmd->ctrl.rtr=1; Can_set_rtr();
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
 56c:	86 c3       	rjmp	.+1804   	; 0xc7a <can_cmd+0xa86>
        //------------      
        case CMD_RX:
          u32_temp=0; Can_set_ext_msk(u32_temp);
 56e:	19 82       	std	Y+1, r1	; 0x01
 570:	1a 82       	std	Y+2, r1	; 0x02
 572:	1b 82       	std	Y+3, r1	; 0x03
 574:	1c 82       	std	Y+4, r1	; 0x04
 576:	10 92 f7 00 	sts	0x00F7, r1
 57a:	9a 81       	ldd	r25, Y+2	; 0x02
 57c:	92 95       	swap	r25
 57e:	96 95       	lsr	r25
 580:	97 70       	andi	r25, 0x07	; 7
 582:	8b 81       	ldd	r24, Y+3	; 0x03
 584:	88 0f       	add	r24, r24
 586:	88 0f       	add	r24, r24
 588:	88 0f       	add	r24, r24
 58a:	89 0f       	add	r24, r25
 58c:	80 93 f6 00 	sts	0x00F6, r24
 590:	99 81       	ldd	r25, Y+1	; 0x01
 592:	92 95       	swap	r25
 594:	96 95       	lsr	r25
 596:	97 70       	andi	r25, 0x07	; 7
 598:	8a 81       	ldd	r24, Y+2	; 0x02
 59a:	88 0f       	add	r24, r24
 59c:	88 0f       	add	r24, r24
 59e:	88 0f       	add	r24, r24
 5a0:	89 0f       	add	r24, r25
 5a2:	80 93 f5 00 	sts	0x00F5, r24
 5a6:	89 81       	ldd	r24, Y+1	; 0x01
 5a8:	88 0f       	add	r24, r24
 5aa:	88 0f       	add	r24, r24
 5ac:	88 0f       	add	r24, r24
 5ae:	24 ef       	ldi	r18, 0xF4	; 244
 5b0:	30 e0       	ldi	r19, 0x00	; 0
 5b2:	f9 01       	movw	r30, r18
 5b4:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
 5b6:	ef ee       	ldi	r30, 0xEF	; 239
 5b8:	f0 e0       	ldi	r31, 0x00	; 0
 5ba:	90 81       	ld	r25, Z
 5bc:	d8 01       	movw	r26, r16
 5be:	16 96       	adiw	r26, 0x06	; 6
 5c0:	8c 91       	ld	r24, X
 5c2:	89 2b       	or	r24, r25
 5c4:	80 83       	st	Z, r24
          Can_clear_rtrmsk();
 5c6:	d9 01       	movw	r26, r18
 5c8:	8c 91       	ld	r24, X
 5ca:	8b 7f       	andi	r24, 0xFB	; 251
 5cc:	8c 93       	st	X, r24
          Can_clear_idemsk();
 5ce:	8c 91       	ld	r24, X
 5d0:	8e 7f       	andi	r24, 0xFE	; 254
 5d2:	8c 93       	st	X, r24
          Can_config_rx();       
 5d4:	80 81       	ld	r24, Z
 5d6:	8f 73       	andi	r24, 0x3F	; 63
 5d8:	80 83       	st	Z, r24
 5da:	80 81       	ld	r24, Z
 5dc:	80 68       	ori	r24, 0x80	; 128
 5de:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 5e0:	80 e0       	ldi	r24, 0x00	; 0
          u32_temp=0; Can_set_ext_msk(u32_temp);
          Can_set_dlc(cmd->dlc);
          Can_clear_rtrmsk();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
 5e2:	4b c3       	rjmp	.+1686   	; 0xc7a <can_cmd+0xa86>
        //------------      
        case CMD_RX_DATA:
          u32_temp=0; Can_set_ext_msk(u32_temp);
 5e4:	19 82       	std	Y+1, r1	; 0x01
 5e6:	1a 82       	std	Y+2, r1	; 0x02
 5e8:	1b 82       	std	Y+3, r1	; 0x03
 5ea:	1c 82       	std	Y+4, r1	; 0x04
 5ec:	10 92 f7 00 	sts	0x00F7, r1
 5f0:	9a 81       	ldd	r25, Y+2	; 0x02
 5f2:	92 95       	swap	r25
 5f4:	96 95       	lsr	r25
 5f6:	97 70       	andi	r25, 0x07	; 7
 5f8:	8b 81       	ldd	r24, Y+3	; 0x03
 5fa:	88 0f       	add	r24, r24
 5fc:	88 0f       	add	r24, r24
 5fe:	88 0f       	add	r24, r24
 600:	89 0f       	add	r24, r25
 602:	80 93 f6 00 	sts	0x00F6, r24
 606:	99 81       	ldd	r25, Y+1	; 0x01
 608:	92 95       	swap	r25
 60a:	96 95       	lsr	r25
 60c:	97 70       	andi	r25, 0x07	; 7
 60e:	8a 81       	ldd	r24, Y+2	; 0x02
 610:	88 0f       	add	r24, r24
 612:	88 0f       	add	r24, r24
 614:	88 0f       	add	r24, r24
 616:	89 0f       	add	r24, r25
 618:	80 93 f5 00 	sts	0x00F5, r24
 61c:	89 81       	ldd	r24, Y+1	; 0x01
 61e:	88 0f       	add	r24, r24
 620:	88 0f       	add	r24, r24
 622:	88 0f       	add	r24, r24
 624:	44 ef       	ldi	r20, 0xF4	; 244
 626:	50 e0       	ldi	r21, 0x00	; 0
 628:	fa 01       	movw	r30, r20
 62a:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
 62c:	ef ee       	ldi	r30, 0xEF	; 239
 62e:	f0 e0       	ldi	r31, 0x00	; 0
 630:	90 81       	ld	r25, Z
 632:	d8 01       	movw	r26, r16
 634:	16 96       	adiw	r26, 0x06	; 6
 636:	8c 91       	ld	r24, X
 638:	16 97       	sbiw	r26, 0x06	; 6
 63a:	89 2b       	or	r24, r25
 63c:	80 83       	st	Z, r24
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
 63e:	1a 96       	adiw	r26, 0x0a	; 10
 640:	1c 92       	st	X, r1
 642:	da 01       	movw	r26, r20
 644:	8c 91       	ld	r24, X
 646:	84 60       	ori	r24, 0x04	; 4
 648:	8c 93       	st	X, r24
 64a:	80 ef       	ldi	r24, 0xF0	; 240
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	dc 01       	movw	r26, r24
 650:	2c 91       	ld	r18, X
 652:	2b 7f       	andi	r18, 0xFB	; 251
 654:	2c 93       	st	X, r18
          Can_clear_idemsk();
 656:	da 01       	movw	r26, r20
 658:	8c 91       	ld	r24, X
 65a:	8e 7f       	andi	r24, 0xFE	; 254
 65c:	8c 93       	st	X, r24
          Can_config_rx();       
 65e:	80 81       	ld	r24, Z
 660:	8f 73       	andi	r24, 0x3F	; 63
 662:	80 83       	st	Z, r24
 664:	80 81       	ld	r24, Z
 666:	80 68       	ori	r24, 0x80	; 128
 668:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 66a:	80 e0       	ldi	r24, 0x00	; 0
          u32_temp=0; Can_set_ext_msk(u32_temp);
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
 66c:	06 c3       	rjmp	.+1548   	; 0xc7a <can_cmd+0xa86>
        //------------      
        case CMD_RX_REMOTE:
          u32_temp=0; Can_set_ext_msk(u32_temp);
 66e:	19 82       	std	Y+1, r1	; 0x01
 670:	1a 82       	std	Y+2, r1	; 0x02
 672:	1b 82       	std	Y+3, r1	; 0x03
 674:	1c 82       	std	Y+4, r1	; 0x04
 676:	10 92 f7 00 	sts	0x00F7, r1
 67a:	9a 81       	ldd	r25, Y+2	; 0x02
 67c:	92 95       	swap	r25
 67e:	96 95       	lsr	r25
 680:	97 70       	andi	r25, 0x07	; 7
 682:	8b 81       	ldd	r24, Y+3	; 0x03
 684:	88 0f       	add	r24, r24
 686:	88 0f       	add	r24, r24
 688:	88 0f       	add	r24, r24
 68a:	89 0f       	add	r24, r25
 68c:	80 93 f6 00 	sts	0x00F6, r24
 690:	99 81       	ldd	r25, Y+1	; 0x01
 692:	92 95       	swap	r25
 694:	96 95       	lsr	r25
 696:	97 70       	andi	r25, 0x07	; 7
 698:	8a 81       	ldd	r24, Y+2	; 0x02
 69a:	88 0f       	add	r24, r24
 69c:	88 0f       	add	r24, r24
 69e:	88 0f       	add	r24, r24
 6a0:	89 0f       	add	r24, r25
 6a2:	80 93 f5 00 	sts	0x00F5, r24
 6a6:	89 81       	ldd	r24, Y+1	; 0x01
 6a8:	88 0f       	add	r24, r24
 6aa:	88 0f       	add	r24, r24
 6ac:	88 0f       	add	r24, r24
 6ae:	44 ef       	ldi	r20, 0xF4	; 244
 6b0:	50 e0       	ldi	r21, 0x00	; 0
 6b2:	fa 01       	movw	r30, r20
 6b4:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
 6b6:	ef ee       	ldi	r30, 0xEF	; 239
 6b8:	f0 e0       	ldi	r31, 0x00	; 0
 6ba:	90 81       	ld	r25, Z
 6bc:	d8 01       	movw	r26, r16
 6be:	16 96       	adiw	r26, 0x06	; 6
 6c0:	8c 91       	ld	r24, X
 6c2:	16 97       	sbiw	r26, 0x06	; 6
 6c4:	89 2b       	or	r24, r25
 6c6:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
 6c8:	81 e0       	ldi	r24, 0x01	; 1
 6ca:	1a 96       	adiw	r26, 0x0a	; 10
 6cc:	8c 93       	st	X, r24
 6ce:	da 01       	movw	r26, r20
 6d0:	8c 91       	ld	r24, X
 6d2:	84 60       	ori	r24, 0x04	; 4
 6d4:	8c 93       	st	X, r24
 6d6:	80 ef       	ldi	r24, 0xF0	; 240
 6d8:	90 e0       	ldi	r25, 0x00	; 0
 6da:	dc 01       	movw	r26, r24
 6dc:	2c 91       	ld	r18, X
 6de:	24 60       	ori	r18, 0x04	; 4
 6e0:	2c 93       	st	X, r18
          Can_clear_rplv();
 6e2:	80 81       	ld	r24, Z
 6e4:	8f 7d       	andi	r24, 0xDF	; 223
 6e6:	80 83       	st	Z, r24
          Can_clear_idemsk();
 6e8:	da 01       	movw	r26, r20
 6ea:	8c 91       	ld	r24, X
 6ec:	8e 7f       	andi	r24, 0xFE	; 254
 6ee:	8c 93       	st	X, r24
          Can_config_rx();       
 6f0:	80 81       	ld	r24, Z
 6f2:	8f 73       	andi	r24, 0x3F	; 63
 6f4:	80 83       	st	Z, r24
 6f6:	80 81       	ld	r24, Z
 6f8:	80 68       	ori	r24, 0x80	; 128
 6fa:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 6fc:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_clear_rplv();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
 6fe:	bd c2       	rjmp	.+1402   	; 0xc7a <can_cmd+0xa86>
        //------------      
        case CMD_RX_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
 700:	f8 01       	movw	r30, r16
 702:	83 85       	ldd	r24, Z+11	; 0x0b
 704:	88 23       	and	r24, r24
 706:	69 f1       	breq	.+90     	; 0x762 <can_cmd+0x56e>
 708:	94 81       	ldd	r25, Z+4	; 0x04
 70a:	92 95       	swap	r25
 70c:	96 95       	lsr	r25
 70e:	97 70       	andi	r25, 0x07	; 7
 710:	85 81       	ldd	r24, Z+5	; 0x05
 712:	88 0f       	add	r24, r24
 714:	88 0f       	add	r24, r24
 716:	88 0f       	add	r24, r24
 718:	89 0f       	add	r24, r25
 71a:	80 93 f3 00 	sts	0x00F3, r24
 71e:	93 81       	ldd	r25, Z+3	; 0x03
 720:	92 95       	swap	r25
 722:	96 95       	lsr	r25
 724:	97 70       	andi	r25, 0x07	; 7
 726:	84 81       	ldd	r24, Z+4	; 0x04
 728:	88 0f       	add	r24, r24
 72a:	88 0f       	add	r24, r24
 72c:	88 0f       	add	r24, r24
 72e:	89 0f       	add	r24, r25
 730:	80 93 f2 00 	sts	0x00F2, r24
 734:	92 81       	ldd	r25, Z+2	; 0x02
 736:	92 95       	swap	r25
 738:	96 95       	lsr	r25
 73a:	97 70       	andi	r25, 0x07	; 7
 73c:	83 81       	ldd	r24, Z+3	; 0x03
 73e:	88 0f       	add	r24, r24
 740:	88 0f       	add	r24, r24
 742:	88 0f       	add	r24, r24
 744:	89 0f       	add	r24, r25
 746:	80 93 f1 00 	sts	0x00F1, r24
 74a:	82 81       	ldd	r24, Z+2	; 0x02
 74c:	88 0f       	add	r24, r24
 74e:	88 0f       	add	r24, r24
 750:	88 0f       	add	r24, r24
 752:	80 93 f0 00 	sts	0x00F0, r24
 756:	ef ee       	ldi	r30, 0xEF	; 239
 758:	f0 e0       	ldi	r31, 0x00	; 0
 75a:	80 81       	ld	r24, Z
 75c:	80 61       	ori	r24, 0x10	; 16
 75e:	80 83       	st	Z, r24
 760:	17 c0       	rjmp	.+46     	; 0x790 <can_cmd+0x59c>
          else              { Can_set_std_id(cmd->id.std);}
 762:	82 81       	ldd	r24, Z+2	; 0x02
 764:	86 95       	lsr	r24
 766:	86 95       	lsr	r24
 768:	86 95       	lsr	r24
 76a:	93 81       	ldd	r25, Z+3	; 0x03
 76c:	b0 e2       	ldi	r27, 0x20	; 32
 76e:	9b 9f       	mul	r25, r27
 770:	80 0d       	add	r24, r0
 772:	11 24       	eor	r1, r1
 774:	80 93 f3 00 	sts	0x00F3, r24
 778:	f8 01       	movw	r30, r16
 77a:	82 81       	ldd	r24, Z+2	; 0x02
 77c:	82 95       	swap	r24
 77e:	88 0f       	add	r24, r24
 780:	80 7e       	andi	r24, 0xE0	; 224
 782:	80 93 f2 00 	sts	0x00F2, r24
 786:	ef ee       	ldi	r30, 0xEF	; 239
 788:	f0 e0       	ldi	r31, 0x00	; 0
 78a:	80 81       	ld	r24, Z
 78c:	8f 7e       	andi	r24, 0xEF	; 239
 78e:	80 83       	st	Z, r24
          u32_temp=~0; Can_set_ext_msk(u32_temp);
 790:	8f ef       	ldi	r24, 0xFF	; 255
 792:	9f ef       	ldi	r25, 0xFF	; 255
 794:	dc 01       	movw	r26, r24
 796:	89 83       	std	Y+1, r24	; 0x01
 798:	9a 83       	std	Y+2, r25	; 0x02
 79a:	ab 83       	std	Y+3, r26	; 0x03
 79c:	bc 83       	std	Y+4, r27	; 0x04
 79e:	8f ef       	ldi	r24, 0xFF	; 255
 7a0:	80 93 f7 00 	sts	0x00F7, r24
 7a4:	9a 81       	ldd	r25, Y+2	; 0x02
 7a6:	92 95       	swap	r25
 7a8:	96 95       	lsr	r25
 7aa:	97 70       	andi	r25, 0x07	; 7
 7ac:	8b 81       	ldd	r24, Y+3	; 0x03
 7ae:	88 0f       	add	r24, r24
 7b0:	88 0f       	add	r24, r24
 7b2:	88 0f       	add	r24, r24
 7b4:	89 0f       	add	r24, r25
 7b6:	80 93 f6 00 	sts	0x00F6, r24
 7ba:	99 81       	ldd	r25, Y+1	; 0x01
 7bc:	92 95       	swap	r25
 7be:	96 95       	lsr	r25
 7c0:	97 70       	andi	r25, 0x07	; 7
 7c2:	8a 81       	ldd	r24, Y+2	; 0x02
 7c4:	88 0f       	add	r24, r24
 7c6:	88 0f       	add	r24, r24
 7c8:	88 0f       	add	r24, r24
 7ca:	89 0f       	add	r24, r25
 7cc:	80 93 f5 00 	sts	0x00F5, r24
 7d0:	89 81       	ldd	r24, Y+1	; 0x01
 7d2:	88 0f       	add	r24, r24
 7d4:	88 0f       	add	r24, r24
 7d6:	88 0f       	add	r24, r24
 7d8:	24 ef       	ldi	r18, 0xF4	; 244
 7da:	30 e0       	ldi	r19, 0x00	; 0
 7dc:	d9 01       	movw	r26, r18
 7de:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
 7e0:	ef ee       	ldi	r30, 0xEF	; 239
 7e2:	f0 e0       	ldi	r31, 0x00	; 0
 7e4:	90 81       	ld	r25, Z
 7e6:	d8 01       	movw	r26, r16
 7e8:	16 96       	adiw	r26, 0x06	; 6
 7ea:	8c 91       	ld	r24, X
 7ec:	89 2b       	or	r24, r25
 7ee:	80 83       	st	Z, r24
          Can_clear_rtrmsk();
 7f0:	d9 01       	movw	r26, r18
 7f2:	8c 91       	ld	r24, X
 7f4:	8b 7f       	andi	r24, 0xFB	; 251
 7f6:	8c 93       	st	X, r24
          Can_set_idemsk();
 7f8:	8c 91       	ld	r24, X
 7fa:	81 60       	ori	r24, 0x01	; 1
 7fc:	8c 93       	st	X, r24
          Can_config_rx();       
 7fe:	80 81       	ld	r24, Z
 800:	8f 73       	andi	r24, 0x3F	; 63
 802:	80 83       	st	Z, r24
 804:	80 81       	ld	r24, Z
 806:	80 68       	ori	r24, 0x80	; 128
 808:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 80a:	80 e0       	ldi	r24, 0x00	; 0
          u32_temp=~0; Can_set_ext_msk(u32_temp);
          Can_set_dlc(cmd->dlc);
          Can_clear_rtrmsk();
          Can_set_idemsk();
          Can_config_rx();       
          break;
 80c:	36 c2       	rjmp	.+1132   	; 0xc7a <can_cmd+0xa86>
        //------------      
        case CMD_RX_DATA_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
 80e:	f8 01       	movw	r30, r16
 810:	83 85       	ldd	r24, Z+11	; 0x0b
 812:	88 23       	and	r24, r24
 814:	69 f1       	breq	.+90     	; 0x870 <can_cmd+0x67c>
 816:	94 81       	ldd	r25, Z+4	; 0x04
 818:	92 95       	swap	r25
 81a:	96 95       	lsr	r25
 81c:	97 70       	andi	r25, 0x07	; 7
 81e:	85 81       	ldd	r24, Z+5	; 0x05
 820:	88 0f       	add	r24, r24
 822:	88 0f       	add	r24, r24
 824:	88 0f       	add	r24, r24
 826:	89 0f       	add	r24, r25
 828:	80 93 f3 00 	sts	0x00F3, r24
 82c:	93 81       	ldd	r25, Z+3	; 0x03
 82e:	92 95       	swap	r25
 830:	96 95       	lsr	r25
 832:	97 70       	andi	r25, 0x07	; 7
 834:	84 81       	ldd	r24, Z+4	; 0x04
 836:	88 0f       	add	r24, r24
 838:	88 0f       	add	r24, r24
 83a:	88 0f       	add	r24, r24
 83c:	89 0f       	add	r24, r25
 83e:	80 93 f2 00 	sts	0x00F2, r24
 842:	92 81       	ldd	r25, Z+2	; 0x02
 844:	92 95       	swap	r25
 846:	96 95       	lsr	r25
 848:	97 70       	andi	r25, 0x07	; 7
 84a:	83 81       	ldd	r24, Z+3	; 0x03
 84c:	88 0f       	add	r24, r24
 84e:	88 0f       	add	r24, r24
 850:	88 0f       	add	r24, r24
 852:	89 0f       	add	r24, r25
 854:	80 93 f1 00 	sts	0x00F1, r24
 858:	82 81       	ldd	r24, Z+2	; 0x02
 85a:	88 0f       	add	r24, r24
 85c:	88 0f       	add	r24, r24
 85e:	88 0f       	add	r24, r24
 860:	80 93 f0 00 	sts	0x00F0, r24
 864:	ef ee       	ldi	r30, 0xEF	; 239
 866:	f0 e0       	ldi	r31, 0x00	; 0
 868:	80 81       	ld	r24, Z
 86a:	80 61       	ori	r24, 0x10	; 16
 86c:	80 83       	st	Z, r24
 86e:	17 c0       	rjmp	.+46     	; 0x89e <can_cmd+0x6aa>
          else              { Can_set_std_id(cmd->id.std);}
 870:	82 81       	ldd	r24, Z+2	; 0x02
 872:	86 95       	lsr	r24
 874:	86 95       	lsr	r24
 876:	86 95       	lsr	r24
 878:	93 81       	ldd	r25, Z+3	; 0x03
 87a:	b0 e2       	ldi	r27, 0x20	; 32
 87c:	9b 9f       	mul	r25, r27
 87e:	80 0d       	add	r24, r0
 880:	11 24       	eor	r1, r1
 882:	80 93 f3 00 	sts	0x00F3, r24
 886:	f8 01       	movw	r30, r16
 888:	82 81       	ldd	r24, Z+2	; 0x02
 88a:	82 95       	swap	r24
 88c:	88 0f       	add	r24, r24
 88e:	80 7e       	andi	r24, 0xE0	; 224
 890:	80 93 f2 00 	sts	0x00F2, r24
 894:	ef ee       	ldi	r30, 0xEF	; 239
 896:	f0 e0       	ldi	r31, 0x00	; 0
 898:	80 81       	ld	r24, Z
 89a:	8f 7e       	andi	r24, 0xEF	; 239
 89c:	80 83       	st	Z, r24
          u32_temp=~0; Can_set_ext_msk(u32_temp);
 89e:	8f ef       	ldi	r24, 0xFF	; 255
 8a0:	9f ef       	ldi	r25, 0xFF	; 255
 8a2:	dc 01       	movw	r26, r24
 8a4:	89 83       	std	Y+1, r24	; 0x01
 8a6:	9a 83       	std	Y+2, r25	; 0x02
 8a8:	ab 83       	std	Y+3, r26	; 0x03
 8aa:	bc 83       	std	Y+4, r27	; 0x04
 8ac:	8f ef       	ldi	r24, 0xFF	; 255
 8ae:	80 93 f7 00 	sts	0x00F7, r24
 8b2:	9a 81       	ldd	r25, Y+2	; 0x02
 8b4:	92 95       	swap	r25
 8b6:	96 95       	lsr	r25
 8b8:	97 70       	andi	r25, 0x07	; 7
 8ba:	8b 81       	ldd	r24, Y+3	; 0x03
 8bc:	88 0f       	add	r24, r24
 8be:	88 0f       	add	r24, r24
 8c0:	88 0f       	add	r24, r24
 8c2:	89 0f       	add	r24, r25
 8c4:	80 93 f6 00 	sts	0x00F6, r24
 8c8:	99 81       	ldd	r25, Y+1	; 0x01
 8ca:	92 95       	swap	r25
 8cc:	96 95       	lsr	r25
 8ce:	97 70       	andi	r25, 0x07	; 7
 8d0:	8a 81       	ldd	r24, Y+2	; 0x02
 8d2:	88 0f       	add	r24, r24
 8d4:	88 0f       	add	r24, r24
 8d6:	88 0f       	add	r24, r24
 8d8:	89 0f       	add	r24, r25
 8da:	80 93 f5 00 	sts	0x00F5, r24
 8de:	89 81       	ldd	r24, Y+1	; 0x01
 8e0:	88 0f       	add	r24, r24
 8e2:	88 0f       	add	r24, r24
 8e4:	88 0f       	add	r24, r24
 8e6:	44 ef       	ldi	r20, 0xF4	; 244
 8e8:	50 e0       	ldi	r21, 0x00	; 0
 8ea:	da 01       	movw	r26, r20
 8ec:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
 8ee:	ef ee       	ldi	r30, 0xEF	; 239
 8f0:	f0 e0       	ldi	r31, 0x00	; 0
 8f2:	90 81       	ld	r25, Z
 8f4:	d8 01       	movw	r26, r16
 8f6:	16 96       	adiw	r26, 0x06	; 6
 8f8:	8c 91       	ld	r24, X
 8fa:	16 97       	sbiw	r26, 0x06	; 6
 8fc:	89 2b       	or	r24, r25
 8fe:	80 83       	st	Z, r24
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
 900:	1a 96       	adiw	r26, 0x0a	; 10
 902:	1c 92       	st	X, r1
 904:	da 01       	movw	r26, r20
 906:	8c 91       	ld	r24, X
 908:	84 60       	ori	r24, 0x04	; 4
 90a:	8c 93       	st	X, r24
 90c:	80 ef       	ldi	r24, 0xF0	; 240
 90e:	90 e0       	ldi	r25, 0x00	; 0
 910:	dc 01       	movw	r26, r24
 912:	2c 91       	ld	r18, X
 914:	2b 7f       	andi	r18, 0xFB	; 251
 916:	2c 93       	st	X, r18
          Can_set_idemsk();
 918:	da 01       	movw	r26, r20
 91a:	8c 91       	ld	r24, X
 91c:	81 60       	ori	r24, 0x01	; 1
 91e:	8c 93       	st	X, r24
          Can_config_rx();       
 920:	80 81       	ld	r24, Z
 922:	8f 73       	andi	r24, 0x3F	; 63
 924:	80 83       	st	Z, r24
 926:	80 81       	ld	r24, Z
 928:	80 68       	ori	r24, 0x80	; 128
 92a:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 92c:	80 e0       	ldi	r24, 0x00	; 0
          u32_temp=~0; Can_set_ext_msk(u32_temp);
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
          Can_set_idemsk();
          Can_config_rx();       
          break;
 92e:	a5 c1       	rjmp	.+842    	; 0xc7a <can_cmd+0xa86>
        //------------      
        case CMD_RX_REMOTE_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
 930:	f8 01       	movw	r30, r16
 932:	83 85       	ldd	r24, Z+11	; 0x0b
 934:	88 23       	and	r24, r24
 936:	69 f1       	breq	.+90     	; 0x992 <can_cmd+0x79e>
 938:	94 81       	ldd	r25, Z+4	; 0x04
 93a:	92 95       	swap	r25
 93c:	96 95       	lsr	r25
 93e:	97 70       	andi	r25, 0x07	; 7
 940:	85 81       	ldd	r24, Z+5	; 0x05
 942:	88 0f       	add	r24, r24
 944:	88 0f       	add	r24, r24
 946:	88 0f       	add	r24, r24
 948:	89 0f       	add	r24, r25
 94a:	80 93 f3 00 	sts	0x00F3, r24
 94e:	93 81       	ldd	r25, Z+3	; 0x03
 950:	92 95       	swap	r25
 952:	96 95       	lsr	r25
 954:	97 70       	andi	r25, 0x07	; 7
 956:	84 81       	ldd	r24, Z+4	; 0x04
 958:	88 0f       	add	r24, r24
 95a:	88 0f       	add	r24, r24
 95c:	88 0f       	add	r24, r24
 95e:	89 0f       	add	r24, r25
 960:	80 93 f2 00 	sts	0x00F2, r24
 964:	92 81       	ldd	r25, Z+2	; 0x02
 966:	92 95       	swap	r25
 968:	96 95       	lsr	r25
 96a:	97 70       	andi	r25, 0x07	; 7
 96c:	83 81       	ldd	r24, Z+3	; 0x03
 96e:	88 0f       	add	r24, r24
 970:	88 0f       	add	r24, r24
 972:	88 0f       	add	r24, r24
 974:	89 0f       	add	r24, r25
 976:	80 93 f1 00 	sts	0x00F1, r24
 97a:	82 81       	ldd	r24, Z+2	; 0x02
 97c:	88 0f       	add	r24, r24
 97e:	88 0f       	add	r24, r24
 980:	88 0f       	add	r24, r24
 982:	80 93 f0 00 	sts	0x00F0, r24
 986:	ef ee       	ldi	r30, 0xEF	; 239
 988:	f0 e0       	ldi	r31, 0x00	; 0
 98a:	80 81       	ld	r24, Z
 98c:	80 61       	ori	r24, 0x10	; 16
 98e:	80 83       	st	Z, r24
 990:	17 c0       	rjmp	.+46     	; 0x9c0 <can_cmd+0x7cc>
          else              { Can_set_std_id(cmd->id.std);}
 992:	82 81       	ldd	r24, Z+2	; 0x02
 994:	86 95       	lsr	r24
 996:	86 95       	lsr	r24
 998:	86 95       	lsr	r24
 99a:	93 81       	ldd	r25, Z+3	; 0x03
 99c:	b0 e2       	ldi	r27, 0x20	; 32
 99e:	9b 9f       	mul	r25, r27
 9a0:	80 0d       	add	r24, r0
 9a2:	11 24       	eor	r1, r1
 9a4:	80 93 f3 00 	sts	0x00F3, r24
 9a8:	f8 01       	movw	r30, r16
 9aa:	82 81       	ldd	r24, Z+2	; 0x02
 9ac:	82 95       	swap	r24
 9ae:	88 0f       	add	r24, r24
 9b0:	80 7e       	andi	r24, 0xE0	; 224
 9b2:	80 93 f2 00 	sts	0x00F2, r24
 9b6:	ef ee       	ldi	r30, 0xEF	; 239
 9b8:	f0 e0       	ldi	r31, 0x00	; 0
 9ba:	80 81       	ld	r24, Z
 9bc:	8f 7e       	andi	r24, 0xEF	; 239
 9be:	80 83       	st	Z, r24
          u32_temp=~0; Can_set_ext_msk(u32_temp);
 9c0:	8f ef       	ldi	r24, 0xFF	; 255
 9c2:	9f ef       	ldi	r25, 0xFF	; 255
 9c4:	dc 01       	movw	r26, r24
 9c6:	89 83       	std	Y+1, r24	; 0x01
 9c8:	9a 83       	std	Y+2, r25	; 0x02
 9ca:	ab 83       	std	Y+3, r26	; 0x03
 9cc:	bc 83       	std	Y+4, r27	; 0x04
 9ce:	8f ef       	ldi	r24, 0xFF	; 255
 9d0:	80 93 f7 00 	sts	0x00F7, r24
 9d4:	9a 81       	ldd	r25, Y+2	; 0x02
 9d6:	92 95       	swap	r25
 9d8:	96 95       	lsr	r25
 9da:	97 70       	andi	r25, 0x07	; 7
 9dc:	8b 81       	ldd	r24, Y+3	; 0x03
 9de:	88 0f       	add	r24, r24
 9e0:	88 0f       	add	r24, r24
 9e2:	88 0f       	add	r24, r24
 9e4:	89 0f       	add	r24, r25
 9e6:	80 93 f6 00 	sts	0x00F6, r24
 9ea:	99 81       	ldd	r25, Y+1	; 0x01
 9ec:	92 95       	swap	r25
 9ee:	96 95       	lsr	r25
 9f0:	97 70       	andi	r25, 0x07	; 7
 9f2:	8a 81       	ldd	r24, Y+2	; 0x02
 9f4:	88 0f       	add	r24, r24
 9f6:	88 0f       	add	r24, r24
 9f8:	88 0f       	add	r24, r24
 9fa:	89 0f       	add	r24, r25
 9fc:	80 93 f5 00 	sts	0x00F5, r24
 a00:	89 81       	ldd	r24, Y+1	; 0x01
 a02:	88 0f       	add	r24, r24
 a04:	88 0f       	add	r24, r24
 a06:	88 0f       	add	r24, r24
 a08:	44 ef       	ldi	r20, 0xF4	; 244
 a0a:	50 e0       	ldi	r21, 0x00	; 0
 a0c:	da 01       	movw	r26, r20
 a0e:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
 a10:	ef ee       	ldi	r30, 0xEF	; 239
 a12:	f0 e0       	ldi	r31, 0x00	; 0
 a14:	90 81       	ld	r25, Z
 a16:	d8 01       	movw	r26, r16
 a18:	16 96       	adiw	r26, 0x06	; 6
 a1a:	8c 91       	ld	r24, X
 a1c:	16 97       	sbiw	r26, 0x06	; 6
 a1e:	89 2b       	or	r24, r25
 a20:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
 a22:	81 e0       	ldi	r24, 0x01	; 1
 a24:	1a 96       	adiw	r26, 0x0a	; 10
 a26:	8c 93       	st	X, r24
 a28:	da 01       	movw	r26, r20
 a2a:	8c 91       	ld	r24, X
 a2c:	84 60       	ori	r24, 0x04	; 4
 a2e:	8c 93       	st	X, r24
 a30:	80 ef       	ldi	r24, 0xF0	; 240
 a32:	90 e0       	ldi	r25, 0x00	; 0
 a34:	dc 01       	movw	r26, r24
 a36:	2c 91       	ld	r18, X
 a38:	24 60       	ori	r18, 0x04	; 4
 a3a:	2c 93       	st	X, r18
          Can_clear_rplv();
 a3c:	80 81       	ld	r24, Z
 a3e:	8f 7d       	andi	r24, 0xDF	; 223
 a40:	80 83       	st	Z, r24
          Can_set_idemsk();
 a42:	da 01       	movw	r26, r20
 a44:	8c 91       	ld	r24, X
 a46:	81 60       	ori	r24, 0x01	; 1
 a48:	8c 93       	st	X, r24
          Can_config_rx();       
 a4a:	80 81       	ld	r24, Z
 a4c:	8f 73       	andi	r24, 0x3F	; 63
 a4e:	80 83       	st	Z, r24
 a50:	80 81       	ld	r24, Z
 a52:	80 68       	ori	r24, 0x80	; 128
 a54:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 a56:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_clear_rplv();
          Can_set_idemsk();
          Can_config_rx();       
          break;
 a58:	10 c1       	rjmp	.+544    	; 0xc7a <can_cmd+0xa86>
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
 a5a:	80 e0       	ldi	r24, 0x00	; 0
 a5c:	2a ef       	ldi	r18, 0xFA	; 250
 a5e:	30 e0       	ldi	r19, 0x00	; 0
 a60:	d8 01       	movw	r26, r16
 a62:	17 96       	adiw	r26, 0x07	; 7
 a64:	ed 91       	ld	r30, X+
 a66:	fc 91       	ld	r31, X
 a68:	18 97       	sbiw	r26, 0x08	; 8
 a6a:	e8 0f       	add	r30, r24
 a6c:	f1 1d       	adc	r31, r1
 a6e:	90 81       	ld	r25, Z
 a70:	f9 01       	movw	r30, r18
 a72:	90 83       	st	Z, r25
 a74:	8f 5f       	subi	r24, 0xFF	; 255
 a76:	16 96       	adiw	r26, 0x06	; 6
 a78:	9c 91       	ld	r25, X
 a7a:	89 17       	cp	r24, r25
 a7c:	88 f3       	brcs	.-30     	; 0xa60 <can_cmd+0x86c>
          u32_temp=0; Can_set_ext_msk(u32_temp);
 a7e:	19 82       	std	Y+1, r1	; 0x01
 a80:	1a 82       	std	Y+2, r1	; 0x02
 a82:	1b 82       	std	Y+3, r1	; 0x03
 a84:	1c 82       	std	Y+4, r1	; 0x04
 a86:	10 92 f7 00 	sts	0x00F7, r1
 a8a:	9a 81       	ldd	r25, Y+2	; 0x02
 a8c:	92 95       	swap	r25
 a8e:	96 95       	lsr	r25
 a90:	97 70       	andi	r25, 0x07	; 7
 a92:	8b 81       	ldd	r24, Y+3	; 0x03
 a94:	88 0f       	add	r24, r24
 a96:	88 0f       	add	r24, r24
 a98:	88 0f       	add	r24, r24
 a9a:	89 0f       	add	r24, r25
 a9c:	80 93 f6 00 	sts	0x00F6, r24
 aa0:	99 81       	ldd	r25, Y+1	; 0x01
 aa2:	92 95       	swap	r25
 aa4:	96 95       	lsr	r25
 aa6:	97 70       	andi	r25, 0x07	; 7
 aa8:	8a 81       	ldd	r24, Y+2	; 0x02
 aaa:	88 0f       	add	r24, r24
 aac:	88 0f       	add	r24, r24
 aae:	88 0f       	add	r24, r24
 ab0:	89 0f       	add	r24, r25
 ab2:	80 93 f5 00 	sts	0x00F5, r24
 ab6:	89 81       	ldd	r24, Y+1	; 0x01
 ab8:	88 0f       	add	r24, r24
 aba:	88 0f       	add	r24, r24
 abc:	88 0f       	add	r24, r24
 abe:	44 ef       	ldi	r20, 0xF4	; 244
 ac0:	50 e0       	ldi	r21, 0x00	; 0
 ac2:	da 01       	movw	r26, r20
 ac4:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
 ac6:	ef ee       	ldi	r30, 0xEF	; 239
 ac8:	f0 e0       	ldi	r31, 0x00	; 0
 aca:	90 81       	ld	r25, Z
 acc:	d8 01       	movw	r26, r16
 ace:	16 96       	adiw	r26, 0x06	; 6
 ad0:	8c 91       	ld	r24, X
 ad2:	16 97       	sbiw	r26, 0x06	; 6
 ad4:	89 2b       	or	r24, r25
 ad6:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
 ad8:	81 e0       	ldi	r24, 0x01	; 1
 ada:	1a 96       	adiw	r26, 0x0a	; 10
 adc:	8c 93       	st	X, r24
 ade:	da 01       	movw	r26, r20
 ae0:	8c 91       	ld	r24, X
 ae2:	84 60       	ori	r24, 0x04	; 4
 ae4:	8c 93       	st	X, r24
 ae6:	80 ef       	ldi	r24, 0xF0	; 240
 ae8:	90 e0       	ldi	r25, 0x00	; 0
 aea:	dc 01       	movw	r26, r24
 aec:	2c 91       	ld	r18, X
 aee:	24 60       	ori	r18, 0x04	; 4
 af0:	2c 93       	st	X, r18
          Can_set_rplv();
 af2:	80 81       	ld	r24, Z
 af4:	80 62       	ori	r24, 0x20	; 32
 af6:	80 83       	st	Z, r24
          Can_clear_idemsk();
 af8:	da 01       	movw	r26, r20
 afa:	8c 91       	ld	r24, X
 afc:	8e 7f       	andi	r24, 0xFE	; 254
 afe:	8c 93       	st	X, r24
          Can_config_rx();       
 b00:	80 81       	ld	r24, Z
 b02:	8f 73       	andi	r24, 0x3F	; 63
 b04:	80 83       	st	Z, r24
 b06:	80 81       	ld	r24, Z
 b08:	80 68       	ori	r24, 0x80	; 128
 b0a:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 b0c:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_set_rplv();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
 b0e:	b5 c0       	rjmp	.+362    	; 0xc7a <can_cmd+0xa86>
        //------------      
        case CMD_REPLY_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
 b10:	f8 01       	movw	r30, r16
 b12:	83 85       	ldd	r24, Z+11	; 0x0b
 b14:	88 23       	and	r24, r24
 b16:	69 f1       	breq	.+90     	; 0xb72 <can_cmd+0x97e>
 b18:	94 81       	ldd	r25, Z+4	; 0x04
 b1a:	92 95       	swap	r25
 b1c:	96 95       	lsr	r25
 b1e:	97 70       	andi	r25, 0x07	; 7
 b20:	85 81       	ldd	r24, Z+5	; 0x05
 b22:	88 0f       	add	r24, r24
 b24:	88 0f       	add	r24, r24
 b26:	88 0f       	add	r24, r24
 b28:	89 0f       	add	r24, r25
 b2a:	80 93 f3 00 	sts	0x00F3, r24
 b2e:	93 81       	ldd	r25, Z+3	; 0x03
 b30:	92 95       	swap	r25
 b32:	96 95       	lsr	r25
 b34:	97 70       	andi	r25, 0x07	; 7
 b36:	84 81       	ldd	r24, Z+4	; 0x04
 b38:	88 0f       	add	r24, r24
 b3a:	88 0f       	add	r24, r24
 b3c:	88 0f       	add	r24, r24
 b3e:	89 0f       	add	r24, r25
 b40:	80 93 f2 00 	sts	0x00F2, r24
 b44:	92 81       	ldd	r25, Z+2	; 0x02
 b46:	92 95       	swap	r25
 b48:	96 95       	lsr	r25
 b4a:	97 70       	andi	r25, 0x07	; 7
 b4c:	83 81       	ldd	r24, Z+3	; 0x03
 b4e:	88 0f       	add	r24, r24
 b50:	88 0f       	add	r24, r24
 b52:	88 0f       	add	r24, r24
 b54:	89 0f       	add	r24, r25
 b56:	80 93 f1 00 	sts	0x00F1, r24
 b5a:	82 81       	ldd	r24, Z+2	; 0x02
 b5c:	88 0f       	add	r24, r24
 b5e:	88 0f       	add	r24, r24
 b60:	88 0f       	add	r24, r24
 b62:	80 93 f0 00 	sts	0x00F0, r24
 b66:	ef ee       	ldi	r30, 0xEF	; 239
 b68:	f0 e0       	ldi	r31, 0x00	; 0
 b6a:	80 81       	ld	r24, Z
 b6c:	80 61       	ori	r24, 0x10	; 16
 b6e:	80 83       	st	Z, r24
 b70:	17 c0       	rjmp	.+46     	; 0xba0 <can_cmd+0x9ac>
          else              { Can_set_std_id(cmd->id.std);}
 b72:	82 81       	ldd	r24, Z+2	; 0x02
 b74:	86 95       	lsr	r24
 b76:	86 95       	lsr	r24
 b78:	86 95       	lsr	r24
 b7a:	93 81       	ldd	r25, Z+3	; 0x03
 b7c:	b0 e2       	ldi	r27, 0x20	; 32
 b7e:	9b 9f       	mul	r25, r27
 b80:	80 0d       	add	r24, r0
 b82:	11 24       	eor	r1, r1
 b84:	80 93 f3 00 	sts	0x00F3, r24
 b88:	f8 01       	movw	r30, r16
 b8a:	82 81       	ldd	r24, Z+2	; 0x02
 b8c:	82 95       	swap	r24
 b8e:	88 0f       	add	r24, r24
 b90:	80 7e       	andi	r24, 0xE0	; 224
 b92:	80 93 f2 00 	sts	0x00F2, r24
 b96:	ef ee       	ldi	r30, 0xEF	; 239
 b98:	f0 e0       	ldi	r31, 0x00	; 0
 b9a:	80 81       	ld	r24, Z
 b9c:	8f 7e       	andi	r24, 0xEF	; 239
 b9e:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
 ba0:	d8 01       	movw	r26, r16
 ba2:	16 96       	adiw	r26, 0x06	; 6
 ba4:	8c 91       	ld	r24, X
 ba6:	88 23       	and	r24, r24
 ba8:	91 f0       	breq	.+36     	; 0xbce <can_cmd+0x9da>
 baa:	80 e0       	ldi	r24, 0x00	; 0
 bac:	2a ef       	ldi	r18, 0xFA	; 250
 bae:	30 e0       	ldi	r19, 0x00	; 0
 bb0:	d8 01       	movw	r26, r16
 bb2:	17 96       	adiw	r26, 0x07	; 7
 bb4:	ed 91       	ld	r30, X+
 bb6:	fc 91       	ld	r31, X
 bb8:	18 97       	sbiw	r26, 0x08	; 8
 bba:	e8 0f       	add	r30, r24
 bbc:	f1 1d       	adc	r31, r1
 bbe:	90 81       	ld	r25, Z
 bc0:	f9 01       	movw	r30, r18
 bc2:	90 83       	st	Z, r25
 bc4:	8f 5f       	subi	r24, 0xFF	; 255
 bc6:	16 96       	adiw	r26, 0x06	; 6
 bc8:	9c 91       	ld	r25, X
 bca:	89 17       	cp	r24, r25
 bcc:	88 f3       	brcs	.-30     	; 0xbb0 <can_cmd+0x9bc>
          u32_temp=~0; Can_set_ext_msk(u32_temp);
 bce:	4f ef       	ldi	r20, 0xFF	; 255
 bd0:	5f ef       	ldi	r21, 0xFF	; 255
 bd2:	ba 01       	movw	r22, r20
 bd4:	49 83       	std	Y+1, r20	; 0x01
 bd6:	5a 83       	std	Y+2, r21	; 0x02
 bd8:	6b 83       	std	Y+3, r22	; 0x03
 bda:	7c 83       	std	Y+4, r23	; 0x04
 bdc:	8f ef       	ldi	r24, 0xFF	; 255
 bde:	80 93 f7 00 	sts	0x00F7, r24
 be2:	9a 81       	ldd	r25, Y+2	; 0x02
 be4:	92 95       	swap	r25
 be6:	96 95       	lsr	r25
 be8:	97 70       	andi	r25, 0x07	; 7
 bea:	8b 81       	ldd	r24, Y+3	; 0x03
 bec:	88 0f       	add	r24, r24
 bee:	88 0f       	add	r24, r24
 bf0:	88 0f       	add	r24, r24
 bf2:	89 0f       	add	r24, r25
 bf4:	80 93 f6 00 	sts	0x00F6, r24
 bf8:	99 81       	ldd	r25, Y+1	; 0x01
 bfa:	92 95       	swap	r25
 bfc:	96 95       	lsr	r25
 bfe:	97 70       	andi	r25, 0x07	; 7
 c00:	8a 81       	ldd	r24, Y+2	; 0x02
 c02:	88 0f       	add	r24, r24
 c04:	88 0f       	add	r24, r24
 c06:	88 0f       	add	r24, r24
 c08:	89 0f       	add	r24, r25
 c0a:	80 93 f5 00 	sts	0x00F5, r24
 c0e:	89 81       	ldd	r24, Y+1	; 0x01
 c10:	88 0f       	add	r24, r24
 c12:	88 0f       	add	r24, r24
 c14:	88 0f       	add	r24, r24
 c16:	44 ef       	ldi	r20, 0xF4	; 244
 c18:	50 e0       	ldi	r21, 0x00	; 0
 c1a:	da 01       	movw	r26, r20
 c1c:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
 c1e:	ef ee       	ldi	r30, 0xEF	; 239
 c20:	f0 e0       	ldi	r31, 0x00	; 0
 c22:	90 81       	ld	r25, Z
 c24:	d8 01       	movw	r26, r16
 c26:	16 96       	adiw	r26, 0x06	; 6
 c28:	8c 91       	ld	r24, X
 c2a:	16 97       	sbiw	r26, 0x06	; 6
 c2c:	89 2b       	or	r24, r25
 c2e:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
 c30:	81 e0       	ldi	r24, 0x01	; 1
 c32:	1a 96       	adiw	r26, 0x0a	; 10
 c34:	8c 93       	st	X, r24
 c36:	da 01       	movw	r26, r20
 c38:	8c 91       	ld	r24, X
 c3a:	84 60       	ori	r24, 0x04	; 4
 c3c:	8c 93       	st	X, r24
 c3e:	80 ef       	ldi	r24, 0xF0	; 240
 c40:	90 e0       	ldi	r25, 0x00	; 0
 c42:	dc 01       	movw	r26, r24
 c44:	2c 91       	ld	r18, X
 c46:	24 60       	ori	r18, 0x04	; 4
 c48:	2c 93       	st	X, r18
          Can_set_rplv();
 c4a:	80 81       	ld	r24, Z
 c4c:	80 62       	ori	r24, 0x20	; 32
 c4e:	80 83       	st	Z, r24
          Can_set_idemsk();
 c50:	da 01       	movw	r26, r20
 c52:	8c 91       	ld	r24, X
 c54:	81 60       	ori	r24, 0x01	; 1
 c56:	8c 93       	st	X, r24
          Can_config_rx();       
 c58:	80 81       	ld	r24, Z
 c5a:	8f 73       	andi	r24, 0x3F	; 63
 c5c:	80 83       	st	Z, r24
 c5e:	80 81       	ld	r24, Z
 c60:	80 68       	ori	r24, 0x80	; 128
 c62:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 c64:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_set_rplv();
          Can_set_idemsk();
          Can_config_rx();       
          break;
 c66:	09 c0       	rjmp	.+18     	; 0xc7a <can_cmd+0xa86>
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
 c68:	f8 01       	movw	r30, r16
 c6a:	11 86       	std	Z+9, r1	; 0x09
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 c6c:	80 e0       	ldi	r24, 0x00	; 0
          break;
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
          break;
 c6e:	05 c0       	rjmp	.+10     	; 0xc7a <can_cmd+0xa86>
        //------------      
      } // switch (cmd ...
    } // if (mob_handle ...
    else
    {
      cmd->status = MOB_NOT_REACHED;
 c70:	8f e1       	ldi	r24, 0x1F	; 31
 c72:	d8 01       	movw	r26, r16
 c74:	19 96       	adiw	r26, 0x09	; 9
 c76:	8c 93       	st	X, r24
      return CAN_CMD_REFUSED;
 c78:	8f ef       	ldi	r24, 0xFF	; 255
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
}
 c7a:	0f 90       	pop	r0
 c7c:	0f 90       	pop	r0
 c7e:	0f 90       	pop	r0
 c80:	0f 90       	pop	r0
 c82:	df 91       	pop	r29
 c84:	cf 91       	pop	r28
 c86:	1f 91       	pop	r17
 c88:	0f 91       	pop	r16
 c8a:	08 95       	ret

00000c8c <can_get_status>:
//!         CAN_STATUS_ERROR         - Error in configuration or in the
//!                                    CAN communication
//!
//------------------------------------------------------------------------------
uint8_t can_get_status (st_cmd_t* cmd)
{
 c8c:	ef 92       	push	r14
 c8e:	ff 92       	push	r15
 c90:	1f 93       	push	r17
 c92:	cf 93       	push	r28
 c94:	df 93       	push	r29
 c96:	ec 01       	movw	r28, r24
    uint8_t a_status, rtn_val;
     
    a_status = cmd->status;
 c98:	89 85       	ldd	r24, Y+9	; 0x09
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
 c9a:	88 23       	and	r24, r24
 c9c:	09 f4       	brne	.+2      	; 0xca0 <can_get_status+0x14>
 c9e:	91 c0       	rjmp	.+290    	; 0xdc2 <can_get_status+0x136>
 ca0:	8f 31       	cpi	r24, 0x1F	; 31
 ca2:	09 f4       	brne	.+2      	; 0xca6 <can_get_status+0x1a>
 ca4:	90 c0       	rjmp	.+288    	; 0xdc6 <can_get_status+0x13a>
 ca6:	8f 3f       	cpi	r24, 0xFF	; 255
 ca8:	09 f4       	brne	.+2      	; 0xcac <can_get_status+0x20>
 caa:	8f c0       	rjmp	.+286    	; 0xdca <can_get_status+0x13e>
    {
        return CAN_STATUS_ERROR;
    }

    Can_set_mob(cmd->handle);
 cac:	88 81       	ld	r24, Y
 cae:	82 95       	swap	r24
 cb0:	80 7f       	andi	r24, 0xF0	; 240
 cb2:	80 93 ed 00 	sts	0x00ED, r24
    a_status = can_get_mob_status();
 cb6:	0e 94 47 07 	call	0xe8e	; 0xe8e <can_get_mob_status>
 cba:	18 2f       	mov	r17, r24
    
    switch (a_status)
 cbc:	80 32       	cpi	r24, 0x20	; 32
 cbe:	59 f0       	breq	.+22     	; 0xcd6 <can_get_status+0x4a>
 cc0:	20 f4       	brcc	.+8      	; 0xcca <can_get_status+0x3e>
 cc2:	88 23       	and	r24, r24
 cc4:	09 f4       	brne	.+2      	; 0xcc8 <can_get_status+0x3c>
 cc6:	83 c0       	rjmp	.+262    	; 0xdce <can_get_status+0x142>
 cc8:	72 c0       	rjmp	.+228    	; 0xdae <can_get_status+0x122>
 cca:	80 34       	cpi	r24, 0x40	; 64
 ccc:	09 f4       	brne	.+2      	; 0xcd0 <can_get_status+0x44>
 cce:	64 c0       	rjmp	.+200    	; 0xd98 <can_get_status+0x10c>
 cd0:	80 3a       	cpi	r24, 0xA0	; 160
 cd2:	09 f0       	breq	.+2      	; 0xcd6 <can_get_status+0x4a>
 cd4:	6c c0       	rjmp	.+216    	; 0xdae <can_get_status+0x122>
            rtn_val = CAN_STATUS_NOT_COMPLETED;
            break;
        //---------------      
        case MOB_RX_COMPLETED:     
        case MOB_RX_COMPLETED_DLCW:
            cmd->dlc = Can_get_dlc();
 cd6:	0f 2e       	mov	r0, r31
 cd8:	ff ee       	ldi	r31, 0xEF	; 239
 cda:	ef 2e       	mov	r14, r31
 cdc:	f1 2c       	mov	r15, r1
 cde:	f0 2d       	mov	r31, r0
 ce0:	f7 01       	movw	r30, r14
 ce2:	80 81       	ld	r24, Z
 ce4:	8f 70       	andi	r24, 0x0F	; 15
 ce6:	8e 83       	std	Y+6, r24	; 0x06
            can_get_data(cmd->pt_data);
 ce8:	8f 81       	ldd	r24, Y+7	; 0x07
 cea:	98 85       	ldd	r25, Y+8	; 0x08
 cec:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <can_get_data>
            cmd->ctrl.rtr = Can_get_rtr();
 cf0:	80 91 f0 00 	lds	r24, 0x00F0
 cf4:	82 fb       	bst	r24, 2
 cf6:	88 27       	eor	r24, r24
 cf8:	80 f9       	bld	r24, 0
 cfa:	8a 87       	std	Y+10, r24	; 0x0a
            if (Can_get_ide()) // if extended frame
 cfc:	f7 01       	movw	r30, r14
 cfe:	80 81       	ld	r24, Z
 d00:	84 ff       	sbrs	r24, 4
 d02:	2d c0       	rjmp	.+90     	; 0xd5e <can_get_status+0xd2>
            {
                cmd->ctrl.ide = 1; // extended frame
 d04:	81 e0       	ldi	r24, 0x01	; 1
 d06:	8b 87       	std	Y+11, r24	; 0x0b
                Can_get_ext_id(cmd->id.ext);
 d08:	e3 ef       	ldi	r30, 0xF3	; 243
 d0a:	f0 e0       	ldi	r31, 0x00	; 0
 d0c:	80 81       	ld	r24, Z
 d0e:	86 95       	lsr	r24
 d10:	86 95       	lsr	r24
 d12:	86 95       	lsr	r24
 d14:	8d 83       	std	Y+5, r24	; 0x05
 d16:	a2 ef       	ldi	r26, 0xF2	; 242
 d18:	b0 e0       	ldi	r27, 0x00	; 0
 d1a:	8c 91       	ld	r24, X
 d1c:	90 81       	ld	r25, Z
 d1e:	86 95       	lsr	r24
 d20:	86 95       	lsr	r24
 d22:	86 95       	lsr	r24
 d24:	f0 e2       	ldi	r31, 0x20	; 32
 d26:	9f 9f       	mul	r25, r31
 d28:	80 0d       	add	r24, r0
 d2a:	11 24       	eor	r1, r1
 d2c:	8c 83       	std	Y+4, r24	; 0x04
 d2e:	e1 ef       	ldi	r30, 0xF1	; 241
 d30:	f0 e0       	ldi	r31, 0x00	; 0
 d32:	80 81       	ld	r24, Z
 d34:	9c 91       	ld	r25, X
 d36:	86 95       	lsr	r24
 d38:	86 95       	lsr	r24
 d3a:	86 95       	lsr	r24
 d3c:	20 e2       	ldi	r18, 0x20	; 32
 d3e:	92 9f       	mul	r25, r18
 d40:	80 0d       	add	r24, r0
 d42:	11 24       	eor	r1, r1
 d44:	8b 83       	std	Y+3, r24	; 0x03
 d46:	80 91 f0 00 	lds	r24, 0x00F0
 d4a:	90 81       	ld	r25, Z
 d4c:	86 95       	lsr	r24
 d4e:	86 95       	lsr	r24
 d50:	86 95       	lsr	r24
 d52:	e0 e2       	ldi	r30, 0x20	; 32
 d54:	9e 9f       	mul	r25, r30
 d56:	80 0d       	add	r24, r0
 d58:	11 24       	eor	r1, r1
 d5a:	8a 83       	std	Y+2, r24	; 0x02
 d5c:	13 c0       	rjmp	.+38     	; 0xd84 <can_get_status+0xf8>
            }
            else // else standard frame
                {
                    cmd->ctrl.ide = 0;
 d5e:	1b 86       	std	Y+11, r1	; 0x0b
                    Can_get_std_id(cmd->id.std);
 d60:	e3 ef       	ldi	r30, 0xF3	; 243
 d62:	f0 e0       	ldi	r31, 0x00	; 0
 d64:	80 81       	ld	r24, Z
 d66:	82 95       	swap	r24
 d68:	86 95       	lsr	r24
 d6a:	87 70       	andi	r24, 0x07	; 7
 d6c:	8b 83       	std	Y+3, r24	; 0x03
 d6e:	80 91 f2 00 	lds	r24, 0x00F2
 d72:	90 81       	ld	r25, Z
 d74:	99 0f       	add	r25, r25
 d76:	99 0f       	add	r25, r25
 d78:	99 0f       	add	r25, r25
 d7a:	82 95       	swap	r24
 d7c:	86 95       	lsr	r24
 d7e:	87 70       	andi	r24, 0x07	; 7
 d80:	89 0f       	add	r24, r25
 d82:	8a 83       	std	Y+2, r24	; 0x02
                }
            // Status field of descriptor: 0x20 if Rx completed
            // Status field of descriptor: 0xA0 if Rx completed with DLCWarning    
            cmd->status = a_status;
 d84:	19 87       	std	Y+9, r17	; 0x09
            Can_mob_abort();        // Freed the MOB
 d86:	ef ee       	ldi	r30, 0xEF	; 239
 d88:	f0 e0       	ldi	r31, 0x00	; 0
 d8a:	80 81       	ld	r24, Z
 d8c:	8f 73       	andi	r24, 0x3F	; 63
 d8e:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
 d90:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = CAN_STATUS_COMPLETED;
 d94:	80 e0       	ldi	r24, 0x00	; 0
            break;
 d96:	1c c0       	rjmp	.+56     	; 0xdd0 <can_get_status+0x144>
        //---------------      
        case MOB_TX_COMPLETED:     
            // Status field of descriptor: 0x40 if Tx completed
            cmd->status = a_status;
 d98:	80 e4       	ldi	r24, 0x40	; 64
 d9a:	89 87       	std	Y+9, r24	; 0x09
            Can_mob_abort();        // Freed the MOB
 d9c:	ef ee       	ldi	r30, 0xEF	; 239
 d9e:	f0 e0       	ldi	r31, 0x00	; 0
 da0:	80 81       	ld	r24, Z
 da2:	8f 73       	andi	r24, 0x3F	; 63
 da4:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
 da6:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = CAN_STATUS_COMPLETED;
 daa:	80 e0       	ldi	r24, 0x00	; 0
            break;
 dac:	11 c0       	rjmp	.+34     	; 0xdd0 <can_get_status+0x144>
        //---------------      
        default:
            // Status field of descriptor: (bin)000b.scfa if MOb error
            cmd->status = a_status;
 dae:	19 87       	std	Y+9, r17	; 0x09
            Can_mob_abort();        // Freed the MOB
 db0:	ef ee       	ldi	r30, 0xEF	; 239
 db2:	f0 e0       	ldi	r31, 0x00	; 0
 db4:	80 81       	ld	r24, Z
 db6:	8f 73       	andi	r24, 0x3F	; 63
 db8:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
 dba:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = CAN_STATUS_ERROR;
 dbe:	82 e0       	ldi	r24, 0x02	; 2
            break;
 dc0:	07 c0       	rjmp	.+14     	; 0xdd0 <can_get_status+0x144>
    uint8_t a_status, rtn_val;
     
    a_status = cmd->status;
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    {
        return CAN_STATUS_ERROR;
 dc2:	82 e0       	ldi	r24, 0x02	; 2
 dc4:	05 c0       	rjmp	.+10     	; 0xdd0 <can_get_status+0x144>
 dc6:	82 e0       	ldi	r24, 0x02	; 2
 dc8:	03 c0       	rjmp	.+6      	; 0xdd0 <can_get_status+0x144>
 dca:	82 e0       	ldi	r24, 0x02	; 2
 dcc:	01 c0       	rjmp	.+2      	; 0xdd0 <can_get_status+0x144>
    
    switch (a_status)
    {
        case MOB_NOT_COMPLETED:
            // cmd->status not updated
            rtn_val = CAN_STATUS_NOT_COMPLETED;
 dce:	81 e0       	ldi	r24, 0x01	; 1
            break;
             
    } // switch (a_status...
 
    return (rtn_val);
}
 dd0:	df 91       	pop	r29
 dd2:	cf 91       	pop	r28
 dd4:	1f 91       	pop	r17
 dd6:	ff 90       	pop	r15
 dd8:	ef 90       	pop	r14
 dda:	08 95       	ret

00000ddc <can_tx_sync>:
 *		buf_size, the size of the buffer
 * 
 * Returns:
 *		void	
 */
void can_tx_sync(uint16_t id, uint8_t *buffer, uint8_t buf_size) {
 ddc:	cf 93       	push	r28
 dde:	df 93       	push	r29
 de0:	cd b7       	in	r28, 0x3d	; 61
 de2:	de b7       	in	r29, 0x3e	; 62
 de4:	2c 97       	sbiw	r28, 0x0c	; 12
 de6:	0f b6       	in	r0, 0x3f	; 63
 de8:	f8 94       	cli
 dea:	de bf       	out	0x3e, r29	; 62
 dec:	0f be       	out	0x3f, r0	; 63
 dee:	cd bf       	out	0x3d, r28	; 61
	// Message command object
	st_cmd_t can_msg;
	
	// Configure TX mailbox
	can_msg.pt_data = buffer;	// point message object to the data buffer
 df0:	79 87       	std	Y+9, r23	; 0x09
 df2:	68 87       	std	Y+8, r22	; 0x08
	can_msg.ctrl.ide = 0;		// CAN 2.0A
 df4:	1c 86       	std	Y+12, r1	; 0x0c
	can_msg.dlc = buf_size;		// Number of data bytes (8 max) requested from remote node
 df6:	4f 83       	std	Y+7, r20	; 0x07
	can_msg.id.std = id;		// Message ID
 df8:	9c 83       	std	Y+4, r25	; 0x04
 dfa:	8b 83       	std	Y+3, r24	; 0x03
	can_msg.cmd = CMD_TX_DATA;	// Transmit data command object
 dfc:	82 e0       	ldi	r24, 0x02	; 2
 dfe:	8a 83       	std	Y+2, r24	; 0x02

	// Wait for MOb to configure (Must re-configure MOb for every transaction) and send request
	while(can_cmd(&can_msg) != CAN_CMD_ACCEPTED);
 e00:	ce 01       	movw	r24, r28
 e02:	01 96       	adiw	r24, 0x01	; 1
 e04:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <can_cmd>
 e08:	81 11       	cpse	r24, r1
 e0a:	fa cf       	rjmp	.-12     	; 0xe00 <can_tx_sync+0x24>
	// Wait for Tx to complete
	while(can_get_status(&can_msg) == CAN_STATUS_NOT_COMPLETED);
 e0c:	ce 01       	movw	r24, r28
 e0e:	01 96       	adiw	r24, 0x01	; 1
 e10:	0e 94 46 06 	call	0xc8c	; 0xc8c <can_get_status>
 e14:	81 30       	cpi	r24, 0x01	; 1
 e16:	d1 f3       	breq	.-12     	; 0xe0c <can_tx_sync+0x30>
}
 e18:	2c 96       	adiw	r28, 0x0c	; 12
 e1a:	0f b6       	in	r0, 0x3f	; 63
 e1c:	f8 94       	cli
 e1e:	de bf       	out	0x3e, r29	; 62
 e20:	0f be       	out	0x3f, r0	; 63
 e22:	cd bf       	out	0x3d, r28	; 61
 e24:	df 91       	pop	r29
 e26:	cf 91       	pop	r28
 e28:	08 95       	ret

00000e2a <can_clear_all_mob>:
uint8_t  mob_number;
/*
    uint8_t  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
 e2a:	20 e0       	ldi	r18, 0x00	; 0
    {
        CANPAGE = (mob_number << 4);    //! Page index
 e2c:	ad ee       	ldi	r26, 0xED	; 237
 e2e:	b0 e0       	ldi	r27, 0x00	; 0
        Can_clear_mob();                //! All MOb Registers=0
 e30:	8e ee       	ldi	r24, 0xEE	; 238
 e32:	90 e0       	ldi	r25, 0x00	; 0
    uint8_t  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    {
        CANPAGE = (mob_number << 4);    //! Page index
 e34:	32 2f       	mov	r19, r18
 e36:	32 95       	swap	r19
 e38:	30 7f       	andi	r19, 0xF0	; 240
 e3a:	3c 93       	st	X, r19
        Can_clear_mob();                //! All MOb Registers=0
 e3c:	fc 01       	movw	r30, r24
 e3e:	11 92       	st	Z+, r1
 e40:	e8 3f       	cpi	r30, 0xF8	; 248
 e42:	f1 05       	cpc	r31, r1
 e44:	e1 f7       	brne	.-8      	; 0xe3e <can_clear_all_mob+0x14>
uint8_t  mob_number;
/*
    uint8_t  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
 e46:	2f 5f       	subi	r18, 0xFF	; 255
 e48:	26 30       	cpi	r18, 0x06	; 6
 e4a:	a1 f7       	brne	.-24     	; 0xe34 <can_clear_all_mob+0xa>
        {
            CANMSG = 0;                 //! MOb data FIFO
        }
*/
    }
}
 e4c:	08 95       	ret

00000e4e <can_get_mob_free>:
//------------------------------------------------------------------------------
uint8_t can_get_mob_free(void)
{
    uint8_t mob_number, page_saved;

    page_saved = CANPAGE;
 e4e:	ed ee       	ldi	r30, 0xED	; 237
 e50:	f0 e0       	ldi	r31, 0x00	; 0
 e52:	20 81       	ld	r18, Z
    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    {
        Can_set_mob(mob_number);
 e54:	10 82       	st	Z, r1
        if ((CANCDMOB & 0xC0) == 0x00) //! Disable configuration
 e56:	80 91 ef 00 	lds	r24, 0x00EF
 e5a:	80 7c       	andi	r24, 0xC0	; 192
 e5c:	69 f0       	breq	.+26     	; 0xe78 <can_get_mob_free+0x2a>
uint8_t can_get_mob_free(void)
{
    uint8_t mob_number, page_saved;

    page_saved = CANPAGE;
    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
 e5e:	81 e0       	ldi	r24, 0x01	; 1
    {
        Can_set_mob(mob_number);
 e60:	ad ee       	ldi	r26, 0xED	; 237
 e62:	b0 e0       	ldi	r27, 0x00	; 0
        if ((CANCDMOB & 0xC0) == 0x00) //! Disable configuration
 e64:	ef ee       	ldi	r30, 0xEF	; 239
 e66:	f0 e0       	ldi	r31, 0x00	; 0
    uint8_t mob_number, page_saved;

    page_saved = CANPAGE;
    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    {
        Can_set_mob(mob_number);
 e68:	98 2f       	mov	r25, r24
 e6a:	92 95       	swap	r25
 e6c:	90 7f       	andi	r25, 0xF0	; 240
 e6e:	9c 93       	st	X, r25
        if ((CANCDMOB & 0xC0) == 0x00) //! Disable configuration
 e70:	90 81       	ld	r25, Z
 e72:	90 7c       	andi	r25, 0xC0	; 192
 e74:	29 f4       	brne	.+10     	; 0xe80 <can_get_mob_free+0x32>
 e76:	01 c0       	rjmp	.+2      	; 0xe7a <can_get_mob_free+0x2c>
uint8_t can_get_mob_free(void)
{
    uint8_t mob_number, page_saved;

    page_saved = CANPAGE;
    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
 e78:	80 e0       	ldi	r24, 0x00	; 0
    {
        Can_set_mob(mob_number);
        if ((CANCDMOB & 0xC0) == 0x00) //! Disable configuration
        {
            CANPAGE = page_saved;
 e7a:	20 93 ed 00 	sts	0x00ED, r18
            return (mob_number);
 e7e:	08 95       	ret
uint8_t can_get_mob_free(void)
{
    uint8_t mob_number, page_saved;

    page_saved = CANPAGE;
    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
 e80:	8f 5f       	subi	r24, 0xFF	; 255
 e82:	86 30       	cpi	r24, 0x06	; 6
 e84:	89 f7       	brne	.-30     	; 0xe68 <can_get_mob_free+0x1a>
        {
            CANPAGE = page_saved;
            return (mob_number);
        }
    }
    CANPAGE = page_saved;
 e86:	20 93 ed 00 	sts	0x00ED, r18
    return (NO_MOB);
 e8a:	8f ef       	ldi	r24, 0xFF	; 255
}
 e8c:	08 95       	ret

00000e8e <can_get_mob_status>:
uint8_t can_get_mob_status(void)
{
    uint8_t mob_status, canstmob_copy;

    // Test if MOb ENABLE or DISABLE
    if ((CANCDMOB & 0xC0) == 0x00) {return(MOB_DISABLE);}
 e8e:	80 91 ef 00 	lds	r24, 0x00EF
 e92:	80 7c       	andi	r24, 0xC0	; 192
 e94:	69 f0       	breq	.+26     	; 0xeb0 <can_get_mob_status+0x22>

    canstmob_copy = CANSTMOB; // Copy for test integrity
 e96:	90 91 ee 00 	lds	r25, 0x00EE

    // If MOb is ENABLE, test if MOb is COMPLETED
    // - MOb Status = 0x20 then MOB_RX_COMPLETED
    // - MOb Status = 0x40 then MOB_TX_COMPLETED
    // - MOb Status = 0xA0 then MOB_RX_COMPLETED_DLCW
    mob_status = canstmob_copy & ((1<<DLCW)|(1<<TXOK)|(1<<RXOK));
 e9a:	89 2f       	mov	r24, r25
 e9c:	80 7e       	andi	r24, 0xE0	; 224
    if ( (mob_status==MOB_RX_COMPLETED) ||   \
 e9e:	80 32       	cpi	r24, 0x20	; 32
 ea0:	41 f0       	breq	.+16     	; 0xeb2 <can_get_mob_status+0x24>
 ea2:	80 34       	cpi	r24, 0x40	; 64
 ea4:	31 f0       	breq	.+12     	; 0xeb2 <can_get_mob_status+0x24>
         (mob_status==MOB_TX_COMPLETED) ||   \
 ea6:	80 3a       	cpi	r24, 0xA0	; 160
 ea8:	21 f0       	breq	.+8      	; 0xeb2 <can_get_mob_status+0x24>
    // - MOb Status bit_0 = MOB_ACK_ERROR
    // - MOb Status bit_1 = MOB_FORM_ERROR
    // - MOb Status bit_2 = MOB_CRC_ERROR
    // - MOb Status bit_3 = MOB_STUFF_ERROR
    // - MOb Status bit_4 = MOB_BIT_ERROR
    mob_status = canstmob_copy & ERR_MOB_MSK;
 eaa:	89 2f       	mov	r24, r25
 eac:	8f 71       	andi	r24, 0x1F	; 31
 eae:	08 95       	ret
uint8_t can_get_mob_status(void)
{
    uint8_t mob_status, canstmob_copy;

    // Test if MOb ENABLE or DISABLE
    if ((CANCDMOB & 0xC0) == 0x00) {return(MOB_DISABLE);}
 eb0:	8f ef       	ldi	r24, 0xFF	; 255
    mob_status = canstmob_copy & ERR_MOB_MSK;
    if (mob_status != 0) { return(mob_status); }

    // If CANSTMOB = 0 then MOB_NOT_COMPLETED
    return(MOB_NOT_COMPLETED);
}
 eb2:	08 95       	ret

00000eb4 <can_get_data>:
//! @param CAN message data address.
//!
//! @return none.
//------------------------------------------------------------------------------
void can_get_data(uint8_t* p_can_message_data)
{
 eb4:	cf 93       	push	r28
 eb6:	df 93       	push	r29
    uint8_t data_index;

    for (data_index = 0; data_index < (Can_get_dlc()); data_index++)
 eb8:	20 91 ef 00 	lds	r18, 0x00EF
 ebc:	2f 70       	andi	r18, 0x0F	; 15
 ebe:	99 f0       	breq	.+38     	; 0xee6 <can_get_data+0x32>
 ec0:	60 e0       	ldi	r22, 0x00	; 0
    {
        *(p_can_message_data + data_index) = CANMSG;
 ec2:	ca ef       	ldi	r28, 0xFA	; 250
 ec4:	d0 e0       	ldi	r29, 0x00	; 0
//------------------------------------------------------------------------------
void can_get_data(uint8_t* p_can_message_data)
{
    uint8_t data_index;

    for (data_index = 0; data_index < (Can_get_dlc()); data_index++)
 ec6:	af ee       	ldi	r26, 0xEF	; 239
 ec8:	b0 e0       	ldi	r27, 0x00	; 0
    {
        *(p_can_message_data + data_index) = CANMSG;
 eca:	28 81       	ld	r18, Y
 ecc:	fc 01       	movw	r30, r24
 ece:	e6 0f       	add	r30, r22
 ed0:	f1 1d       	adc	r31, r1
 ed2:	20 83       	st	Z, r18
//------------------------------------------------------------------------------
void can_get_data(uint8_t* p_can_message_data)
{
    uint8_t data_index;

    for (data_index = 0; data_index < (Can_get_dlc()); data_index++)
 ed4:	6f 5f       	subi	r22, 0xFF	; 255
 ed6:	2c 91       	ld	r18, X
 ed8:	46 2f       	mov	r20, r22
 eda:	50 e0       	ldi	r21, 0x00	; 0
 edc:	2f 70       	andi	r18, 0x0F	; 15
 ede:	30 e0       	ldi	r19, 0x00	; 0
 ee0:	42 17       	cp	r20, r18
 ee2:	53 07       	cpc	r21, r19
 ee4:	94 f3       	brlt	.-28     	; 0xeca <can_get_data+0x16>
    {
        *(p_can_message_data + data_index) = CANMSG;
    }
}
 ee6:	df 91       	pop	r29
 ee8:	cf 91       	pop	r28
 eea:	08 95       	ret

00000eec <can_fixed_baudrate>:
//! @return Baudrate Status
//!         fixed = 1: baudrate performed
//------------------------------------------------------------------------------
uint8_t can_fixed_baudrate(uint8_t mode)
{
    Can_reset();
 eec:	81 e0       	ldi	r24, 0x01	; 1
 eee:	80 93 d8 00 	sts	0x00D8, r24
    Can_conf_bt();
 ef2:	86 e0       	ldi	r24, 0x06	; 6
 ef4:	80 93 e2 00 	sts	0x00E2, r24
 ef8:	84 e0       	ldi	r24, 0x04	; 4
 efa:	80 93 e3 00 	sts	0x00E3, r24
 efe:	83 e1       	ldi	r24, 0x13	; 19
 f00:	80 93 e4 00 	sts	0x00E4, r24
    return 1;
 f04:	81 e0       	ldi	r24, 0x01	; 1
 f06:	08 95       	ret

00000f08 <_exit>:
 f08:	f8 94       	cli

00000f0a <__stop_program>:
 f0a:	ff cf       	rjmp	.-2      	; 0xf0a <__stop_program>
