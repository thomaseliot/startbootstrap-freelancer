
CMR-Dashboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004ca  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  0000051e  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000110  00000000  00000000  0000054e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000b2c  00000000  00000000  0000065e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000039b  00000000  00000000  0000118a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000005eb  00000000  00000000  00001525  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000001fc  00000000  00000000  00001b10  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000003f5  00000000  00000000  00001d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000006b8  00000000  00000000  00002101  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000000d0  00000000  00000000  000027b9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	c3 00       	.word	0x00c3	; ????
  7e:	d7 00       	.word	0x00d7	; ????
  80:	c5 00       	.word	0x00c5	; ????
  82:	c7 00       	.word	0x00c7	; ????
  84:	c9 00       	.word	0x00c9	; ????
  86:	cb 00       	.word	0x00cb	; ????
  88:	cd 00       	.word	0x00cd	; ????
  8a:	cf 00       	.word	0x00cf	; ????
  8c:	d1 00       	.word	0x00d1	; ????
  8e:	d3 00       	.word	0x00d3	; ????

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	d0 e1       	ldi	r29, 0x10	; 16
  98:	de bf       	out	0x3e, r29	; 62
  9a:	cd bf       	out	0x3d, r28	; 61

0000009c <__do_copy_data>:
  9c:	11 e0       	ldi	r17, 0x01	; 1
  9e:	a0 e0       	ldi	r26, 0x00	; 0
  a0:	b1 e0       	ldi	r27, 0x01	; 1
  a2:	ea ec       	ldi	r30, 0xCA	; 202
  a4:	f4 e0       	ldi	r31, 0x04	; 4
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x10>
  a8:	05 90       	lpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0xc>
  b2:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  b6:	0c 94 63 02 	jmp	0x4c6	; 0x4c6 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <main>:
#include "spi.h"
#include "display.h"

int main(void)
{
	set_DDRs();
  be:	0e 94 99 00 	call	0x132	; 0x132 <set_DDRs>
	spi_init(0, 1, 0, 3, 0);
  c2:	00 e0       	ldi	r16, 0x00	; 0
  c4:	23 e0       	ldi	r18, 0x03	; 3
  c6:	40 e0       	ldi	r20, 0x00	; 0
  c8:	61 e0       	ldi	r22, 0x01	; 1
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	0e 94 08 02 	call	0x410	; 0x410 <spi_init>
	
	while(1) {
		display(1,321,0b100,0b0001000);
  d0:	28 e0       	ldi	r18, 0x08	; 8
  d2:	44 e0       	ldi	r20, 0x04	; 4
  d4:	61 e4       	ldi	r22, 0x41	; 65
  d6:	71 e0       	ldi	r23, 0x01	; 1
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	0e 94 ba 01 	call	0x374	; 0x374 <display>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	2f e3       	ldi	r18, 0x3F	; 63
  e0:	8d e0       	ldi	r24, 0x0D	; 13
  e2:	93 e0       	ldi	r25, 0x03	; 3
  e4:	21 50       	subi	r18, 0x01	; 1
  e6:	80 40       	sbci	r24, 0x00	; 0
  e8:	90 40       	sbci	r25, 0x00	; 0
  ea:	e1 f7       	brne	.-8      	; 0xe4 <main+0x26>
  ec:	00 c0       	rjmp	.+0      	; 0xee <main+0x30>
  ee:	00 00       	nop
		_delay_ms(1000);
		display(2,654,0b010,0b0000101);
  f0:	25 e0       	ldi	r18, 0x05	; 5
  f2:	42 e0       	ldi	r20, 0x02	; 2
  f4:	6e e8       	ldi	r22, 0x8E	; 142
  f6:	72 e0       	ldi	r23, 0x02	; 2
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	0e 94 ba 01 	call	0x374	; 0x374 <display>
  fe:	2f e3       	ldi	r18, 0x3F	; 63
 100:	8d e0       	ldi	r24, 0x0D	; 13
 102:	93 e0       	ldi	r25, 0x03	; 3
 104:	21 50       	subi	r18, 0x01	; 1
 106:	80 40       	sbci	r24, 0x00	; 0
 108:	90 40       	sbci	r25, 0x00	; 0
 10a:	e1 f7       	brne	.-8      	; 0x104 <main+0x46>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <main+0x50>
 10e:	00 00       	nop
		_delay_ms(1000);
		display(3,987,0b001,0b0000010);
 110:	22 e0       	ldi	r18, 0x02	; 2
 112:	41 e0       	ldi	r20, 0x01	; 1
 114:	6b ed       	ldi	r22, 0xDB	; 219
 116:	73 e0       	ldi	r23, 0x03	; 3
 118:	83 e0       	ldi	r24, 0x03	; 3
 11a:	0e 94 ba 01 	call	0x374	; 0x374 <display>
 11e:	2f e3       	ldi	r18, 0x3F	; 63
 120:	8d e0       	ldi	r24, 0x0D	; 13
 122:	93 e0       	ldi	r25, 0x03	; 3
 124:	21 50       	subi	r18, 0x01	; 1
 126:	80 40       	sbci	r24, 0x00	; 0
 128:	90 40       	sbci	r25, 0x00	; 0
 12a:	e1 f7       	brne	.-8      	; 0x124 <main+0x66>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <main+0x70>
 12e:	00 00       	nop
 130:	cf cf       	rjmp	.-98     	; 0xd0 <main+0x12>

00000132 <set_DDRs>:
#include "standard_dio.h"

void set_DDRs() {
	/* data direction registers (input or output)
	 * these are specific to the dashboard PCB     */
	DDRB = 0b10111010;
 132:	8a eb       	ldi	r24, 0xBA	; 186
 134:	84 b9       	out	0x04, r24	; 4
	DDRC = 0b01001010;
 136:	8a e4       	ldi	r24, 0x4A	; 74
 138:	87 b9       	out	0x07, r24	; 7
	DDRD = 0b00000000;
 13a:	1a b8       	out	0x0a, r1	; 10
	
	/* initialize all ports to zero */	
	PORTB = 0x00;
 13c:	15 b8       	out	0x05, r1	; 5
	PORTC = 0x00;
 13e:	18 b8       	out	0x08, r1	; 8
	PORTD = 0x00;
 140:	1b b8       	out	0x0b, r1	; 11
 142:	08 95       	ret

00000144 <SPI_select_left_disp>:
uint8_t right_disp_btn_pressed() {
	return is_high(PIND, PIND0);
}

void SPI_select_left_disp(uint8_t state) {
	if (state) {
 144:	88 23       	and	r24, r24
 146:	21 f0       	breq	.+8      	; 0x150 <SPI_select_left_disp+0xc>
		cbi(PORTB, PORTB3);	 // left on
 148:	2b 98       	cbi	0x05, 3	; 5
		sbi(PORTB, PORTB4);  // center off
 14a:	2c 9a       	sbi	0x05, 4	; 5
		sbi(PORTB, PORTB5);  // right off
 14c:	2d 9a       	sbi	0x05, 5	; 5
 14e:	08 95       	ret
	} else {
		sbi(PORTB, PORTB3);  // left off
 150:	2b 9a       	sbi	0x05, 3	; 5
 152:	08 95       	ret

00000154 <SPI_select_center_disp>:
	}
}

void SPI_select_center_disp(uint8_t state) {
	if (state) {
 154:	88 23       	and	r24, r24
 156:	21 f0       	breq	.+8      	; 0x160 <SPI_select_center_disp+0xc>
		sbi(PORTB, PORTB3);	 // left off
 158:	2b 9a       	sbi	0x05, 3	; 5
		cbi(PORTB, PORTB4);  // center on
 15a:	2c 98       	cbi	0x05, 4	; 5
		sbi(PORTB, PORTB5);  // right off
 15c:	2d 9a       	sbi	0x05, 5	; 5
 15e:	08 95       	ret
	} else {
		sbi(PORTB, PORTB4);  // center off
 160:	2c 9a       	sbi	0x05, 4	; 5
 162:	08 95       	ret

00000164 <SPI_select_right_disp>:
	}
}

void SPI_select_right_disp(uint8_t state) {
	if (state) {
 164:	88 23       	and	r24, r24
 166:	21 f0       	breq	.+8      	; 0x170 <SPI_select_right_disp+0xc>
		sbi(PORTB, PORTB3);	 // left off
 168:	2b 9a       	sbi	0x05, 3	; 5
		sbi(PORTB, PORTB4);  // center off
 16a:	2c 9a       	sbi	0x05, 4	; 5
		cbi(PORTB, PORTB5);  // right on
 16c:	2d 98       	cbi	0x05, 5	; 5
 16e:	08 95       	ret
	} else {
		sbi(PORTB, PORTB5);  // right off
 170:	2d 9a       	sbi	0x05, 5	; 5
 172:	08 95       	ret

00000174 <getDigit>:
#include "dashboard_dio.h"

/* Input a digit (0 - 9),
 * outputs a bit pattern in the form of (dp)abcdef for the 7-seg display   */
char getDigit(uint8_t digit) {
  switch (digit) {
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	8a 30       	cpi	r24, 0x0A	; 10
 178:	91 05       	cpc	r25, r1
 17a:	b8 f4       	brcc	.+46     	; 0x1aa <getDigit+0x36>
 17c:	fc 01       	movw	r30, r24
 17e:	e2 5c       	subi	r30, 0xC2	; 194
 180:	ff 4f       	sbci	r31, 0xFF	; 255
 182:	0c 94 49 02 	jmp	0x492	; 0x492 <__tablejump2__>
    case 0: return 0b01111110;
 186:	8e e7       	ldi	r24, 0x7E	; 126
 188:	08 95       	ret
    case 1: return 0b00110000;
    case 2: return 0b01101101;
 18a:	8d e6       	ldi	r24, 0x6D	; 109
 18c:	08 95       	ret
    case 3: return 0b01111001;
 18e:	89 e7       	ldi	r24, 0x79	; 121
 190:	08 95       	ret
    case 4: return 0b00110011;
 192:	83 e3       	ldi	r24, 0x33	; 51
 194:	08 95       	ret
    case 5: return 0b01011011;
 196:	8b e5       	ldi	r24, 0x5B	; 91
 198:	08 95       	ret
    case 6: return 0b01011111;
 19a:	8f e5       	ldi	r24, 0x5F	; 95
 19c:	08 95       	ret
    case 7: return 0b01110000;
 19e:	80 e7       	ldi	r24, 0x70	; 112
 1a0:	08 95       	ret
    case 8: return 0b01111111;
 1a2:	8f e7       	ldi	r24, 0x7F	; 127
 1a4:	08 95       	ret
    case 9: return 0b01111011;
 1a6:	8b e7       	ldi	r24, 0x7B	; 123
 1a8:	08 95       	ret
    default: return 0b00000000;
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	08 95       	ret
/* Input a digit (0 - 9),
 * outputs a bit pattern in the form of (dp)abcdef for the 7-seg display   */
char getDigit(uint8_t digit) {
  switch (digit) {
    case 0: return 0b01111110;
    case 1: return 0b00110000;
 1ae:	80 e3       	ldi	r24, 0x30	; 48
    case 7: return 0b01110000;
    case 8: return 0b01111111;
    case 9: return 0b01111011;
    default: return 0b00000000;
  }
}
 1b0:	08 95       	ret

000001b2 <thirdOut>:
// calculates byte to send to the third shift register for this character (closest to SPI source)
char thirdOut(char digit, char rgb) {
 1b2:	98 2f       	mov	r25, r24
  char final = 0b0;
  //         (dp)abcdefg             rgb
  if ((digit & 0b00000100) && (rgb & 0b010)) final |= 0b1;
 1b4:	82 ff       	sbrs	r24, 2
 1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <thirdOut+0xe>
 1b8:	61 fb       	bst	r22, 1
 1ba:	88 27       	eor	r24, r24
 1bc:	80 f9       	bld	r24, 0
 1be:	01 c0       	rjmp	.+2      	; 0x1c2 <thirdOut+0x10>
    default: return 0b00000000;
  }
}
// calculates byte to send to the third shift register for this character (closest to SPI source)
char thirdOut(char digit, char rgb) {
  char final = 0b0;
 1c0:	80 e0       	ldi	r24, 0x00	; 0
  //         (dp)abcdefg             rgb
  if ((digit & 0b00000100) && (rgb & 0b010)) final |= 0b1;
  if ((digit & 0b00001000) && (rgb & 0b001)) final |= 0b10;
 1c2:	93 ff       	sbrs	r25, 3
 1c4:	07 c0       	rjmp	.+14     	; 0x1d4 <thirdOut+0x22>
 1c6:	60 ff       	sbrs	r22, 0
 1c8:	14 c0       	rjmp	.+40     	; 0x1f2 <thirdOut+0x40>
 1ca:	82 60       	ori	r24, 0x02	; 2
 1cc:	12 c0       	rjmp	.+36     	; 0x1f2 <thirdOut+0x40>
  if ((digit & 0b00001000) && (rgb & 0b010)) final |= 0b100;
 1ce:	84 60       	ori	r24, 0x04	; 4
 1d0:	12 c0       	rjmp	.+36     	; 0x1f6 <thirdOut+0x44>
  if ((digit & 0b00001000) && (rgb & 0b100)) final |= 0b1000;
 1d2:	88 60       	ori	r24, 0x08	; 8
  if ((digit & 0b00010000) && (rgb & 0b001)) final |= 0b10000;
 1d4:	94 ff       	sbrs	r25, 4
 1d6:	05 c0       	rjmp	.+10     	; 0x1e2 <thirdOut+0x30>
 1d8:	60 ff       	sbrs	r22, 0
 1da:	10 c0       	rjmp	.+32     	; 0x1fc <thirdOut+0x4a>
 1dc:	80 61       	ori	r24, 0x10	; 16
 1de:	0e c0       	rjmp	.+28     	; 0x1fc <thirdOut+0x4a>
  if ((digit & 0b00010000) && (rgb & 0b100)) final |= 0b100000;
 1e0:	80 62       	ori	r24, 0x20	; 32
  if ((digit & 0b10000000) && (rgb & 0b010)) final |= 0b1000000;
 1e2:	99 23       	and	r25, r25
 1e4:	84 f4       	brge	.+32     	; 0x206 <thirdOut+0x54>
 1e6:	61 ff       	sbrs	r22, 1
 1e8:	0c c0       	rjmp	.+24     	; 0x202 <thirdOut+0x50>
 1ea:	80 64       	ori	r24, 0x40	; 64
 1ec:	0a c0       	rjmp	.+20     	; 0x202 <thirdOut+0x50>
  if ((digit & 0b10000000) && (rgb & 0b100)) final |= 0b10000000;
 1ee:	80 68       	ori	r24, 0x80	; 128
 1f0:	08 95       	ret
char thirdOut(char digit, char rgb) {
  char final = 0b0;
  //         (dp)abcdefg             rgb
  if ((digit & 0b00000100) && (rgb & 0b010)) final |= 0b1;
  if ((digit & 0b00001000) && (rgb & 0b001)) final |= 0b10;
  if ((digit & 0b00001000) && (rgb & 0b010)) final |= 0b100;
 1f2:	61 fd       	sbrc	r22, 1
 1f4:	ec cf       	rjmp	.-40     	; 0x1ce <thirdOut+0x1c>
  if ((digit & 0b00001000) && (rgb & 0b100)) final |= 0b1000;
 1f6:	62 fd       	sbrc	r22, 2
 1f8:	ec cf       	rjmp	.-40     	; 0x1d2 <thirdOut+0x20>
 1fa:	ec cf       	rjmp	.-40     	; 0x1d4 <thirdOut+0x22>
  if ((digit & 0b00010000) && (rgb & 0b001)) final |= 0b10000;
  if ((digit & 0b00010000) && (rgb & 0b100)) final |= 0b100000;
 1fc:	62 fd       	sbrc	r22, 2
 1fe:	f0 cf       	rjmp	.-32     	; 0x1e0 <thirdOut+0x2e>
 200:	f0 cf       	rjmp	.-32     	; 0x1e2 <thirdOut+0x30>
  if ((digit & 0b10000000) && (rgb & 0b010)) final |= 0b1000000;
  if ((digit & 0b10000000) && (rgb & 0b100)) final |= 0b10000000;
 202:	62 fd       	sbrc	r22, 2
 204:	f4 cf       	rjmp	.-24     	; 0x1ee <thirdOut+0x3c>
  return final;
}
 206:	08 95       	ret

00000208 <secondOut>:

// calculates byte to send to the second shift register for this character 
char secondOut(char digit, char rgb) {
 208:	98 2f       	mov	r25, r24
  char final = 0b0;
  //         (dp)abcdefg             rgb
  if ((digit & 0b00000100) && (rgb & 0b001)) final |= 0b1;
 20a:	82 ff       	sbrs	r24, 2
 20c:	06 c0       	rjmp	.+12     	; 0x21a <secondOut+0x12>
 20e:	86 2f       	mov	r24, r22
 210:	81 70       	andi	r24, 0x01	; 1
  if ((digit & 0b00000100) && (rgb & 0b100)) final |= 0b10;
 212:	62 ff       	sbrs	r22, 2
 214:	03 c0       	rjmp	.+6      	; 0x21c <secondOut+0x14>
 216:	82 60       	ori	r24, 0x02	; 2
 218:	01 c0       	rjmp	.+2      	; 0x21c <secondOut+0x14>
  return final;
}

// calculates byte to send to the second shift register for this character 
char secondOut(char digit, char rgb) {
  char final = 0b0;
 21a:	80 e0       	ldi	r24, 0x00	; 0
  //         (dp)abcdefg             rgb
  if ((digit & 0b00000100) && (rgb & 0b001)) final |= 0b1;
  if ((digit & 0b00000100) && (rgb & 0b100)) final |= 0b10;
  if ((digit & 0b00010000) && (rgb & 0b010)) final |= 0b100;
 21c:	94 ff       	sbrs	r25, 4
 21e:	02 c0       	rjmp	.+4      	; 0x224 <secondOut+0x1c>
 220:	61 fd       	sbrc	r22, 1
 222:	84 60       	ori	r24, 0x04	; 4
  if ((digit & 0b10000000) && (rgb & 0b001)) final |= 0b1000;
 224:	99 23       	and	r25, r25
 226:	14 f4       	brge	.+4      	; 0x22c <secondOut+0x24>
 228:	60 fd       	sbrc	r22, 0
 22a:	88 60       	ori	r24, 0x08	; 8
  if ((digit & 0b00000010) && (rgb & 0b010)) final |= 0b10000;
 22c:	91 ff       	sbrs	r25, 1
 22e:	05 c0       	rjmp	.+10     	; 0x23a <secondOut+0x32>
 230:	61 ff       	sbrs	r22, 1
 232:	0d c0       	rjmp	.+26     	; 0x24e <secondOut+0x46>
 234:	80 61       	ori	r24, 0x10	; 16
 236:	0b c0       	rjmp	.+22     	; 0x24e <secondOut+0x46>
  if ((digit & 0b00000010) && (rgb & 0b100)) final |= 0b100000;
 238:	80 62       	ori	r24, 0x20	; 32
  if ((digit & 0b00000001) && (rgb & 0b010)) final |= 0b1000000;
 23a:	90 ff       	sbrs	r25, 0
 23c:	02 c0       	rjmp	.+4      	; 0x242 <secondOut+0x3a>
 23e:	61 fd       	sbrc	r22, 1
 240:	80 64       	ori	r24, 0x40	; 64
  if ((digit & 0b00100000) && (rgb & 0b010)) final |= 0b10000000;
 242:	95 ff       	sbrs	r25, 5
 244:	07 c0       	rjmp	.+14     	; 0x254 <secondOut+0x4c>
 246:	61 ff       	sbrs	r22, 1
 248:	05 c0       	rjmp	.+10     	; 0x254 <secondOut+0x4c>
 24a:	80 68       	ori	r24, 0x80	; 128
 24c:	08 95       	ret
  if ((digit & 0b00000100) && (rgb & 0b001)) final |= 0b1;
  if ((digit & 0b00000100) && (rgb & 0b100)) final |= 0b10;
  if ((digit & 0b00010000) && (rgb & 0b010)) final |= 0b100;
  if ((digit & 0b10000000) && (rgb & 0b001)) final |= 0b1000;
  if ((digit & 0b00000010) && (rgb & 0b010)) final |= 0b10000;
  if ((digit & 0b00000010) && (rgb & 0b100)) final |= 0b100000;
 24e:	62 fd       	sbrc	r22, 2
 250:	f3 cf       	rjmp	.-26     	; 0x238 <secondOut+0x30>
 252:	f3 cf       	rjmp	.-26     	; 0x23a <secondOut+0x32>
  if ((digit & 0b00000001) && (rgb & 0b010)) final |= 0b1000000;
  if ((digit & 0b00100000) && (rgb & 0b010)) final |= 0b10000000;
  return final;
}
 254:	08 95       	ret

00000256 <firstOut>:

// calculates byte to send to the first shift register for this character (furthest from SPI source)
char firstOut(char digit, char rgb) {
 256:	98 2f       	mov	r25, r24
  char final = 0b0;
  //         (dp)abcdefg             rgb
  if ((digit & 0b00000010) && (rgb & 0b001)) final |= 0b1;
 258:	81 ff       	sbrs	r24, 1
 25a:	03 c0       	rjmp	.+6      	; 0x262 <firstOut+0xc>
 25c:	86 2f       	mov	r24, r22
 25e:	81 70       	andi	r24, 0x01	; 1
 260:	01 c0       	rjmp	.+2      	; 0x264 <firstOut+0xe>
  return final;
}

// calculates byte to send to the first shift register for this character (furthest from SPI source)
char firstOut(char digit, char rgb) {
  char final = 0b0;
 262:	80 e0       	ldi	r24, 0x00	; 0
  //         (dp)abcdefg             rgb
  if ((digit & 0b00000010) && (rgb & 0b001)) final |= 0b1;
  if ((digit & 0b00000001) && (rgb & 0b001)) final |= 0b10;
 264:	90 ff       	sbrs	r25, 0
 266:	05 c0       	rjmp	.+10     	; 0x272 <firstOut+0x1c>
 268:	60 ff       	sbrs	r22, 0
 26a:	14 c0       	rjmp	.+40     	; 0x294 <firstOut+0x3e>
 26c:	82 60       	ori	r24, 0x02	; 2
 26e:	12 c0       	rjmp	.+36     	; 0x294 <firstOut+0x3e>
  if ((digit & 0b00000001) && (rgb & 0b100)) final |= 0b100;
 270:	84 60       	ori	r24, 0x04	; 4
  if ((digit & 0b01000000) && (rgb & 0b001)) final |= 0b1000;
 272:	96 ff       	sbrs	r25, 6
 274:	07 c0       	rjmp	.+14     	; 0x284 <firstOut+0x2e>
 276:	60 ff       	sbrs	r22, 0
 278:	10 c0       	rjmp	.+32     	; 0x29a <firstOut+0x44>
 27a:	88 60       	ori	r24, 0x08	; 8
 27c:	0e c0       	rjmp	.+28     	; 0x29a <firstOut+0x44>
  if ((digit & 0b01000000) && (rgb & 0b010)) final |= 0b10000;
 27e:	80 61       	ori	r24, 0x10	; 16
 280:	0e c0       	rjmp	.+28     	; 0x29e <firstOut+0x48>
  if ((digit & 0b01000000) && (rgb & 0b100)) final |= 0b100000;
 282:	80 62       	ori	r24, 0x20	; 32
  if ((digit & 0b00100000) && (rgb & 0b001)) final |= 0b1000000;
 284:	95 ff       	sbrs	r25, 5
 286:	10 c0       	rjmp	.+32     	; 0x2a8 <firstOut+0x52>
 288:	60 ff       	sbrs	r22, 0
 28a:	0c c0       	rjmp	.+24     	; 0x2a4 <firstOut+0x4e>
 28c:	80 64       	ori	r24, 0x40	; 64
 28e:	0a c0       	rjmp	.+20     	; 0x2a4 <firstOut+0x4e>
  if ((digit & 0b00100000) && (rgb & 0b100)) final |= 0b10000000;
 290:	80 68       	ori	r24, 0x80	; 128
 292:	08 95       	ret
char firstOut(char digit, char rgb) {
  char final = 0b0;
  //         (dp)abcdefg             rgb
  if ((digit & 0b00000010) && (rgb & 0b001)) final |= 0b1;
  if ((digit & 0b00000001) && (rgb & 0b001)) final |= 0b10;
  if ((digit & 0b00000001) && (rgb & 0b100)) final |= 0b100;
 294:	62 fd       	sbrc	r22, 2
 296:	ec cf       	rjmp	.-40     	; 0x270 <firstOut+0x1a>
 298:	ec cf       	rjmp	.-40     	; 0x272 <firstOut+0x1c>
  if ((digit & 0b01000000) && (rgb & 0b001)) final |= 0b1000;
  if ((digit & 0b01000000) && (rgb & 0b010)) final |= 0b10000;
 29a:	61 fd       	sbrc	r22, 1
 29c:	f0 cf       	rjmp	.-32     	; 0x27e <firstOut+0x28>
  if ((digit & 0b01000000) && (rgb & 0b100)) final |= 0b100000;
 29e:	62 fd       	sbrc	r22, 2
 2a0:	f0 cf       	rjmp	.-32     	; 0x282 <firstOut+0x2c>
 2a2:	f0 cf       	rjmp	.-32     	; 0x284 <firstOut+0x2e>
  if ((digit & 0b00100000) && (rgb & 0b001)) final |= 0b1000000;
  if ((digit & 0b00100000) && (rgb & 0b100)) final |= 0b10000000;
 2a4:	62 fd       	sbrc	r22, 2
 2a6:	f4 cf       	rjmp	.-24     	; 0x290 <firstOut+0x3a>
  return final;
}
 2a8:	08 95       	ret

000002aa <writeDigit>:

// writes a digit with the specified color (rbg is 3-bit binary set of flags). 
void writeDigit(char dig, char rgb) {
 2aa:	0f 93       	push	r16
 2ac:	1f 93       	push	r17
 2ae:	cf 93       	push	r28
 2b0:	df 93       	push	r29
 2b2:	d6 2f       	mov	r29, r22
  char digit = getDigit(dig);
 2b4:	0e 94 ba 00 	call	0x174	; 0x174 <getDigit>
 2b8:	c8 2f       	mov	r28, r24
  char first = firstOut(digit, rgb);
 2ba:	6d 2f       	mov	r22, r29
 2bc:	0e 94 2b 01 	call	0x256	; 0x256 <firstOut>
 2c0:	08 2f       	mov	r16, r24
  char second = secondOut(digit, rgb);
 2c2:	6d 2f       	mov	r22, r29
 2c4:	8c 2f       	mov	r24, r28
 2c6:	0e 94 04 01 	call	0x208	; 0x208 <secondOut>
 2ca:	18 2f       	mov	r17, r24
  char third = thirdOut(digit, rgb);
 2cc:	6d 2f       	mov	r22, r29
 2ce:	8c 2f       	mov	r24, r28
 2d0:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <thirdOut>
 2d4:	c8 2f       	mov	r28, r24
  //shift first
  spi_send(first);
 2d6:	80 2f       	mov	r24, r16
 2d8:	0e 94 2f 02 	call	0x45e	; 0x45e <spi_send>
  //shift second
  spi_send(second);
 2dc:	81 2f       	mov	r24, r17
 2de:	0e 94 2f 02 	call	0x45e	; 0x45e <spi_send>
  //shift third
  spi_send(third);
 2e2:	8c 2f       	mov	r24, r28
 2e4:	0e 94 2f 02 	call	0x45e	; 0x45e <spi_send>
}
 2e8:	df 91       	pop	r29
 2ea:	cf 91       	pop	r28
 2ec:	1f 91       	pop	r17
 2ee:	0f 91       	pop	r16
 2f0:	08 95       	ret

000002f2 <write_value>:

// writes a value to a display (a three-digit decimal number)
void write_value(short val, char rgb) {
 2f2:	0f 93       	push	r16
 2f4:	1f 93       	push	r17
 2f6:	cf 93       	push	r28
 2f8:	df 93       	push	r29
 2fa:	c6 2f       	mov	r28, r22
 2fc:	88 3e       	cpi	r24, 0xE8	; 232
 2fe:	23 e0       	ldi	r18, 0x03	; 3
 300:	92 07       	cpc	r25, r18
 302:	14 f0       	brlt	.+4      	; 0x308 <write_value+0x16>
 304:	87 ee       	ldi	r24, 0xE7	; 231
 306:	93 e0       	ldi	r25, 0x03	; 3
 308:	9c 01       	movw	r18, r24
 30a:	99 23       	and	r25, r25
 30c:	24 f4       	brge	.+8      	; 0x316 <write_value+0x24>
 30e:	22 27       	eor	r18, r18
 310:	33 27       	eor	r19, r19
 312:	28 1b       	sub	r18, r24
 314:	39 0b       	sbc	r19, r25
	if (val > 999)
		val = 999;
	if (val < 0)
		val = -val;
	
	char hundreds_digit = val / 100;
 316:	c9 01       	movw	r24, r18
 318:	64 e6       	ldi	r22, 0x64	; 100
 31a:	70 e0       	ldi	r23, 0x00	; 0
 31c:	0e 94 35 02 	call	0x46a	; 0x46a <__divmodhi4>
 320:	46 2f       	mov	r20, r22
	char tens_digit = (val / 10) % 10;
 322:	ea e0       	ldi	r30, 0x0A	; 10
 324:	f0 e0       	ldi	r31, 0x00	; 0
 326:	c9 01       	movw	r24, r18
 328:	bf 01       	movw	r22, r30
 32a:	0e 94 35 02 	call	0x46a	; 0x46a <__divmodhi4>
 32e:	08 2f       	mov	r16, r24
 330:	cb 01       	movw	r24, r22
 332:	bf 01       	movw	r22, r30
 334:	0e 94 35 02 	call	0x46a	; 0x46a <__divmodhi4>
 338:	d8 2f       	mov	r29, r24
	char ones_digit = val  % 10;
	
	char rgb_hundreds = rgb;
	char rgb_tens = rgb;
	
	if (hundreds_digit == 0)
 33a:	44 23       	and	r20, r20
 33c:	89 f0       	breq	.+34     	; 0x360 <write_value+0x6e>
	
	char hundreds_digit = val / 100;
	char tens_digit = (val / 10) % 10;
	char ones_digit = val  % 10;
	
	char rgb_hundreds = rgb;
 33e:	6c 2f       	mov	r22, r28
	char rgb_tens = rgb;
 340:	1c 2f       	mov	r17, r28
 342:	02 c0       	rjmp	.+4      	; 0x348 <write_value+0x56>
	
	if (hundreds_digit == 0)
		rgb_hundreds = 0b000;
 344:	60 e0       	ldi	r22, 0x00	; 0
	
	if (hundreds_digit == 0 && tens_digit == 0)
		rgb_tens = 0b000;
 346:	10 e0       	ldi	r17, 0x00	; 0
	
	// hundreds place character
	writeDigit(hundreds_digit, rgb_hundreds);
 348:	84 2f       	mov	r24, r20
 34a:	0e 94 55 01 	call	0x2aa	; 0x2aa <writeDigit>
	
	// tens place character
	writeDigit(tens_digit, rgb_tens);
 34e:	61 2f       	mov	r22, r17
 350:	8d 2f       	mov	r24, r29
 352:	0e 94 55 01 	call	0x2aa	; 0x2aa <writeDigit>
	
	// ones place character
	writeDigit(ones_digit, rgb);
 356:	6c 2f       	mov	r22, r28
 358:	80 2f       	mov	r24, r16
 35a:	0e 94 55 01 	call	0x2aa	; 0x2aa <writeDigit>
 35e:	05 c0       	rjmp	.+10     	; 0x36a <write_value+0x78>
	char rgb_tens = rgb;
	
	if (hundreds_digit == 0)
		rgb_hundreds = 0b000;
	
	if (hundreds_digit == 0 && tens_digit == 0)
 360:	88 23       	and	r24, r24
 362:	81 f3       	breq	.-32     	; 0x344 <write_value+0x52>
	char hundreds_digit = val / 100;
	char tens_digit = (val / 10) % 10;
	char ones_digit = val  % 10;
	
	char rgb_hundreds = rgb;
	char rgb_tens = rgb;
 364:	1c 2f       	mov	r17, r28
	
	if (hundreds_digit == 0)
		rgb_hundreds = 0b000;
 366:	60 e0       	ldi	r22, 0x00	; 0
 368:	ef cf       	rjmp	.-34     	; 0x348 <write_value+0x56>
	writeDigit(tens_digit, rgb_tens);
	
	// ones place character
	writeDigit(ones_digit, rgb);

}
 36a:	df 91       	pop	r29
 36c:	cf 91       	pop	r28
 36e:	1f 91       	pop	r17
 370:	0f 91       	pop	r16
 372:	08 95       	ret

00000374 <display>:
/* Performs all actions needed to update a display module.
 * which_display:  1 = left, 2 = center, 3 = right
 * val:			   a numerical value to display (0 to 999)
 * rgb:			   what color to use (eg. 0b100 is red, 0b101 is purple)
 * LEDs:		   which indicator LEDs to turn on    */
void display(char which_display, short val, char rgb, char LEDs) {
 374:	ff 92       	push	r15
 376:	0f 93       	push	r16
 378:	1f 93       	push	r17
 37a:	cf 93       	push	r28
 37c:	df 93       	push	r29
 37e:	18 2f       	mov	r17, r24
 380:	eb 01       	movw	r28, r22
 382:	04 2f       	mov	r16, r20
 384:	f2 2e       	mov	r15, r18
	switch(which_display) {
 386:	82 30       	cpi	r24, 0x02	; 2
 388:	79 f0       	breq	.+30     	; 0x3a8 <display+0x34>
 38a:	83 30       	cpi	r24, 0x03	; 3
 38c:	c1 f0       	breq	.+48     	; 0x3be <display+0x4a>
 38e:	81 30       	cpi	r24, 0x01	; 1
 390:	09 f5       	brne	.+66     	; 0x3d4 <display+0x60>
		case 1:
			SPI_select_left_disp(1);
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	0e 94 a2 00 	call	0x144	; 0x144 <SPI_select_left_disp>
			break;
		case 3:
			SPI_select_right_disp(1);
			break;
	}
	spi_send(LEDs);
 398:	8f 2d       	mov	r24, r15
 39a:	0e 94 2f 02 	call	0x45e	; 0x45e <spi_send>
	write_value(val, rgb);
 39e:	60 2f       	mov	r22, r16
 3a0:	ce 01       	movw	r24, r28
 3a2:	0e 94 79 01 	call	0x2f2	; 0x2f2 <write_value>
 3a6:	23 c0       	rjmp	.+70     	; 0x3ee <display+0x7a>
	switch(which_display) {
		case 1:
			SPI_select_left_disp(1);
			break;
		case 2:
			SPI_select_center_disp(1);
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	0e 94 aa 00 	call	0x154	; 0x154 <SPI_select_center_disp>
			break;
		case 3:
			SPI_select_right_disp(1);
			break;
	}
	spi_send(LEDs);
 3ae:	8f 2d       	mov	r24, r15
 3b0:	0e 94 2f 02 	call	0x45e	; 0x45e <spi_send>
	write_value(val, rgb);
 3b4:	60 2f       	mov	r22, r16
 3b6:	ce 01       	movw	r24, r28
 3b8:	0e 94 79 01 	call	0x2f2	; 0x2f2 <write_value>
 3bc:	1c c0       	rjmp	.+56     	; 0x3f6 <display+0x82>
			break;
		case 2:
			SPI_select_center_disp(1);
			break;
		case 3:
			SPI_select_right_disp(1);
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	0e 94 b2 00 	call	0x164	; 0x164 <SPI_select_right_disp>
			break;
	}
	spi_send(LEDs);
 3c4:	8f 2d       	mov	r24, r15
 3c6:	0e 94 2f 02 	call	0x45e	; 0x45e <spi_send>
	write_value(val, rgb);
 3ca:	60 2f       	mov	r22, r16
 3cc:	ce 01       	movw	r24, r28
 3ce:	0e 94 79 01 	call	0x2f2	; 0x2f2 <write_value>
 3d2:	15 c0       	rjmp	.+42     	; 0x3fe <display+0x8a>
			break;
		case 3:
			SPI_select_right_disp(1);
			break;
	}
	spi_send(LEDs);
 3d4:	82 2f       	mov	r24, r18
 3d6:	0e 94 2f 02 	call	0x45e	; 0x45e <spi_send>
	write_value(val, rgb);
 3da:	60 2f       	mov	r22, r16
 3dc:	ce 01       	movw	r24, r28
 3de:	0e 94 79 01 	call	0x2f2	; 0x2f2 <write_value>
	switch(which_display) {
 3e2:	12 30       	cpi	r17, 0x02	; 2
 3e4:	41 f0       	breq	.+16     	; 0x3f6 <display+0x82>
 3e6:	13 30       	cpi	r17, 0x03	; 3
 3e8:	51 f0       	breq	.+20     	; 0x3fe <display+0x8a>
 3ea:	11 30       	cpi	r17, 0x01	; 1
 3ec:	59 f4       	brne	.+22     	; 0x404 <display+0x90>
		case 1:
			SPI_select_left_disp(0);
 3ee:	80 e0       	ldi	r24, 0x00	; 0
 3f0:	0e 94 a2 00 	call	0x144	; 0x144 <SPI_select_left_disp>
			break;
 3f4:	07 c0       	rjmp	.+14     	; 0x404 <display+0x90>
		case 2:
			SPI_select_center_disp(0);
 3f6:	80 e0       	ldi	r24, 0x00	; 0
 3f8:	0e 94 aa 00 	call	0x154	; 0x154 <SPI_select_center_disp>
			break;
 3fc:	03 c0       	rjmp	.+6      	; 0x404 <display+0x90>
		case 3:
			SPI_select_right_disp(0);
 3fe:	80 e0       	ldi	r24, 0x00	; 0
 400:	0e 94 b2 00 	call	0x164	; 0x164 <SPI_select_right_disp>
			break;
	}
 404:	df 91       	pop	r29
 406:	cf 91       	pop	r28
 408:	1f 91       	pop	r17
 40a:	0f 91       	pop	r16
 40c:	ff 90       	pop	r15
 40e:	08 95       	ret

00000410 <spi_init>:
//  EXAMPLE: spi_init(0, 1, 0, 3, 0)
void spi_init(uint8_t lsbfirst,
              uint8_t master,
              uint8_t mode,
              uint8_t clkrate,
              uint8_t dblclk){
 410:	0f 93       	push	r16
  //set outputs
  __SPI_DDR |= ((1<<__SPI_MOSI) | (1<<__SPI_SCK));
 412:	94 b1       	in	r25, 0x04	; 4
 414:	92 68       	ori	r25, 0x82	; 130
 416:	94 b9       	out	0x04, r25	; 4
  //set inputs
  __SPI_DDR &= ~(1<<__SPI_MISO);
 418:	20 98       	cbi	0x04, 0	; 4
  __SPI_PORT |= (1<<__SPI_MISO); //turn on pull-up resistor
 41a:	28 9a       	sbi	0x05, 0	; 5
  //set SPI control register
  SPCR = (
 41c:	23 70       	andi	r18, 0x03	; 3
 41e:	20 64       	ori	r18, 0x40	; 64
           (1<<SPE) | //enable SPI
           ((lsbfirst & __SPI_LSBFIRST_MASK)<<DORD) | //set msb/lsb ordering
           ((master & __SPI_MASTER_MASK)<<MSTR) | //set master/slave mode
           ((mode & __SPI_MODE_MASK)<<CPHA) | //set mode
 420:	43 70       	andi	r20, 0x03	; 3
 422:	44 0f       	add	r20, r20
 424:	44 0f       	add	r20, r20
  __SPI_DDR |= ((1<<__SPI_MOSI) | (1<<__SPI_SCK));
  //set inputs
  __SPI_DDR &= ~(1<<__SPI_MISO);
  __SPI_PORT |= (1<<__SPI_MISO); //turn on pull-up resistor
  //set SPI control register
  SPCR = (
 426:	24 2b       	or	r18, r20
           (1<<SPE) | //enable SPI
           ((lsbfirst & __SPI_LSBFIRST_MASK)<<DORD) | //set msb/lsb ordering
           ((master & __SPI_MASTER_MASK)<<MSTR) | //set master/slave mode
 428:	a6 2f       	mov	r26, r22
 42a:	a1 70       	andi	r26, 0x01	; 1
 42c:	b0 e0       	ldi	r27, 0x00	; 0
 42e:	a2 95       	swap	r26
 430:	b2 95       	swap	r27
 432:	b0 7f       	andi	r27, 0xF0	; 240
 434:	ba 27       	eor	r27, r26
 436:	a0 7f       	andi	r26, 0xF0	; 240
 438:	ba 27       	eor	r27, r26
  __SPI_DDR |= ((1<<__SPI_MOSI) | (1<<__SPI_SCK));
  //set inputs
  __SPI_DDR &= ~(1<<__SPI_MISO);
  __SPI_PORT |= (1<<__SPI_MISO); //turn on pull-up resistor
  //set SPI control register
  SPCR = (
 43a:	a2 2b       	or	r26, r18
           (1<<SPE) | //enable SPI
           ((lsbfirst & __SPI_LSBFIRST_MASK)<<DORD) | //set msb/lsb ordering
 43c:	e8 2f       	mov	r30, r24
 43e:	e1 70       	andi	r30, 0x01	; 1
 440:	f0 e0       	ldi	r31, 0x00	; 0
 442:	ee 0f       	add	r30, r30
 444:	ff 1f       	adc	r31, r31
 446:	e2 95       	swap	r30
 448:	f2 95       	swap	r31
 44a:	f0 7f       	andi	r31, 0xF0	; 240
 44c:	fe 27       	eor	r31, r30
 44e:	e0 7f       	andi	r30, 0xF0	; 240
 450:	fe 27       	eor	r31, r30
  __SPI_DDR |= ((1<<__SPI_MOSI) | (1<<__SPI_SCK));
  //set inputs
  __SPI_DDR &= ~(1<<__SPI_MISO);
  __SPI_PORT |= (1<<__SPI_MISO); //turn on pull-up resistor
  //set SPI control register
  SPCR = (
 452:	ae 2b       	or	r26, r30
 454:	ac bd       	out	0x2c, r26	; 44
           ((master & __SPI_MASTER_MASK)<<MSTR) | //set master/slave mode
           ((mode & __SPI_MODE_MASK)<<CPHA) | //set mode
           (clkrate & __SPI_SPEED_MASK<<SPR0) //set speed
         );
  //set double speed bit
  SPSR = ((dblclk&__SPI_DBLCLK_MASK)<<SPI2X);
 456:	01 70       	andi	r16, 0x01	; 1
 458:	0d bd       	out	0x2d, r16	; 45
}
 45a:	0f 91       	pop	r16
 45c:	08 95       	ret

0000045e <spi_send>:
//  returns uint8_t - the data received during sending
uint8_t spi_send(uint8_t value){
  uint8_t result;

  //shift the first byte of the value
  SPDR = value;
 45e:	8e bd       	out	0x2e, r24	; 46
  //wait for the SPI bus to finish
  while(!(SPSR & (1<<SPIF)));
 460:	0d b4       	in	r0, 0x2d	; 45
 462:	07 fe       	sbrs	r0, 7
 464:	fd cf       	rjmp	.-6      	; 0x460 <spi_send+0x2>
  //get the received data
  result = SPDR;
 466:	8e b5       	in	r24, 0x2e	; 46

  return result;
}
 468:	08 95       	ret

0000046a <__divmodhi4>:
 46a:	97 fb       	bst	r25, 7
 46c:	07 2e       	mov	r0, r23
 46e:	16 f4       	brtc	.+4      	; 0x474 <__divmodhi4+0xa>
 470:	00 94       	com	r0
 472:	07 d0       	rcall	.+14     	; 0x482 <__divmodhi4_neg1>
 474:	77 fd       	sbrc	r23, 7
 476:	09 d0       	rcall	.+18     	; 0x48a <__divmodhi4_neg2>
 478:	0e 94 4f 02 	call	0x49e	; 0x49e <__udivmodhi4>
 47c:	07 fc       	sbrc	r0, 7
 47e:	05 d0       	rcall	.+10     	; 0x48a <__divmodhi4_neg2>
 480:	3e f4       	brtc	.+14     	; 0x490 <__divmodhi4_exit>

00000482 <__divmodhi4_neg1>:
 482:	90 95       	com	r25
 484:	81 95       	neg	r24
 486:	9f 4f       	sbci	r25, 0xFF	; 255
 488:	08 95       	ret

0000048a <__divmodhi4_neg2>:
 48a:	70 95       	com	r23
 48c:	61 95       	neg	r22
 48e:	7f 4f       	sbci	r23, 0xFF	; 255

00000490 <__divmodhi4_exit>:
 490:	08 95       	ret

00000492 <__tablejump2__>:
 492:	ee 0f       	add	r30, r30
 494:	ff 1f       	adc	r31, r31

00000496 <__tablejump__>:
 496:	05 90       	lpm	r0, Z+
 498:	f4 91       	lpm	r31, Z
 49a:	e0 2d       	mov	r30, r0
 49c:	09 94       	ijmp

0000049e <__udivmodhi4>:
 49e:	aa 1b       	sub	r26, r26
 4a0:	bb 1b       	sub	r27, r27
 4a2:	51 e1       	ldi	r21, 0x11	; 17
 4a4:	07 c0       	rjmp	.+14     	; 0x4b4 <__udivmodhi4_ep>

000004a6 <__udivmodhi4_loop>:
 4a6:	aa 1f       	adc	r26, r26
 4a8:	bb 1f       	adc	r27, r27
 4aa:	a6 17       	cp	r26, r22
 4ac:	b7 07       	cpc	r27, r23
 4ae:	10 f0       	brcs	.+4      	; 0x4b4 <__udivmodhi4_ep>
 4b0:	a6 1b       	sub	r26, r22
 4b2:	b7 0b       	sbc	r27, r23

000004b4 <__udivmodhi4_ep>:
 4b4:	88 1f       	adc	r24, r24
 4b6:	99 1f       	adc	r25, r25
 4b8:	5a 95       	dec	r21
 4ba:	a9 f7       	brne	.-22     	; 0x4a6 <__udivmodhi4_loop>
 4bc:	80 95       	com	r24
 4be:	90 95       	com	r25
 4c0:	bc 01       	movw	r22, r24
 4c2:	cd 01       	movw	r24, r26
 4c4:	08 95       	ret

000004c6 <_exit>:
 4c6:	f8 94       	cli

000004c8 <__stop_program>:
 4c8:	ff cf       	rjmp	.-2      	; 0x4c8 <__stop_program>
