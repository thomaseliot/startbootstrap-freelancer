
Dashboard_CAN.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  000019de  00001a72  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000095  0080011e  0080011e  00001a90  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001a90  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002b0  00000000  00000000  00001ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002b82  00000000  00000000  00001d70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c9e  00000000  00000000  000048f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000010f6  00000000  00000000  00005590  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000678  00000000  00000000  00006688  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000baa  00000000  00000000  00006d00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000025d4  00000000  00000000  000078aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000260  00000000  00000000  00009e7e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a4 00 	jmp	0x148	; 0x148 <__ctors_end>
       4:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
       8:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
       c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      10:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      14:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      18:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      1c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      20:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      24:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      28:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      2c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      30:	0c 94 05 01 	jmp	0x20a	; 0x20a <__vector_12>
      34:	0c 94 c3 00 	jmp	0x186	; 0x186 <__vector_13>
      38:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      3c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      40:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      44:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      48:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      4c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      50:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      54:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      58:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      5c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      60:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      64:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      68:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      6c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      70:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      74:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      78:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      7c:	3f 04       	cpc	r3, r15
      7e:	57 04       	cpc	r5, r7
      80:	57 04       	cpc	r5, r7
      82:	57 04       	cpc	r5, r7
      84:	57 04       	cpc	r5, r7
      86:	57 04       	cpc	r5, r7
      88:	57 04       	cpc	r5, r7
      8a:	57 04       	cpc	r5, r7
      8c:	57 04       	cpc	r5, r7
      8e:	57 04       	cpc	r5, r7
      90:	57 04       	cpc	r5, r7
      92:	57 04       	cpc	r5, r7
      94:	57 04       	cpc	r5, r7
      96:	43 04       	cpc	r4, r3
      98:	57 04       	cpc	r5, r7
      9a:	57 04       	cpc	r5, r7
      9c:	45 04       	cpc	r4, r5
      9e:	47 04       	cpc	r4, r7
      a0:	49 04       	cpc	r4, r9
      a2:	4b 04       	cpc	r4, r11
      a4:	4d 04       	cpc	r4, r13
      a6:	4f 04       	cpc	r4, r15
      a8:	51 04       	cpc	r5, r1
      aa:	53 04       	cpc	r5, r3
      ac:	59 04       	cpc	r5, r9
      ae:	55 04       	cpc	r5, r5
      b0:	57 04       	cpc	r5, r7
      b2:	57 04       	cpc	r5, r7
      b4:	57 04       	cpc	r5, r7
      b6:	57 04       	cpc	r5, r7
      b8:	57 04       	cpc	r5, r7
      ba:	57 04       	cpc	r5, r7
      bc:	57 04       	cpc	r5, r7
      be:	e3 03       	fmuls	r22, r19
      c0:	59 04       	cpc	r5, r9
      c2:	e5 03       	fmuls	r22, r21
      c4:	e7 03       	fmuls	r22, r23
      c6:	e9 03       	fmulsu	r22, r17
      c8:	eb 03       	fmulsu	r22, r19
      ca:	ed 03       	fmulsu	r22, r21
      cc:	ef 03       	fmulsu	r22, r23
      ce:	f1 03       	fmuls	r23, r17
      d0:	f3 03       	fmuls	r23, r19
      d2:	f5 03       	fmuls	r23, r21
      d4:	f7 03       	fmuls	r23, r23
      d6:	57 04       	cpc	r5, r7
      d8:	f9 03       	fmulsu	r23, r17
      da:	fb 03       	fmulsu	r23, r19
      dc:	fd 03       	fmulsu	r23, r21
      de:	ff 03       	fmulsu	r23, r23
      e0:	01 04       	cpc	r0, r1
      e2:	03 04       	cpc	r0, r3
      e4:	05 04       	cpc	r0, r5
      e6:	07 04       	cpc	r0, r7
      e8:	09 04       	cpc	r0, r9
      ea:	57 04       	cpc	r5, r7
      ec:	0b 04       	cpc	r0, r11
      ee:	0d 04       	cpc	r0, r13
      f0:	0f 04       	cpc	r0, r15
      f2:	57 04       	cpc	r5, r7
      f4:	57 04       	cpc	r5, r7
      f6:	57 04       	cpc	r5, r7
      f8:	57 04       	cpc	r5, r7
      fa:	41 04       	cpc	r4, r1
      fc:	57 04       	cpc	r5, r7
      fe:	e3 03       	fmuls	r22, r19
     100:	11 04       	cpc	r1, r1
     102:	13 04       	cpc	r1, r3
     104:	15 04       	cpc	r1, r5
     106:	17 04       	cpc	r1, r7
     108:	19 04       	cpc	r1, r9
     10a:	1b 04       	cpc	r1, r11
     10c:	1d 04       	cpc	r1, r13
     10e:	1f 04       	cpc	r1, r15
     110:	21 04       	cpc	r2, r1
     112:	23 04       	cpc	r2, r3
     114:	25 04       	cpc	r2, r5
     116:	57 04       	cpc	r5, r7
     118:	27 04       	cpc	r2, r7
     11a:	29 04       	cpc	r2, r9
     11c:	2b 04       	cpc	r2, r11
     11e:	2d 04       	cpc	r2, r13
     120:	2f 04       	cpc	r2, r15
     122:	31 04       	cpc	r3, r1
     124:	33 04       	cpc	r3, r3
     126:	35 04       	cpc	r3, r5
     128:	37 04       	cpc	r3, r7
     12a:	57 04       	cpc	r5, r7
     12c:	39 04       	cpc	r3, r9
     12e:	3b 04       	cpc	r3, r11
     130:	3d 04       	cpc	r3, r13
     132:	9d 06       	cpc	r9, r29
     134:	1c 07       	cpc	r17, r28
     136:	93 07       	cpc	r25, r19
     138:	f4 07       	cpc	r31, r20
     13a:	2f 08       	sbc	r2, r15
     13c:	74 08       	sbc	r7, r4
     13e:	bd 08       	sbc	r11, r13
     140:	43 09       	sbc	r20, r3
     142:	d3 09       	sbc	r29, r3
     144:	97 06       	cpc	r9, r23
     146:	c2 0a       	sbc	r12, r18

00000148 <__ctors_end>:
     148:	11 24       	eor	r1, r1
     14a:	1f be       	out	0x3f, r1	; 63
     14c:	cf ef       	ldi	r28, 0xFF	; 255
     14e:	d0 e1       	ldi	r29, 0x10	; 16
     150:	de bf       	out	0x3e, r29	; 62
     152:	cd bf       	out	0x3d, r28	; 61

00000154 <__do_copy_data>:
     154:	11 e0       	ldi	r17, 0x01	; 1
     156:	a0 e0       	ldi	r26, 0x00	; 0
     158:	b1 e0       	ldi	r27, 0x01	; 1
     15a:	ee ed       	ldi	r30, 0xDE	; 222
     15c:	f9 e1       	ldi	r31, 0x19	; 25
     15e:	02 c0       	rjmp	.+4      	; 0x164 <__do_copy_data+0x10>
     160:	05 90       	lpm	r0, Z+
     162:	0d 92       	st	X+, r0
     164:	ae 31       	cpi	r26, 0x1E	; 30
     166:	b1 07       	cpc	r27, r17
     168:	d9 f7       	brne	.-10     	; 0x160 <__do_copy_data+0xc>

0000016a <__do_clear_bss>:
     16a:	21 e0       	ldi	r18, 0x01	; 1
     16c:	ae e1       	ldi	r26, 0x1E	; 30
     16e:	b1 e0       	ldi	r27, 0x01	; 1
     170:	01 c0       	rjmp	.+2      	; 0x174 <.do_clear_bss_start>

00000172 <.do_clear_bss_loop>:
     172:	1d 92       	st	X+, r1

00000174 <.do_clear_bss_start>:
     174:	a3 3b       	cpi	r26, 0xB3	; 179
     176:	b2 07       	cpc	r27, r18
     178:	e1 f7       	brne	.-8      	; 0x172 <.do_clear_bss_loop>
     17a:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <main>
     17e:	0c 94 ed 0c 	jmp	0x19da	; 0x19da <_exit>

00000182 <__bad_interrupt>:
     182:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000186 <__vector_13>:

#define accept_button_press (button_debounce_counter >= button_debounce_delay)

// ADC and SPI sampling interrupt handler, fires at 2ms, 12ms, 22ms, etc
// Use this interrupt for anything you need to do before the main interrupt, i.e. sample things
ISR(TIMER1_COMPB_vect) {
     186:	1f 92       	push	r1
     188:	0f 92       	push	r0
     18a:	0f b6       	in	r0, 0x3f	; 63
     18c:	0f 92       	push	r0
     18e:	11 24       	eor	r1, r1
     190:	2f 93       	push	r18
     192:	3f 93       	push	r19
     194:	4f 93       	push	r20
     196:	5f 93       	push	r21
     198:	6f 93       	push	r22
     19a:	7f 93       	push	r23
     19c:	8f 93       	push	r24
     19e:	9f 93       	push	r25
     1a0:	af 93       	push	r26
     1a2:	bf 93       	push	r27
     1a4:	ef 93       	push	r30
     1a6:	ff 93       	push	r31
	// update button states
	prev_HVE_btn_state = HVE_btn_state;
     1a8:	80 91 2f 01 	lds	r24, 0x012F
     1ac:	80 93 2e 01 	sts	0x012E, r24
	prev_RTD_btn_state = RTD_btn_state;
     1b0:	80 91 2d 01 	lds	r24, 0x012D
     1b4:	80 93 2c 01 	sts	0x012C, r24
	prev_reset_btn_state = reset_btn_state;
     1b8:	80 91 2b 01 	lds	r24, 0x012B
     1bc:	80 93 2a 01 	sts	0x012A, r24
	prev_DAQ_btn_state = DAQ_btn_state;
     1c0:	80 91 29 01 	lds	r24, 0x0129
     1c4:	80 93 28 01 	sts	0x0128, r24
	
	HVE_btn_state = HVE_btn_pressed();
     1c8:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <HVE_btn_pressed>
     1cc:	80 93 2f 01 	sts	0x012F, r24
	RTD_btn_state = RTD_btn_pressed();
     1d0:	0e 94 f5 02 	call	0x5ea	; 0x5ea <RTD_btn_pressed>
     1d4:	80 93 2d 01 	sts	0x012D, r24
	reset_btn_state = reset_btn_pressed();
     1d8:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <reset_btn_pressed>
     1dc:	80 93 2b 01 	sts	0x012B, r24
	DAQ_btn_state = DAQ_btn_pressed();
     1e0:	0e 94 fd 02 	call	0x5fa	; 0x5fa <DAQ_btn_pressed>
     1e4:	80 93 29 01 	sts	0x0129, r24
		case ERROR:
		// Error state
		// 15e_todo: Fill in code for ERROR here
		break;
	}
}
     1e8:	ff 91       	pop	r31
     1ea:	ef 91       	pop	r30
     1ec:	bf 91       	pop	r27
     1ee:	af 91       	pop	r26
     1f0:	9f 91       	pop	r25
     1f2:	8f 91       	pop	r24
     1f4:	7f 91       	pop	r23
     1f6:	6f 91       	pop	r22
     1f8:	5f 91       	pop	r21
     1fa:	4f 91       	pop	r20
     1fc:	3f 91       	pop	r19
     1fe:	2f 91       	pop	r18
     200:	0f 90       	pop	r0
     202:	0f be       	out	0x3f, r0	; 63
     204:	0f 90       	pop	r0
     206:	1f 90       	pop	r1
     208:	18 95       	reti

0000020a <__vector_12>:

// Main 100Hz interrupt handler, fires at 10ms, 20ms, 30ms, etc
// Use this interrupt for any main things you need to do at 100Hz
ISR(TIMER1_COMPA_vect) { 
     20a:	1f 92       	push	r1
     20c:	0f 92       	push	r0
     20e:	0f b6       	in	r0, 0x3f	; 63
     210:	0f 92       	push	r0
     212:	11 24       	eor	r1, r1
     214:	2f 93       	push	r18
     216:	3f 93       	push	r19
     218:	4f 93       	push	r20
     21a:	5f 93       	push	r21
     21c:	6f 93       	push	r22
     21e:	7f 93       	push	r23
     220:	8f 93       	push	r24
     222:	9f 93       	push	r25
     224:	af 93       	push	r26
     226:	bf 93       	push	r27
     228:	ef 93       	push	r30
     22a:	ff 93       	push	r31
	
	// Reset the watchdog timer
	//wdt_reset();
	
	// Reset counter
	TCNT1 = 0x0000;
     22c:	10 92 85 00 	sts	0x0085, r1
     230:	10 92 84 00 	sts	0x0084, r1

		
	// count the time since the last button was released
	if (button_debounce_counter < button_debounce_delay && !HVE_btn_state && !RTD_btn_state && !reset_btn_state && !DAQ_btn_state) {
     234:	80 91 22 01 	lds	r24, 0x0122
     238:	90 91 23 01 	lds	r25, 0x0123
     23c:	82 33       	cpi	r24, 0x32	; 50
     23e:	91 05       	cpc	r25, r1
     240:	a8 f4       	brcc	.+42     	; 0x26c <__vector_12+0x62>
     242:	20 91 2f 01 	lds	r18, 0x012F
     246:	21 11       	cpse	r18, r1
     248:	11 c0       	rjmp	.+34     	; 0x26c <__vector_12+0x62>
     24a:	20 91 2d 01 	lds	r18, 0x012D
     24e:	21 11       	cpse	r18, r1
     250:	0d c0       	rjmp	.+26     	; 0x26c <__vector_12+0x62>
     252:	20 91 2b 01 	lds	r18, 0x012B
     256:	21 11       	cpse	r18, r1
     258:	09 c0       	rjmp	.+18     	; 0x26c <__vector_12+0x62>
     25a:	20 91 29 01 	lds	r18, 0x0129
     25e:	21 11       	cpse	r18, r1
     260:	05 c0       	rjmp	.+10     	; 0x26c <__vector_12+0x62>
		button_debounce_counter++;
     262:	01 96       	adiw	r24, 0x01	; 1
     264:	90 93 23 01 	sts	0x0123, r25
     268:	80 93 22 01 	sts	0x0122, r24
	}
	
	send_HVE_btn = 0;
     26c:	10 92 21 01 	sts	0x0121, r1
	send_RTD_btn = 0;
     270:	10 92 20 01 	sts	0x0120, r1
	send_reset_btn = 0;
     274:	10 92 1f 01 	sts	0x011F, r1
	
	// Check buttons and transmit if any are newly pressed
	if (HVE_btn_state && !prev_HVE_btn_state && accept_button_press) {
     278:	80 91 2f 01 	lds	r24, 0x012F
     27c:	88 23       	and	r24, r24
     27e:	89 f0       	breq	.+34     	; 0x2a2 <__vector_12+0x98>
     280:	80 91 2e 01 	lds	r24, 0x012E
     284:	81 11       	cpse	r24, r1
     286:	0d c0       	rjmp	.+26     	; 0x2a2 <__vector_12+0x98>
     288:	80 91 22 01 	lds	r24, 0x0122
     28c:	90 91 23 01 	lds	r25, 0x0123
     290:	c2 97       	sbiw	r24, 0x32	; 50
     292:	38 f0       	brcs	.+14     	; 0x2a2 <__vector_12+0x98>
		// HVE button was pushed
		button_debounce_counter = 0;
     294:	10 92 23 01 	sts	0x0123, r1
     298:	10 92 22 01 	sts	0x0122, r1
		send_HVE_btn = 1;
     29c:	81 e0       	ldi	r24, 0x01	; 1
     29e:	80 93 21 01 	sts	0x0121, r24
	}
	if (RTD_btn_state && !prev_RTD_btn_state && accept_button_press) {
     2a2:	80 91 2d 01 	lds	r24, 0x012D
     2a6:	88 23       	and	r24, r24
     2a8:	89 f0       	breq	.+34     	; 0x2cc <__vector_12+0xc2>
     2aa:	80 91 2c 01 	lds	r24, 0x012C
     2ae:	81 11       	cpse	r24, r1
     2b0:	0d c0       	rjmp	.+26     	; 0x2cc <__vector_12+0xc2>
     2b2:	80 91 22 01 	lds	r24, 0x0122
     2b6:	90 91 23 01 	lds	r25, 0x0123
     2ba:	c2 97       	sbiw	r24, 0x32	; 50
     2bc:	38 f0       	brcs	.+14     	; 0x2cc <__vector_12+0xc2>
		// RTD button was pushed
		button_debounce_counter = 0;
     2be:	10 92 23 01 	sts	0x0123, r1
     2c2:	10 92 22 01 	sts	0x0122, r1
		send_RTD_btn = 1;
     2c6:	81 e0       	ldi	r24, 0x01	; 1
     2c8:	80 93 20 01 	sts	0x0120, r24
	}
	if (reset_btn_state && !prev_reset_btn_state && accept_button_press) {
     2cc:	80 91 2b 01 	lds	r24, 0x012B
     2d0:	88 23       	and	r24, r24
     2d2:	89 f0       	breq	.+34     	; 0x2f6 <__vector_12+0xec>
     2d4:	80 91 2a 01 	lds	r24, 0x012A
     2d8:	81 11       	cpse	r24, r1
     2da:	0d c0       	rjmp	.+26     	; 0x2f6 <__vector_12+0xec>
     2dc:	80 91 22 01 	lds	r24, 0x0122
     2e0:	90 91 23 01 	lds	r25, 0x0123
     2e4:	c2 97       	sbiw	r24, 0x32	; 50
     2e6:	38 f0       	brcs	.+14     	; 0x2f6 <__vector_12+0xec>
		// reset button was pushed
		button_debounce_counter = 0;
     2e8:	10 92 23 01 	sts	0x0123, r1
     2ec:	10 92 22 01 	sts	0x0122, r1
		send_reset_btn = 1;
     2f0:	81 e0       	ldi	r24, 0x01	; 1
     2f2:	80 93 1f 01 	sts	0x011F, r24
	}
	if (DAQ_btn_state && !prev_DAQ_btn_state && accept_button_press) {
     2f6:	80 91 29 01 	lds	r24, 0x0129
     2fa:	88 23       	and	r24, r24
     2fc:	b9 f0       	breq	.+46     	; 0x32c <__vector_12+0x122>
     2fe:	80 91 28 01 	lds	r24, 0x0128
     302:	81 11       	cpse	r24, r1
     304:	26 c0       	rjmp	.+76     	; 0x352 <__vector_12+0x148>
     306:	80 91 22 01 	lds	r24, 0x0122
     30a:	90 91 23 01 	lds	r25, 0x0123
     30e:	c2 97       	sbiw	r24, 0x32	; 50
     310:	00 f1       	brcs	.+64     	; 0x352 <__vector_12+0x148>
		// DAQ button was pushed (latches in)
		button_debounce_counter = 0;
     312:	10 92 23 01 	sts	0x0123, r1
     316:	10 92 22 01 	sts	0x0122, r1
		send_daq_btn = 1;
     31a:	81 e0       	ldi	r24, 0x01	; 1
     31c:	80 93 1e 01 	sts	0x011E, r24
		DAQ_btn_illum(1);
     320:	0e 94 74 03 	call	0x6e8	; 0x6e8 <DAQ_btn_illum>
	}
	if (!DAQ_btn_state && prev_DAQ_btn_state && accept_button_press) {
     324:	80 91 29 01 	lds	r24, 0x0129
     328:	81 11       	cpse	r24, r1
     32a:	13 c0       	rjmp	.+38     	; 0x352 <__vector_12+0x148>
     32c:	80 91 28 01 	lds	r24, 0x0128
     330:	88 23       	and	r24, r24
     332:	79 f0       	breq	.+30     	; 0x352 <__vector_12+0x148>
     334:	80 91 22 01 	lds	r24, 0x0122
     338:	90 91 23 01 	lds	r25, 0x0123
     33c:	c2 97       	sbiw	r24, 0x32	; 50
     33e:	48 f0       	brcs	.+18     	; 0x352 <__vector_12+0x148>
		// DAQ button was released
		button_debounce_counter = 0;
     340:	10 92 23 01 	sts	0x0123, r1
     344:	10 92 22 01 	sts	0x0122, r1
		send_daq_btn = 0;
     348:	10 92 1e 01 	sts	0x011E, r1
		DAQ_btn_illum(0);
     34c:	80 e0       	ldi	r24, 0x00	; 0
     34e:	0e 94 74 03 	call	0x6e8	; 0x6e8 <DAQ_btn_illum>
	}
	
	// Switch on the current state
	switch(state) {
     352:	80 91 30 01 	lds	r24, 0x0130
     356:	81 30       	cpi	r24, 0x01	; 1
     358:	d9 f1       	breq	.+118    	; 0x3d0 <__vector_12+0x1c6>
     35a:	38 f0       	brcs	.+14     	; 0x36a <__vector_12+0x160>
     35c:	82 30       	cpi	r24, 0x02	; 2
     35e:	09 f4       	brne	.+2      	; 0x362 <__vector_12+0x158>
     360:	6a c0       	rjmp	.+212    	; 0x436 <__vector_12+0x22c>
     362:	83 30       	cpi	r24, 0x03	; 3
     364:	09 f4       	brne	.+2      	; 0x368 <__vector_12+0x15e>
     366:	aa c0       	rjmp	.+340    	; 0x4bc <__vector_12+0x2b2>
     368:	db c0       	rjmp	.+438    	; 0x520 <__vector_12+0x316>
		case GLV_ON:
			// Grounded low-voltage on
			HVE_btn_illum(0);
     36a:	80 e0       	ldi	r24, 0x00	; 0
     36c:	0e 94 14 03 	call	0x628	; 0x628 <HVE_btn_illum>
			RTD_btn_illum(0);
     370:	80 e0       	ldi	r24, 0x00	; 0
     372:	0e 94 34 03 	call	0x668	; 0x668 <RTD_btn_illum>
			reset_btn_illum(1);
     376:	81 e0       	ldi	r24, 0x01	; 1
     378:	0e 94 54 03 	call	0x6a8	; 0x6a8 <reset_btn_illum>
			ERROR_LED(0);
     37c:	80 e0       	ldi	r24, 0x00	; 0
     37e:	0e 94 94 03 	call	0x728	; 0x728 <ERROR_LED>
			RTD_buzzer(0);
     382:	80 e0       	ldi	r24, 0x00	; 0
     384:	0e 94 02 03 	call	0x604	; 0x604 <RTD_buzzer>
			RTD_state_counter = 0;
     388:	10 92 27 01 	sts	0x0127, r1
     38c:	10 92 26 01 	sts	0x0126, r1
			// display state on display
			if (disp_counter >= display_update_duration) {
     390:	80 91 24 01 	lds	r24, 0x0124
     394:	90 91 25 01 	lds	r25, 0x0125
     398:	84 31       	cpi	r24, 0x14	; 20
     39a:	91 05       	cpc	r25, r1
     39c:	98 f0       	brcs	.+38     	; 0x3c4 <__vector_12+0x1ba>
				display_str(1,"GLV",0b011,0b0000);
     39e:	20 e0       	ldi	r18, 0x00	; 0
     3a0:	43 e0       	ldi	r20, 0x03	; 3
     3a2:	66 e0       	ldi	r22, 0x06	; 6
     3a4:	71 e0       	ldi	r23, 0x01	; 1
     3a6:	81 e0       	ldi	r24, 0x01	; 1
     3a8:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <display_str>
				display_str(3,"on",0b011,0b0000);
     3ac:	20 e0       	ldi	r18, 0x00	; 0
     3ae:	43 e0       	ldi	r20, 0x03	; 3
     3b0:	6a e0       	ldi	r22, 0x0A	; 10
     3b2:	71 e0       	ldi	r23, 0x01	; 1
     3b4:	83 e0       	ldi	r24, 0x03	; 3
     3b6:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <display_str>
				disp_counter = 0;
     3ba:	10 92 25 01 	sts	0x0125, r1
     3be:	10 92 24 01 	sts	0x0124, r1
     3c2:	ae c0       	rjmp	.+348    	; 0x520 <__vector_12+0x316>
			} else {
				disp_counter++;
     3c4:	01 96       	adiw	r24, 0x01	; 1
     3c6:	90 93 25 01 	sts	0x0125, r25
     3ca:	80 93 24 01 	sts	0x0124, r24
     3ce:	a8 c0       	rjmp	.+336    	; 0x520 <__vector_12+0x316>
			}
			break;
			
		case HV_EN:
			// High-voltage enable
			HVE_btn_illum(1);
     3d0:	81 e0       	ldi	r24, 0x01	; 1
     3d2:	0e 94 14 03 	call	0x628	; 0x628 <HVE_btn_illum>
			RTD_btn_illum(0);
     3d6:	80 e0       	ldi	r24, 0x00	; 0
     3d8:	0e 94 34 03 	call	0x668	; 0x668 <RTD_btn_illum>
			reset_btn_illum(1);
     3dc:	81 e0       	ldi	r24, 0x01	; 1
     3de:	0e 94 54 03 	call	0x6a8	; 0x6a8 <reset_btn_illum>
			ERROR_LED(0);
     3e2:	80 e0       	ldi	r24, 0x00	; 0
     3e4:	0e 94 94 03 	call	0x728	; 0x728 <ERROR_LED>
			RTD_buzzer(0);
     3e8:	80 e0       	ldi	r24, 0x00	; 0
     3ea:	0e 94 02 03 	call	0x604	; 0x604 <RTD_buzzer>
			RTD_state_counter = 0;
     3ee:	10 92 27 01 	sts	0x0127, r1
     3f2:	10 92 26 01 	sts	0x0126, r1
			// display state on display
			if (disp_counter >= display_update_duration) {
     3f6:	80 91 24 01 	lds	r24, 0x0124
     3fa:	90 91 25 01 	lds	r25, 0x0125
     3fe:	84 31       	cpi	r24, 0x14	; 20
     400:	91 05       	cpc	r25, r1
     402:	98 f0       	brcs	.+38     	; 0x42a <__vector_12+0x220>
				display_str(1,"HV",0b110,0b0000);
     404:	20 e0       	ldi	r18, 0x00	; 0
     406:	46 e0       	ldi	r20, 0x06	; 6
     408:	6d e0       	ldi	r22, 0x0D	; 13
     40a:	71 e0       	ldi	r23, 0x01	; 1
     40c:	81 e0       	ldi	r24, 0x01	; 1
     40e:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <display_str>
				display_str(3,"on",0b110,0b0000);
     412:	20 e0       	ldi	r18, 0x00	; 0
     414:	46 e0       	ldi	r20, 0x06	; 6
     416:	6a e0       	ldi	r22, 0x0A	; 10
     418:	71 e0       	ldi	r23, 0x01	; 1
     41a:	83 e0       	ldi	r24, 0x03	; 3
     41c:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <display_str>
				disp_counter = 0;
     420:	10 92 25 01 	sts	0x0125, r1
     424:	10 92 24 01 	sts	0x0124, r1
     428:	7b c0       	rjmp	.+246    	; 0x520 <__vector_12+0x316>
			} else {
				disp_counter++;
     42a:	01 96       	adiw	r24, 0x01	; 1
     42c:	90 93 25 01 	sts	0x0125, r25
     430:	80 93 24 01 	sts	0x0124, r24
     434:	75 c0       	rjmp	.+234    	; 0x520 <__vector_12+0x316>
			}
			break;
			
		case RTD:
			// Ready to drive
			HVE_btn_illum(1);
     436:	81 e0       	ldi	r24, 0x01	; 1
     438:	0e 94 14 03 	call	0x628	; 0x628 <HVE_btn_illum>
			RTD_btn_illum(1);
     43c:	81 e0       	ldi	r24, 0x01	; 1
     43e:	0e 94 34 03 	call	0x668	; 0x668 <RTD_btn_illum>
			reset_btn_illum(1);
     442:	81 e0       	ldi	r24, 0x01	; 1
     444:	0e 94 54 03 	call	0x6a8	; 0x6a8 <reset_btn_illum>
			ERROR_LED(0);
     448:	80 e0       	ldi	r24, 0x00	; 0
     44a:	0e 94 94 03 	call	0x728	; 0x728 <ERROR_LED>
			if (RTD_state_counter < RTD_buzzer_duration) {
     44e:	80 91 26 01 	lds	r24, 0x0126
     452:	90 91 27 01 	lds	r25, 0x0127
     456:	8c 32       	cpi	r24, 0x2C	; 44
     458:	91 40       	sbci	r25, 0x01	; 1
     45a:	68 f4       	brcc	.+26     	; 0x476 <__vector_12+0x26c>
				RTD_buzzer(1);
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	0e 94 02 03 	call	0x604	; 0x604 <RTD_buzzer>
				RTD_state_counter++;
     462:	80 91 26 01 	lds	r24, 0x0126
     466:	90 91 27 01 	lds	r25, 0x0127
     46a:	01 96       	adiw	r24, 0x01	; 1
     46c:	90 93 27 01 	sts	0x0127, r25
     470:	80 93 26 01 	sts	0x0126, r24
     474:	03 c0       	rjmp	.+6      	; 0x47c <__vector_12+0x272>
			} else {
				RTD_buzzer(0);
     476:	80 e0       	ldi	r24, 0x00	; 0
     478:	0e 94 02 03 	call	0x604	; 0x604 <RTD_buzzer>
			}
			// display state on display
			if (disp_counter >= display_update_duration) {
     47c:	80 91 24 01 	lds	r24, 0x0124
     480:	90 91 25 01 	lds	r25, 0x0125
     484:	84 31       	cpi	r24, 0x14	; 20
     486:	91 05       	cpc	r25, r1
     488:	98 f0       	brcs	.+38     	; 0x4b0 <__vector_12+0x2a6>
				display_str(1,"rEA",0b010,0b0000);
     48a:	20 e0       	ldi	r18, 0x00	; 0
     48c:	42 e0       	ldi	r20, 0x02	; 2
     48e:	60 e1       	ldi	r22, 0x10	; 16
     490:	71 e0       	ldi	r23, 0x01	; 1
     492:	81 e0       	ldi	r24, 0x01	; 1
     494:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <display_str>
				display_str(3,"dy",0b010,0b0000);
     498:	20 e0       	ldi	r18, 0x00	; 0
     49a:	42 e0       	ldi	r20, 0x02	; 2
     49c:	64 e1       	ldi	r22, 0x14	; 20
     49e:	71 e0       	ldi	r23, 0x01	; 1
     4a0:	83 e0       	ldi	r24, 0x03	; 3
     4a2:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <display_str>
				disp_counter = 0;
     4a6:	10 92 25 01 	sts	0x0125, r1
     4aa:	10 92 24 01 	sts	0x0124, r1
     4ae:	38 c0       	rjmp	.+112    	; 0x520 <__vector_12+0x316>
			} else {
				disp_counter++;
     4b0:	01 96       	adiw	r24, 0x01	; 1
     4b2:	90 93 25 01 	sts	0x0125, r25
     4b6:	80 93 24 01 	sts	0x0124, r24
     4ba:	32 c0       	rjmp	.+100    	; 0x520 <__vector_12+0x316>
			}
			break;
			
		case ERROR:
			// Error state
			HVE_btn_illum(0);
     4bc:	80 e0       	ldi	r24, 0x00	; 0
     4be:	0e 94 14 03 	call	0x628	; 0x628 <HVE_btn_illum>
			RTD_btn_illum(0);
     4c2:	80 e0       	ldi	r24, 0x00	; 0
     4c4:	0e 94 34 03 	call	0x668	; 0x668 <RTD_btn_illum>
			reset_btn_illum(0);
     4c8:	80 e0       	ldi	r24, 0x00	; 0
     4ca:	0e 94 54 03 	call	0x6a8	; 0x6a8 <reset_btn_illum>
			ERROR_LED(1);
     4ce:	81 e0       	ldi	r24, 0x01	; 1
     4d0:	0e 94 94 03 	call	0x728	; 0x728 <ERROR_LED>
			RTD_buzzer(0);
     4d4:	80 e0       	ldi	r24, 0x00	; 0
     4d6:	0e 94 02 03 	call	0x604	; 0x604 <RTD_buzzer>
			RTD_state_counter = 0;
     4da:	10 92 27 01 	sts	0x0127, r1
     4de:	10 92 26 01 	sts	0x0126, r1
			// display state on display
			if (disp_counter >= display_update_duration) {
     4e2:	80 91 24 01 	lds	r24, 0x0124
     4e6:	90 91 25 01 	lds	r25, 0x0125
     4ea:	84 31       	cpi	r24, 0x14	; 20
     4ec:	91 05       	cpc	r25, r1
     4ee:	98 f0       	brcs	.+38     	; 0x516 <__vector_12+0x30c>
				display_str(1,"Err",0b100,0b1111);
     4f0:	2f e0       	ldi	r18, 0x0F	; 15
     4f2:	44 e0       	ldi	r20, 0x04	; 4
     4f4:	67 e1       	ldi	r22, 0x17	; 23
     4f6:	71 e0       	ldi	r23, 0x01	; 1
     4f8:	81 e0       	ldi	r24, 0x01	; 1
     4fa:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <display_str>
				display_str(3,"or",0b100,0b1111);
     4fe:	2f e0       	ldi	r18, 0x0F	; 15
     500:	44 e0       	ldi	r20, 0x04	; 4
     502:	6b e1       	ldi	r22, 0x1B	; 27
     504:	71 e0       	ldi	r23, 0x01	; 1
     506:	83 e0       	ldi	r24, 0x03	; 3
     508:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <display_str>
				disp_counter = 0;
     50c:	10 92 25 01 	sts	0x0125, r1
     510:	10 92 24 01 	sts	0x0124, r1
     514:	05 c0       	rjmp	.+10     	; 0x520 <__vector_12+0x316>
			} else {
				disp_counter++;
     516:	01 96       	adiw	r24, 0x01	; 1
     518:	90 93 25 01 	sts	0x0125, r25
     51c:	80 93 24 01 	sts	0x0124, r24
	}
	
	/* Check mailboxes for Main Board Heartbeat message
	 *	and transition states if necessary
	 */
	if(can_get_status(&rcv_cmd_st[0]) != CAN_STATUS_NOT_COMPLETED) {
     520:	87 e7       	ldi	r24, 0x77	; 119
     522:	91 e0       	ldi	r25, 0x01	; 1
     524:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <can_get_status>
     528:	81 30       	cpi	r24, 0x01	; 1
     52a:	51 f0       	breq	.+20     	; 0x540 <__vector_12+0x336>
		// There is, update the state
		state = ((struct main_heartbeat_st *)(&can_rcv_buffer[0]))->state;
     52c:	80 91 41 01 	lds	r24, 0x0141
     530:	80 93 30 01 	sts	0x0130, r24
		/* Setup mailbox to receive Main board state again
		 *		Necessary since the mailbox is cleared after a message is received
		 */
		while(can_cmd(&rcv_cmd_st[0]) != CAN_CMD_ACCEPTED);
     534:	87 e7       	ldi	r24, 0x77	; 119
     536:	91 e0       	ldi	r25, 0x01	; 1
     538:	0e 94 50 06 	call	0xca0	; 0xca0 <can_cmd>
     53c:	81 11       	cpse	r24, r1
     53e:	fa cf       	rjmp	.-12     	; 0x534 <__vector_12+0x32a>
	//}
	
	// Transmit heartbeat
	// Fill in heartbeat data, current state
	// Pack FSN heartbeat struct
	dash_heartbeat.state = state;
     540:	80 91 30 01 	lds	r24, 0x0130
     544:	80 93 75 01 	sts	0x0175, r24
	dash_heartbeat.hv_en = send_HVE_btn;
     548:	e6 e7       	ldi	r30, 0x76	; 118
     54a:	f1 e0       	ldi	r31, 0x01	; 1
     54c:	80 81       	ld	r24, Z
     54e:	90 91 21 01 	lds	r25, 0x0121
     552:	90 fb       	bst	r25, 0
     554:	80 f9       	bld	r24, 0
	dash_heartbeat.rtd = send_RTD_btn;
     556:	90 91 20 01 	lds	r25, 0x0120
     55a:	90 fb       	bst	r25, 0
     55c:	82 f9       	bld	r24, 2
	dash_heartbeat.clr_err = send_reset_btn;
     55e:	90 91 1f 01 	lds	r25, 0x011F
     562:	90 fb       	bst	r25, 0
     564:	81 f9       	bld	r24, 1
	dash_heartbeat.daq_en = send_daq_btn;
     566:	90 91 1e 01 	lds	r25, 0x011E
     56a:	90 fb       	bst	r25, 0
     56c:	83 f9       	bld	r24, 3
     56e:	80 83       	st	Z, r24
	
	// Transmit over CAN
	can_tx_sync(DASH_HEARTBEAT_ID, (uint8_t *)(&dash_heartbeat), sizeof(dash_heartbeat));
     570:	42 e0       	ldi	r20, 0x02	; 2
     572:	65 e7       	ldi	r22, 0x75	; 117
     574:	71 e0       	ldi	r23, 0x01	; 1
     576:	85 e0       	ldi	r24, 0x05	; 5
     578:	92 e0       	ldi	r25, 0x02	; 2
     57a:	0e 94 27 0c 	call	0x184e	; 0x184e <can_tx_sync>
	
}
     57e:	ff 91       	pop	r31
     580:	ef 91       	pop	r30
     582:	bf 91       	pop	r27
     584:	af 91       	pop	r26
     586:	9f 91       	pop	r25
     588:	8f 91       	pop	r24
     58a:	7f 91       	pop	r23
     58c:	6f 91       	pop	r22
     58e:	5f 91       	pop	r21
     590:	4f 91       	pop	r20
     592:	3f 91       	pop	r19
     594:	2f 91       	pop	r18
     596:	0f 90       	pop	r0
     598:	0f be       	out	0x3f, r0	; 63
     59a:	0f 90       	pop	r0
     59c:	1f 90       	pop	r1
     59e:	18 95       	reti

000005a0 <main>:
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	80 e8       	ldi	r24, 0x80	; 128
     5a4:	0f b6       	in	r0, 0x3f	; 63
     5a6:	f8 94       	cli
     5a8:	80 93 61 00 	sts	0x0061, r24
     5ac:	90 93 61 00 	sts	0x0061, r25
     5b0:	0f be       	out	0x3f, r0	; 63
{
	// Set the clock prescaler to be 1 (full clock rate)
	clock_prescale_set(clock_div_1);
	
	// Initialize all board I/O
	init_io();
     5b2:	0e 94 d4 05 	call	0xba8	; 0xba8 <init_io>
	
	// Initialize CAN, fixed baudrate defined in config.h (passing 0 does autobaud)
	can_init(1);	// Fixed baud rate
     5b6:	81 e0       	ldi	r24, 0x01	; 1
     5b8:	0e 94 41 06 	call	0xc82	; 0xc82 <can_init>
	
	// Initialize state mailbox
	init_can_mailboxes();
     5bc:	0e 94 01 06 	call	0xc02	; 0xc02 <init_can_mailboxes>
	
	init_adc();
     5c0:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <init_adc>
	
	// Initialize watchdog timer
	//init_watchdog();
	
	// Initialize main timer output compare interrupt (100Hz) and enable interrupts
	init_interrupts();
     5c4:	0e 94 b5 05 	call	0xb6a	; 0xb6a <init_interrupts>
     5c8:	ff cf       	rjmp	.-2      	; 0x5c8 <main+0x28>

000005ca <set_DDRs>:
uint8_t button_illum_states = 0b00000000;

void set_DDRs() {
	/* data direction registers (input or output)
	 * these are specific to the dashboard PCB     */
	DDRB = 0b10111010;
     5ca:	8a eb       	ldi	r24, 0xBA	; 186
     5cc:	84 b9       	out	0x04, r24	; 4
	DDRC = 0b01001010;
     5ce:	8a e4       	ldi	r24, 0x4A	; 74
     5d0:	87 b9       	out	0x07, r24	; 7
	DDRD = 0b00011000;
     5d2:	88 e1       	ldi	r24, 0x18	; 24
     5d4:	8a b9       	out	0x0a, r24	; 10
	
	/* turn off all pull-ups */	
	PORTB = 0x00;
     5d6:	15 b8       	out	0x05, r1	; 5
	PORTC = 0x00;
     5d8:	18 b8       	out	0x08, r1	; 8
	PORTD = 0x00;
     5da:	1b b8       	out	0x0b, r1	; 11
	
	/* turn on pull-ups where needed */
	sbi(PORTD,PORTD3); // SS pin - this is important! if this is left floating, chip randomly freezes in slave SPI mode. ick.
     5dc:	5b 9a       	sbi	0x0b, 3	; 11
	sbi(PORTD,PORTD4); // SCK pin
     5de:	5c 9a       	sbi	0x0b, 4	; 11
     5e0:	08 95       	ret

000005e2 <HVE_btn_pressed>:
}

uint8_t HVE_btn_pressed() {
	return is_high(PIND, PIND1);
     5e2:	89 b1       	in	r24, 0x09	; 9
}
     5e4:	86 95       	lsr	r24
     5e6:	81 70       	andi	r24, 0x01	; 1
     5e8:	08 95       	ret

000005ea <RTD_btn_pressed>:

uint8_t RTD_btn_pressed() {
	return is_high(PINC, PINC0);
     5ea:	86 b1       	in	r24, 0x06	; 6
}
     5ec:	81 70       	andi	r24, 0x01	; 1
     5ee:	08 95       	ret

000005f0 <reset_btn_pressed>:

uint8_t reset_btn_pressed() {
	return is_high(PINC, PINC5);
     5f0:	86 b1       	in	r24, 0x06	; 6
}
     5f2:	85 fb       	bst	r24, 5
     5f4:	88 27       	eor	r24, r24
     5f6:	80 f9       	bld	r24, 0
     5f8:	08 95       	ret

000005fa <DAQ_btn_pressed>:

uint8_t DAQ_btn_pressed() {
	return is_high(PIND, PIND7);
     5fa:	89 b1       	in	r24, 0x09	; 9
}
     5fc:	88 1f       	adc	r24, r24
     5fe:	88 27       	eor	r24, r24
     600:	88 1f       	adc	r24, r24
     602:	08 95       	ret

00000604 <RTD_buzzer>:
uint8_t right_disp_btn_pressed() {
	return is_high(PIND, PIND0);
}

void RTD_buzzer(uint8_t state) {
	if (state) {
     604:	88 23       	and	r24, r24
     606:	11 f0       	breq	.+4      	; 0x60c <RTD_buzzer+0x8>
		sbi(PORTC, PORTC1);
     608:	41 9a       	sbi	0x08, 1	; 8
     60a:	08 95       	ret
	} else {
		cbi(PORTC, PORTC1);
     60c:	41 98       	cbi	0x08, 1	; 8
     60e:	08 95       	ret

00000610 <SPI_select_indicators>:
	}
}

void SPI_select_indicators(uint8_t state) {
	if (state) {
     610:	88 23       	and	r24, r24
     612:	41 f0       	breq	.+16     	; 0x624 <SPI_select_indicators+0x14>
		cbi(PORTB, PORTB5);	 // left off
     614:	2d 98       	cbi	0x05, 5	; 5
		cbi(PORTB, PORTB4);  // center off
     616:	2c 98       	cbi	0x05, 4	; 5
		cbi(PORTB, PORTB3);  // right off
     618:	2b 98       	cbi	0x05, 3	; 5
		sbi(PORTC, PORTC6);  // indicators on
     61a:	46 9a       	sbi	0x08, 6	; 8
		spi_send(0);
     61c:	80 e0       	ldi	r24, 0x00	; 0
     61e:	0e 94 3b 06 	call	0xc76	; 0xc76 <spi_send>
     622:	08 95       	ret
	} else {
		cbi(PORTC, PORTC6);  // indicators off
     624:	46 98       	cbi	0x08, 6	; 8
     626:	08 95       	ret

00000628 <HVE_btn_illum>:
}

// button_illum_states: 0b10000000 = HVE button, 0b01000000 = RTD button, 0b00100000 = reset button, 0b00010000 = DAQ button

void HVE_btn_illum(uint8_t state) {
	uint8_t prev_button_illum_states = button_illum_states;
     628:	90 91 31 01 	lds	r25, 0x0131
	if (state) {
     62c:	88 23       	and	r24, r24
     62e:	29 f0       	breq	.+10     	; 0x63a <HVE_btn_illum+0x12>
		sbi(button_illum_states, 7);
     630:	89 2f       	mov	r24, r25
     632:	80 68       	ori	r24, 0x80	; 128
     634:	80 93 31 01 	sts	0x0131, r24
     638:	04 c0       	rjmp	.+8      	; 0x642 <HVE_btn_illum+0x1a>
	} else {
		cbi(button_illum_states, 7);
     63a:	89 2f       	mov	r24, r25
     63c:	8f 77       	andi	r24, 0x7F	; 127
     63e:	80 93 31 01 	sts	0x0131, r24
	}
	if (prev_button_illum_states != button_illum_states) {
     642:	80 91 31 01 	lds	r24, 0x0131
     646:	98 17       	cp	r25, r24
     648:	71 f0       	breq	.+28     	; 0x666 <HVE_btn_illum+0x3e>
		SPI_select_indicators(1);
     64a:	81 e0       	ldi	r24, 0x01	; 1
     64c:	0e 94 08 03 	call	0x610	; 0x610 <SPI_select_indicators>
		spi_send(button_illum_states);
     650:	80 91 31 01 	lds	r24, 0x0131
     654:	0e 94 3b 06 	call	0xc76	; 0xc76 <spi_send>
		spi_send(warning_LED_states);
     658:	80 91 32 01 	lds	r24, 0x0132
     65c:	0e 94 3b 06 	call	0xc76	; 0xc76 <spi_send>
		SPI_select_indicators(0);
     660:	80 e0       	ldi	r24, 0x00	; 0
     662:	0e 94 08 03 	call	0x610	; 0x610 <SPI_select_indicators>
     666:	08 95       	ret

00000668 <RTD_btn_illum>:
	}
}

void RTD_btn_illum(uint8_t state) {
	uint8_t prev_button_illum_states = button_illum_states;
     668:	90 91 31 01 	lds	r25, 0x0131
	if (state) {
     66c:	88 23       	and	r24, r24
     66e:	29 f0       	breq	.+10     	; 0x67a <RTD_btn_illum+0x12>
		sbi(button_illum_states, 6);
     670:	89 2f       	mov	r24, r25
     672:	80 64       	ori	r24, 0x40	; 64
     674:	80 93 31 01 	sts	0x0131, r24
     678:	04 c0       	rjmp	.+8      	; 0x682 <RTD_btn_illum+0x1a>
	} else {
		cbi(button_illum_states, 6);
     67a:	89 2f       	mov	r24, r25
     67c:	8f 7b       	andi	r24, 0xBF	; 191
     67e:	80 93 31 01 	sts	0x0131, r24
	}
	if (prev_button_illum_states != button_illum_states) {
     682:	80 91 31 01 	lds	r24, 0x0131
     686:	98 17       	cp	r25, r24
     688:	71 f0       	breq	.+28     	; 0x6a6 <RTD_btn_illum+0x3e>
		SPI_select_indicators(1);
     68a:	81 e0       	ldi	r24, 0x01	; 1
     68c:	0e 94 08 03 	call	0x610	; 0x610 <SPI_select_indicators>
		spi_send(button_illum_states);
     690:	80 91 31 01 	lds	r24, 0x0131
     694:	0e 94 3b 06 	call	0xc76	; 0xc76 <spi_send>
		spi_send(warning_LED_states);
     698:	80 91 32 01 	lds	r24, 0x0132
     69c:	0e 94 3b 06 	call	0xc76	; 0xc76 <spi_send>
		SPI_select_indicators(0);
     6a0:	80 e0       	ldi	r24, 0x00	; 0
     6a2:	0e 94 08 03 	call	0x610	; 0x610 <SPI_select_indicators>
     6a6:	08 95       	ret

000006a8 <reset_btn_illum>:
	}
}

void reset_btn_illum(uint8_t state) {
	uint8_t prev_button_illum_states = button_illum_states;
     6a8:	90 91 31 01 	lds	r25, 0x0131
	if (state) {
     6ac:	88 23       	and	r24, r24
     6ae:	29 f0       	breq	.+10     	; 0x6ba <reset_btn_illum+0x12>
		sbi(button_illum_states, 5);
     6b0:	89 2f       	mov	r24, r25
     6b2:	80 62       	ori	r24, 0x20	; 32
     6b4:	80 93 31 01 	sts	0x0131, r24
     6b8:	04 c0       	rjmp	.+8      	; 0x6c2 <reset_btn_illum+0x1a>
	} else {
		cbi(button_illum_states, 5);
     6ba:	89 2f       	mov	r24, r25
     6bc:	8f 7d       	andi	r24, 0xDF	; 223
     6be:	80 93 31 01 	sts	0x0131, r24
	}
	if (prev_button_illum_states != button_illum_states) {
     6c2:	80 91 31 01 	lds	r24, 0x0131
     6c6:	98 17       	cp	r25, r24
     6c8:	71 f0       	breq	.+28     	; 0x6e6 <reset_btn_illum+0x3e>
		SPI_select_indicators(1);
     6ca:	81 e0       	ldi	r24, 0x01	; 1
     6cc:	0e 94 08 03 	call	0x610	; 0x610 <SPI_select_indicators>
		spi_send(button_illum_states);
     6d0:	80 91 31 01 	lds	r24, 0x0131
     6d4:	0e 94 3b 06 	call	0xc76	; 0xc76 <spi_send>
		spi_send(warning_LED_states);
     6d8:	80 91 32 01 	lds	r24, 0x0132
     6dc:	0e 94 3b 06 	call	0xc76	; 0xc76 <spi_send>
		SPI_select_indicators(0);
     6e0:	80 e0       	ldi	r24, 0x00	; 0
     6e2:	0e 94 08 03 	call	0x610	; 0x610 <SPI_select_indicators>
     6e6:	08 95       	ret

000006e8 <DAQ_btn_illum>:
	}
}

void DAQ_btn_illum(uint8_t state) {
	uint8_t prev_button_illum_states = button_illum_states;
     6e8:	90 91 31 01 	lds	r25, 0x0131
	if (state) {
     6ec:	88 23       	and	r24, r24
     6ee:	29 f0       	breq	.+10     	; 0x6fa <DAQ_btn_illum+0x12>
		sbi(button_illum_states, 4);
     6f0:	89 2f       	mov	r24, r25
     6f2:	80 61       	ori	r24, 0x10	; 16
     6f4:	80 93 31 01 	sts	0x0131, r24
     6f8:	04 c0       	rjmp	.+8      	; 0x702 <DAQ_btn_illum+0x1a>
	} else {
		cbi(button_illum_states, 4);
     6fa:	89 2f       	mov	r24, r25
     6fc:	8f 7e       	andi	r24, 0xEF	; 239
     6fe:	80 93 31 01 	sts	0x0131, r24
	}
	if (prev_button_illum_states != button_illum_states) {
     702:	80 91 31 01 	lds	r24, 0x0131
     706:	98 17       	cp	r25, r24
     708:	71 f0       	breq	.+28     	; 0x726 <DAQ_btn_illum+0x3e>
		SPI_select_indicators(1);
     70a:	81 e0       	ldi	r24, 0x01	; 1
     70c:	0e 94 08 03 	call	0x610	; 0x610 <SPI_select_indicators>
		spi_send(button_illum_states);
     710:	80 91 31 01 	lds	r24, 0x0131
     714:	0e 94 3b 06 	call	0xc76	; 0xc76 <spi_send>
		spi_send(warning_LED_states);
     718:	80 91 32 01 	lds	r24, 0x0132
     71c:	0e 94 3b 06 	call	0xc76	; 0xc76 <spi_send>
		SPI_select_indicators(0);
     720:	80 e0       	ldi	r24, 0x00	; 0
     722:	0e 94 08 03 	call	0x610	; 0x610 <SPI_select_indicators>
     726:	08 95       	ret

00000728 <ERROR_LED>:
		SPI_select_indicators(0);
	}
}

void ERROR_LED(uint8_t state) {
	uint8_t prev_warning_LED_states = warning_LED_states;
     728:	90 91 32 01 	lds	r25, 0x0132
	if (state) {
     72c:	88 23       	and	r24, r24
     72e:	29 f0       	breq	.+10     	; 0x73a <ERROR_LED+0x12>
		sbi(warning_LED_states, 2);
     730:	89 2f       	mov	r24, r25
     732:	84 60       	ori	r24, 0x04	; 4
     734:	80 93 32 01 	sts	0x0132, r24
     738:	04 c0       	rjmp	.+8      	; 0x742 <ERROR_LED+0x1a>
		} else {
		cbi(warning_LED_states, 2);
     73a:	89 2f       	mov	r24, r25
     73c:	8b 7f       	andi	r24, 0xFB	; 251
     73e:	80 93 32 01 	sts	0x0132, r24
	}
	if (prev_warning_LED_states != warning_LED_states) {
     742:	80 91 32 01 	lds	r24, 0x0132
     746:	98 17       	cp	r25, r24
     748:	71 f0       	breq	.+28     	; 0x766 <ERROR_LED+0x3e>
		SPI_select_indicators(1);
     74a:	81 e0       	ldi	r24, 0x01	; 1
     74c:	0e 94 08 03 	call	0x610	; 0x610 <SPI_select_indicators>
		spi_send(button_illum_states);
     750:	80 91 31 01 	lds	r24, 0x0131
     754:	0e 94 3b 06 	call	0xc76	; 0xc76 <spi_send>
		spi_send(warning_LED_states);
     758:	80 91 32 01 	lds	r24, 0x0132
     75c:	0e 94 3b 06 	call	0xc76	; 0xc76 <spi_send>
		SPI_select_indicators(0);
     760:	80 e0       	ldi	r24, 0x00	; 0
     762:	0e 94 08 03 	call	0x610	; 0x610 <SPI_select_indicators>
     766:	08 95       	ret

00000768 <SPI_select_left_disp>:
	}
}

void SPI_select_left_disp(uint8_t state) {
	if (state) {
     768:	88 23       	and	r24, r24
     76a:	41 f0       	breq	.+16     	; 0x77c <SPI_select_left_disp+0x14>
		sbi(PORTB, PORTB5);	 // left on
     76c:	2d 9a       	sbi	0x05, 5	; 5
		cbi(PORTB, PORTB4);  // center off
     76e:	2c 98       	cbi	0x05, 4	; 5
		cbi(PORTB, PORTB3);  // right off
     770:	2b 98       	cbi	0x05, 3	; 5
		cbi(PORTC, PORTC6);  // indicators off
     772:	46 98       	cbi	0x08, 6	; 8
		spi_send(0);
     774:	80 e0       	ldi	r24, 0x00	; 0
     776:	0e 94 3b 06 	call	0xc76	; 0xc76 <spi_send>
     77a:	08 95       	ret
	} else {
		cbi(PORTB, PORTB5);  // left off
     77c:	2d 98       	cbi	0x05, 5	; 5
     77e:	08 95       	ret

00000780 <SPI_select_center_disp>:
	}
}

void SPI_select_center_disp(uint8_t state) {
	if (state) {
     780:	88 23       	and	r24, r24
     782:	41 f0       	breq	.+16     	; 0x794 <SPI_select_center_disp+0x14>
		cbi(PORTB, PORTB5);	 // left off
     784:	2d 98       	cbi	0x05, 5	; 5
		sbi(PORTB, PORTB4);  // center on
     786:	2c 9a       	sbi	0x05, 4	; 5
		cbi(PORTB, PORTB3);  // right off
     788:	2b 98       	cbi	0x05, 3	; 5
		cbi(PORTC, PORTC6);  // indicators off
     78a:	46 98       	cbi	0x08, 6	; 8
		spi_send(0);
     78c:	80 e0       	ldi	r24, 0x00	; 0
     78e:	0e 94 3b 06 	call	0xc76	; 0xc76 <spi_send>
     792:	08 95       	ret
	} else {
		cbi(PORTB, PORTB4);  // center off
     794:	2c 98       	cbi	0x05, 4	; 5
     796:	08 95       	ret

00000798 <SPI_select_right_disp>:
	}
}

void SPI_select_right_disp(uint8_t state) {
	if (state) {
     798:	88 23       	and	r24, r24
     79a:	41 f0       	breq	.+16     	; 0x7ac <SPI_select_right_disp+0x14>
		cbi(PORTB, PORTB5);	 // left off
     79c:	2d 98       	cbi	0x05, 5	; 5
		cbi(PORTB, PORTB4);  // center off
     79e:	2c 98       	cbi	0x05, 4	; 5
		sbi(PORTB, PORTB3);  // right on
     7a0:	2b 9a       	sbi	0x05, 3	; 5
		cbi(PORTC, PORTC6);  // indicators off
     7a2:	46 98       	cbi	0x08, 6	; 8
		spi_send(0);
     7a4:	80 e0       	ldi	r24, 0x00	; 0
     7a6:	0e 94 3b 06 	call	0xc76	; 0xc76 <spi_send>
     7aa:	08 95       	ret
	} else {
		cbi(PORTB, PORTB3);  // right off
     7ac:	2b 98       	cbi	0x05, 3	; 5
     7ae:	08 95       	ret

000007b0 <getCharBitPattern>:
}

/* Input a character (0 - 9),
 * outputs a bit pattern in the form of (dp)abcdef for the 7-seg display   */
char getCharBitPattern(char character) {
  switch (character) {
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	fc 01       	movw	r30, r24
     7b4:	b0 97       	sbiw	r30, 0x20	; 32
     7b6:	eb 35       	cpi	r30, 0x5B	; 91
     7b8:	f1 05       	cpc	r31, r1
     7ba:	08 f0       	brcs	.+2      	; 0x7be <getCharBitPattern+0xe>
     7bc:	78 c0       	rjmp	.+240    	; 0x8ae <getCharBitPattern+0xfe>
     7be:	e2 5c       	subi	r30, 0xC2	; 194
     7c0:	ff 4f       	sbci	r31, 0xFF	; 255
     7c2:	0c 94 e7 0c 	jmp	0x19ce	; 0x19ce <__tablejump2__>
    case 'A': return 0b01110111;
     7c6:	87 e7       	ldi	r24, 0x77	; 119
     7c8:	08 95       	ret
    case 'B': return 0b01111111;
	case 'C': return 0b01001110;
     7ca:	8e e4       	ldi	r24, 0x4E	; 78
     7cc:	08 95       	ret
	case 'D': return 0b01111110;
     7ce:	8e e7       	ldi	r24, 0x7E	; 126
     7d0:	08 95       	ret
	case 'E': return 0b01001111;
     7d2:	8f e4       	ldi	r24, 0x4F	; 79
     7d4:	08 95       	ret
	case 'F': return 0b01000111;
     7d6:	87 e4       	ldi	r24, 0x47	; 71
     7d8:	08 95       	ret
	case 'G': return 0b01011111;
     7da:	8f e5       	ldi	r24, 0x5F	; 95
     7dc:	08 95       	ret
	case 'H': return 0b00110111;
     7de:	87 e3       	ldi	r24, 0x37	; 55
     7e0:	08 95       	ret
	case 'I': return 0b00000110;
     7e2:	86 e0       	ldi	r24, 0x06	; 6
     7e4:	08 95       	ret
	case 'J': return 0b00111100;
     7e6:	8c e3       	ldi	r24, 0x3C	; 60
     7e8:	08 95       	ret
	case 'K': return 0b00110111;
     7ea:	87 e3       	ldi	r24, 0x37	; 55
     7ec:	08 95       	ret
	case 'L': return 0b00001110;
     7ee:	8e e0       	ldi	r24, 0x0E	; 14
     7f0:	08 95       	ret
	//case 'M': return 0b0;
	case 'N': return 0b00010101;
     7f2:	85 e1       	ldi	r24, 0x15	; 21
     7f4:	08 95       	ret
	case 'O': return 0b01111110;
     7f6:	8e e7       	ldi	r24, 0x7E	; 126
     7f8:	08 95       	ret
	case 'P': return 0b01100111;
     7fa:	87 e6       	ldi	r24, 0x67	; 103
     7fc:	08 95       	ret
	case 'Q': return 0b01110011;
     7fe:	83 e7       	ldi	r24, 0x73	; 115
     800:	08 95       	ret
	case 'R': return 0b00000101;
     802:	85 e0       	ldi	r24, 0x05	; 5
     804:	08 95       	ret
	case 'S': return 0b01011011;
     806:	8b e5       	ldi	r24, 0x5B	; 91
     808:	08 95       	ret
	case 'T': return 0b00001111;
     80a:	8f e0       	ldi	r24, 0x0F	; 15
     80c:	08 95       	ret
	case 'U': return 0b00111110;
     80e:	8e e3       	ldi	r24, 0x3E	; 62
     810:	08 95       	ret
	case 'V': return 0b00111110;
     812:	8e e3       	ldi	r24, 0x3E	; 62
     814:	08 95       	ret
	//case 'W': return 0b0;
	case 'X': return 0b00110111;
     816:	87 e3       	ldi	r24, 0x37	; 55
     818:	08 95       	ret
	case 'Y': return 0b00111011;
     81a:	8b e3       	ldi	r24, 0x3B	; 59
     81c:	08 95       	ret
	case 'Z': return 0b01101101;
     81e:	8d e6       	ldi	r24, 0x6D	; 109
     820:	08 95       	ret
	case 'a': return 0b01110111;
	case 'b': return 0b00011111;
     822:	8f e1       	ldi	r24, 0x1F	; 31
     824:	08 95       	ret
	case 'c': return 0b00001101;
     826:	8d e0       	ldi	r24, 0x0D	; 13
     828:	08 95       	ret
	case 'd': return 0b00111101;
     82a:	8d e3       	ldi	r24, 0x3D	; 61
     82c:	08 95       	ret
	case 'e': return 0b01001111;
     82e:	8f e4       	ldi	r24, 0x4F	; 79
     830:	08 95       	ret
	case 'f': return 0b01000111;
     832:	87 e4       	ldi	r24, 0x47	; 71
     834:	08 95       	ret
	case 'g': return 0b01111011;
     836:	8b e7       	ldi	r24, 0x7B	; 123
     838:	08 95       	ret
	case 'h': return 0b00010111;
     83a:	87 e1       	ldi	r24, 0x17	; 23
     83c:	08 95       	ret
	case 'i': return 0b00000100;
     83e:	84 e0       	ldi	r24, 0x04	; 4
     840:	08 95       	ret
	case 'j': return 0b00111000;
     842:	88 e3       	ldi	r24, 0x38	; 56
     844:	08 95       	ret
	case 'k': return 0b00110111;
     846:	87 e3       	ldi	r24, 0x37	; 55
     848:	08 95       	ret
	case 'l': return 0b00000110;
     84a:	86 e0       	ldi	r24, 0x06	; 6
     84c:	08 95       	ret
	//case 'm': return 0b0;
	case 'n': return 0b00010101;
     84e:	85 e1       	ldi	r24, 0x15	; 21
     850:	08 95       	ret
	case 'o': return 0b00011101;
     852:	8d e1       	ldi	r24, 0x1D	; 29
     854:	08 95       	ret
	case 'p': return 0b01100111;
     856:	87 e6       	ldi	r24, 0x67	; 103
     858:	08 95       	ret
	case 'q': return 0b01110011;
     85a:	83 e7       	ldi	r24, 0x73	; 115
     85c:	08 95       	ret
	case 'r': return 0b00000101;
     85e:	85 e0       	ldi	r24, 0x05	; 5
     860:	08 95       	ret
	case 's': return 0b01011011;
     862:	8b e5       	ldi	r24, 0x5B	; 91
     864:	08 95       	ret
	case 't': return 0b00001111;
     866:	8f e0       	ldi	r24, 0x0F	; 15
     868:	08 95       	ret
	case 'u': return 0b00011100;
     86a:	8c e1       	ldi	r24, 0x1C	; 28
     86c:	08 95       	ret
	case 'v': return 0b00011100;
     86e:	8c e1       	ldi	r24, 0x1C	; 28
     870:	08 95       	ret
	//case 'w': return 0b0;
	case 'x': return 0b00110111;
     872:	87 e3       	ldi	r24, 0x37	; 55
     874:	08 95       	ret
	case 'y': return 0b00111011;
     876:	8b e3       	ldi	r24, 0x3B	; 59
     878:	08 95       	ret
	case 'z': return 0b01101101;
     87a:	8d e6       	ldi	r24, 0x6D	; 109
     87c:	08 95       	ret
	case ' ': return 0b00000000;
     87e:	80 e0       	ldi	r24, 0x00	; 0
     880:	08 95       	ret
	case '_': return 0b00001000;
     882:	88 e0       	ldi	r24, 0x08	; 8
     884:	08 95       	ret
	case '-': return 0b00001000;
     886:	88 e0       	ldi	r24, 0x08	; 8
     888:	08 95       	ret
	case '0': return getDigitBitPattern(0);
     88a:	8e e7       	ldi	r24, 0x7E	; 126
     88c:	08 95       	ret
	case '1': return getDigitBitPattern(1);
     88e:	80 e3       	ldi	r24, 0x30	; 48
     890:	08 95       	ret
	case '2': return getDigitBitPattern(2);
     892:	8d e6       	ldi	r24, 0x6D	; 109
     894:	08 95       	ret
	case '3': return getDigitBitPattern(3);
     896:	89 e7       	ldi	r24, 0x79	; 121
     898:	08 95       	ret
	case '4': return getDigitBitPattern(4);
     89a:	83 e3       	ldi	r24, 0x33	; 51
     89c:	08 95       	ret
	case '5': return getDigitBitPattern(5);
     89e:	8b e5       	ldi	r24, 0x5B	; 91
     8a0:	08 95       	ret
	case '6': return getDigitBitPattern(6);
     8a2:	8f e5       	ldi	r24, 0x5F	; 95
     8a4:	08 95       	ret
	case '7': return getDigitBitPattern(7);
     8a6:	80 e7       	ldi	r24, 0x70	; 112
     8a8:	08 95       	ret
	case '8': return getDigitBitPattern(8);
	case '9': return getDigitBitPattern(9);
     8aa:	8b e7       	ldi	r24, 0x7B	; 123
     8ac:	08 95       	ret
    default: return 0b00000000;
     8ae:	80 e0       	ldi	r24, 0x00	; 0
     8b0:	08 95       	ret
/* Input a character (0 - 9),
 * outputs a bit pattern in the form of (dp)abcdef for the 7-seg display   */
char getCharBitPattern(char character) {
  switch (character) {
    case 'A': return 0b01110111;
    case 'B': return 0b01111111;
     8b2:	8f e7       	ldi	r24, 0x7F	; 127
	case '7': return getDigitBitPattern(7);
	case '8': return getDigitBitPattern(8);
	case '9': return getDigitBitPattern(9);
    default: return 0b00000000;
  }
}
     8b4:	08 95       	ret

000008b6 <thirdOut>:

// calculates byte to send to the third shift register for this character (closest to SPI source)
char thirdOut(char digit, char rgb) {
     8b6:	98 2f       	mov	r25, r24
  char final = 0b0;
  //         (dp)abcdefg             rgb
  if ((digit & 0b00000100) && (rgb & 0b010)) final |= 0b1;
     8b8:	82 ff       	sbrs	r24, 2
     8ba:	04 c0       	rjmp	.+8      	; 0x8c4 <thirdOut+0xe>
     8bc:	61 fb       	bst	r22, 1
     8be:	88 27       	eor	r24, r24
     8c0:	80 f9       	bld	r24, 0
     8c2:	01 c0       	rjmp	.+2      	; 0x8c6 <thirdOut+0x10>
  }
}

// calculates byte to send to the third shift register for this character (closest to SPI source)
char thirdOut(char digit, char rgb) {
  char final = 0b0;
     8c4:	80 e0       	ldi	r24, 0x00	; 0
  //         (dp)abcdefg             rgb
  if ((digit & 0b00000100) && (rgb & 0b010)) final |= 0b1;
  if ((digit & 0b00001000) && (rgb & 0b001)) final |= 0b10;
     8c6:	93 ff       	sbrs	r25, 3
     8c8:	07 c0       	rjmp	.+14     	; 0x8d8 <thirdOut+0x22>
     8ca:	60 ff       	sbrs	r22, 0
     8cc:	14 c0       	rjmp	.+40     	; 0x8f6 <thirdOut+0x40>
     8ce:	82 60       	ori	r24, 0x02	; 2
     8d0:	12 c0       	rjmp	.+36     	; 0x8f6 <thirdOut+0x40>
  if ((digit & 0b00001000) && (rgb & 0b010)) final |= 0b100;
     8d2:	84 60       	ori	r24, 0x04	; 4
     8d4:	12 c0       	rjmp	.+36     	; 0x8fa <thirdOut+0x44>
  if ((digit & 0b00001000) && (rgb & 0b100)) final |= 0b1000;
     8d6:	88 60       	ori	r24, 0x08	; 8
  if ((digit & 0b00010000) && (rgb & 0b001)) final |= 0b10000;
     8d8:	94 ff       	sbrs	r25, 4
     8da:	05 c0       	rjmp	.+10     	; 0x8e6 <thirdOut+0x30>
     8dc:	60 ff       	sbrs	r22, 0
     8de:	10 c0       	rjmp	.+32     	; 0x900 <thirdOut+0x4a>
     8e0:	80 61       	ori	r24, 0x10	; 16
     8e2:	0e c0       	rjmp	.+28     	; 0x900 <thirdOut+0x4a>
  if ((digit & 0b00010000) && (rgb & 0b100)) final |= 0b100000;
     8e4:	80 62       	ori	r24, 0x20	; 32
  if ((digit & 0b10000000) && (rgb & 0b010)) final |= 0b1000000;
     8e6:	99 23       	and	r25, r25
     8e8:	84 f4       	brge	.+32     	; 0x90a <thirdOut+0x54>
     8ea:	61 ff       	sbrs	r22, 1
     8ec:	0c c0       	rjmp	.+24     	; 0x906 <thirdOut+0x50>
     8ee:	80 64       	ori	r24, 0x40	; 64
     8f0:	0a c0       	rjmp	.+20     	; 0x906 <thirdOut+0x50>
  if ((digit & 0b10000000) && (rgb & 0b100)) final |= 0b10000000;
     8f2:	80 68       	ori	r24, 0x80	; 128
     8f4:	08 95       	ret
char thirdOut(char digit, char rgb) {
  char final = 0b0;
  //         (dp)abcdefg             rgb
  if ((digit & 0b00000100) && (rgb & 0b010)) final |= 0b1;
  if ((digit & 0b00001000) && (rgb & 0b001)) final |= 0b10;
  if ((digit & 0b00001000) && (rgb & 0b010)) final |= 0b100;
     8f6:	61 fd       	sbrc	r22, 1
     8f8:	ec cf       	rjmp	.-40     	; 0x8d2 <thirdOut+0x1c>
  if ((digit & 0b00001000) && (rgb & 0b100)) final |= 0b1000;
     8fa:	62 fd       	sbrc	r22, 2
     8fc:	ec cf       	rjmp	.-40     	; 0x8d6 <thirdOut+0x20>
     8fe:	ec cf       	rjmp	.-40     	; 0x8d8 <thirdOut+0x22>
  if ((digit & 0b00010000) && (rgb & 0b001)) final |= 0b10000;
  if ((digit & 0b00010000) && (rgb & 0b100)) final |= 0b100000;
     900:	62 fd       	sbrc	r22, 2
     902:	f0 cf       	rjmp	.-32     	; 0x8e4 <thirdOut+0x2e>
     904:	f0 cf       	rjmp	.-32     	; 0x8e6 <thirdOut+0x30>
  if ((digit & 0b10000000) && (rgb & 0b010)) final |= 0b1000000;
  if ((digit & 0b10000000) && (rgb & 0b100)) final |= 0b10000000;
     906:	62 fd       	sbrc	r22, 2
     908:	f4 cf       	rjmp	.-24     	; 0x8f2 <thirdOut+0x3c>
  return final;
}
     90a:	08 95       	ret

0000090c <secondOut>:

// calculates byte to send to the second shift register for this character 
char secondOut(char digit, char rgb) {
     90c:	98 2f       	mov	r25, r24
  char final = 0b0;
  //         (dp)abcdefg             rgb
  if ((digit & 0b00000100) && (rgb & 0b001)) final |= 0b1;
     90e:	82 ff       	sbrs	r24, 2
     910:	06 c0       	rjmp	.+12     	; 0x91e <secondOut+0x12>
     912:	86 2f       	mov	r24, r22
     914:	81 70       	andi	r24, 0x01	; 1
  if ((digit & 0b00000100) && (rgb & 0b100)) final |= 0b10;
     916:	62 ff       	sbrs	r22, 2
     918:	03 c0       	rjmp	.+6      	; 0x920 <secondOut+0x14>
     91a:	82 60       	ori	r24, 0x02	; 2
     91c:	01 c0       	rjmp	.+2      	; 0x920 <secondOut+0x14>
  return final;
}

// calculates byte to send to the second shift register for this character 
char secondOut(char digit, char rgb) {
  char final = 0b0;
     91e:	80 e0       	ldi	r24, 0x00	; 0
  //         (dp)abcdefg             rgb
  if ((digit & 0b00000100) && (rgb & 0b001)) final |= 0b1;
  if ((digit & 0b00000100) && (rgb & 0b100)) final |= 0b10;
  if ((digit & 0b00010000) && (rgb & 0b010)) final |= 0b100;
     920:	94 ff       	sbrs	r25, 4
     922:	02 c0       	rjmp	.+4      	; 0x928 <secondOut+0x1c>
     924:	61 fd       	sbrc	r22, 1
     926:	84 60       	ori	r24, 0x04	; 4
  if ((digit & 0b10000000) && (rgb & 0b001)) final |= 0b1000;
     928:	99 23       	and	r25, r25
     92a:	14 f4       	brge	.+4      	; 0x930 <secondOut+0x24>
     92c:	60 fd       	sbrc	r22, 0
     92e:	88 60       	ori	r24, 0x08	; 8
  if ((digit & 0b00000010) && (rgb & 0b010)) final |= 0b10000;
     930:	91 ff       	sbrs	r25, 1
     932:	05 c0       	rjmp	.+10     	; 0x93e <secondOut+0x32>
     934:	61 ff       	sbrs	r22, 1
     936:	0d c0       	rjmp	.+26     	; 0x952 <secondOut+0x46>
     938:	80 61       	ori	r24, 0x10	; 16
     93a:	0b c0       	rjmp	.+22     	; 0x952 <secondOut+0x46>
  if ((digit & 0b00000010) && (rgb & 0b100)) final |= 0b100000;
     93c:	80 62       	ori	r24, 0x20	; 32
  if ((digit & 0b00000001) && (rgb & 0b010)) final |= 0b1000000;
     93e:	90 ff       	sbrs	r25, 0
     940:	02 c0       	rjmp	.+4      	; 0x946 <secondOut+0x3a>
     942:	61 fd       	sbrc	r22, 1
     944:	80 64       	ori	r24, 0x40	; 64
  if ((digit & 0b00100000) && (rgb & 0b010)) final |= 0b10000000;
     946:	95 ff       	sbrs	r25, 5
     948:	07 c0       	rjmp	.+14     	; 0x958 <secondOut+0x4c>
     94a:	61 ff       	sbrs	r22, 1
     94c:	05 c0       	rjmp	.+10     	; 0x958 <secondOut+0x4c>
     94e:	80 68       	ori	r24, 0x80	; 128
     950:	08 95       	ret
  if ((digit & 0b00000100) && (rgb & 0b001)) final |= 0b1;
  if ((digit & 0b00000100) && (rgb & 0b100)) final |= 0b10;
  if ((digit & 0b00010000) && (rgb & 0b010)) final |= 0b100;
  if ((digit & 0b10000000) && (rgb & 0b001)) final |= 0b1000;
  if ((digit & 0b00000010) && (rgb & 0b010)) final |= 0b10000;
  if ((digit & 0b00000010) && (rgb & 0b100)) final |= 0b100000;
     952:	62 fd       	sbrc	r22, 2
     954:	f3 cf       	rjmp	.-26     	; 0x93c <secondOut+0x30>
     956:	f3 cf       	rjmp	.-26     	; 0x93e <secondOut+0x32>
  if ((digit & 0b00000001) && (rgb & 0b010)) final |= 0b1000000;
  if ((digit & 0b00100000) && (rgb & 0b010)) final |= 0b10000000;
  return final;
}
     958:	08 95       	ret

0000095a <firstOut>:

// calculates byte to send to the first shift register for this character (furthest from SPI source)
char firstOut(char digit, char rgb) {
     95a:	98 2f       	mov	r25, r24
  char final = 0b0;
  //         (dp)abcdefg             rgb
  if ((digit & 0b00000010) && (rgb & 0b001)) final |= 0b1;
     95c:	81 ff       	sbrs	r24, 1
     95e:	03 c0       	rjmp	.+6      	; 0x966 <firstOut+0xc>
     960:	86 2f       	mov	r24, r22
     962:	81 70       	andi	r24, 0x01	; 1
     964:	01 c0       	rjmp	.+2      	; 0x968 <firstOut+0xe>
  return final;
}

// calculates byte to send to the first shift register for this character (furthest from SPI source)
char firstOut(char digit, char rgb) {
  char final = 0b0;
     966:	80 e0       	ldi	r24, 0x00	; 0
  //         (dp)abcdefg             rgb
  if ((digit & 0b00000010) && (rgb & 0b001)) final |= 0b1;
  if ((digit & 0b00000001) && (rgb & 0b001)) final |= 0b10;
     968:	90 ff       	sbrs	r25, 0
     96a:	05 c0       	rjmp	.+10     	; 0x976 <firstOut+0x1c>
     96c:	60 ff       	sbrs	r22, 0
     96e:	14 c0       	rjmp	.+40     	; 0x998 <firstOut+0x3e>
     970:	82 60       	ori	r24, 0x02	; 2
     972:	12 c0       	rjmp	.+36     	; 0x998 <firstOut+0x3e>
  if ((digit & 0b00000001) && (rgb & 0b100)) final |= 0b100;
     974:	84 60       	ori	r24, 0x04	; 4
  if ((digit & 0b01000000) && (rgb & 0b001)) final |= 0b1000;
     976:	96 ff       	sbrs	r25, 6
     978:	07 c0       	rjmp	.+14     	; 0x988 <firstOut+0x2e>
     97a:	60 ff       	sbrs	r22, 0
     97c:	10 c0       	rjmp	.+32     	; 0x99e <firstOut+0x44>
     97e:	88 60       	ori	r24, 0x08	; 8
     980:	0e c0       	rjmp	.+28     	; 0x99e <firstOut+0x44>
  if ((digit & 0b01000000) && (rgb & 0b010)) final |= 0b10000;
     982:	80 61       	ori	r24, 0x10	; 16
     984:	0e c0       	rjmp	.+28     	; 0x9a2 <firstOut+0x48>
  if ((digit & 0b01000000) && (rgb & 0b100)) final |= 0b100000;
     986:	80 62       	ori	r24, 0x20	; 32
  if ((digit & 0b00100000) && (rgb & 0b001)) final |= 0b1000000;
     988:	95 ff       	sbrs	r25, 5
     98a:	10 c0       	rjmp	.+32     	; 0x9ac <firstOut+0x52>
     98c:	60 ff       	sbrs	r22, 0
     98e:	0c c0       	rjmp	.+24     	; 0x9a8 <firstOut+0x4e>
     990:	80 64       	ori	r24, 0x40	; 64
     992:	0a c0       	rjmp	.+20     	; 0x9a8 <firstOut+0x4e>
  if ((digit & 0b00100000) && (rgb & 0b100)) final |= 0b10000000;
     994:	80 68       	ori	r24, 0x80	; 128
     996:	08 95       	ret
char firstOut(char digit, char rgb) {
  char final = 0b0;
  //         (dp)abcdefg             rgb
  if ((digit & 0b00000010) && (rgb & 0b001)) final |= 0b1;
  if ((digit & 0b00000001) && (rgb & 0b001)) final |= 0b10;
  if ((digit & 0b00000001) && (rgb & 0b100)) final |= 0b100;
     998:	62 fd       	sbrc	r22, 2
     99a:	ec cf       	rjmp	.-40     	; 0x974 <firstOut+0x1a>
     99c:	ec cf       	rjmp	.-40     	; 0x976 <firstOut+0x1c>
  if ((digit & 0b01000000) && (rgb & 0b001)) final |= 0b1000;
  if ((digit & 0b01000000) && (rgb & 0b010)) final |= 0b10000;
     99e:	61 fd       	sbrc	r22, 1
     9a0:	f0 cf       	rjmp	.-32     	; 0x982 <firstOut+0x28>
  if ((digit & 0b01000000) && (rgb & 0b100)) final |= 0b100000;
     9a2:	62 fd       	sbrc	r22, 2
     9a4:	f0 cf       	rjmp	.-32     	; 0x986 <firstOut+0x2c>
     9a6:	f0 cf       	rjmp	.-32     	; 0x988 <firstOut+0x2e>
  if ((digit & 0b00100000) && (rgb & 0b001)) final |= 0b1000000;
  if ((digit & 0b00100000) && (rgb & 0b100)) final |= 0b10000000;
     9a8:	62 fd       	sbrc	r22, 2
     9aa:	f4 cf       	rjmp	.-24     	; 0x994 <firstOut+0x3a>
  return final;
}
     9ac:	08 95       	ret

000009ae <writeCharacter>:
  //shift third
  spi_send(third);
}

// writes a character with the specified color (rbg is 3-bit binary set of flags).
void writeCharacter(char character, char rgb) {
     9ae:	0f 93       	push	r16
     9b0:	1f 93       	push	r17
     9b2:	cf 93       	push	r28
     9b4:	df 93       	push	r29
     9b6:	d6 2f       	mov	r29, r22
	char ch = getCharBitPattern(character);
     9b8:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <getCharBitPattern>
     9bc:	c8 2f       	mov	r28, r24
	char first = firstOut(ch, rgb);
     9be:	6d 2f       	mov	r22, r29
     9c0:	0e 94 ad 04 	call	0x95a	; 0x95a <firstOut>
     9c4:	08 2f       	mov	r16, r24
	char second = secondOut(ch, rgb);
     9c6:	6d 2f       	mov	r22, r29
     9c8:	8c 2f       	mov	r24, r28
     9ca:	0e 94 86 04 	call	0x90c	; 0x90c <secondOut>
     9ce:	18 2f       	mov	r17, r24
	char third = thirdOut(ch, rgb);
     9d0:	6d 2f       	mov	r22, r29
     9d2:	8c 2f       	mov	r24, r28
     9d4:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <thirdOut>
     9d8:	c8 2f       	mov	r28, r24
	//shift first
	spi_send(first);
     9da:	80 2f       	mov	r24, r16
     9dc:	0e 94 3b 06 	call	0xc76	; 0xc76 <spi_send>
	//shift second
	spi_send(second);
     9e0:	81 2f       	mov	r24, r17
     9e2:	0e 94 3b 06 	call	0xc76	; 0xc76 <spi_send>
	//shift third
	spi_send(third);
     9e6:	8c 2f       	mov	r24, r28
     9e8:	0e 94 3b 06 	call	0xc76	; 0xc76 <spi_send>
}
     9ec:	df 91       	pop	r29
     9ee:	cf 91       	pop	r28
     9f0:	1f 91       	pop	r17
     9f2:	0f 91       	pop	r16
     9f4:	08 95       	ret

000009f6 <display_str>:
 * LEDs:		   which indicator LEDs to turn on  (eg. 0b1010 turns on the 1st and 4th leds, (top is 1st)
 *
 * Usage: display_str(1,"hot",0b100,0b1000);
 */

void display_str(char which_display, char string[3], char rgb, char LEDs) {
     9f6:	ff 92       	push	r15
     9f8:	0f 93       	push	r16
     9fa:	1f 93       	push	r17
     9fc:	cf 93       	push	r28
     9fe:	df 93       	push	r29
     a00:	18 2f       	mov	r17, r24
     a02:	eb 01       	movw	r28, r22
     a04:	04 2f       	mov	r16, r20
     a06:	f2 2e       	mov	r15, r18
	switch(which_display) {
     a08:	82 30       	cpi	r24, 0x02	; 2
     a0a:	29 f1       	breq	.+74     	; 0xa56 <display_str+0x60>
     a0c:	83 30       	cpi	r24, 0x03	; 3
     a0e:	39 f1       	breq	.+78     	; 0xa5e <display_str+0x68>
     a10:	81 30       	cpi	r24, 0x01	; 1
     a12:	09 f0       	breq	.+2      	; 0xa16 <display_str+0x20>
     a14:	43 c0       	rjmp	.+134    	; 0xa9c <display_str+0xa6>
		case 1:
			if (left_text_mode == 1 && left_string[0] == string[0] && left_string[1] == string[1] && left_string[2] == string[2] && left_rgb == rgb && left_LEDs == LEDs) {
     a16:	80 91 38 01 	lds	r24, 0x0138
     a1a:	81 30       	cpi	r24, 0x01	; 1
     a1c:	c1 f4       	brne	.+48     	; 0xa4e <display_str+0x58>
     a1e:	90 91 03 01 	lds	r25, 0x0103
     a22:	88 81       	ld	r24, Y
     a24:	98 13       	cpse	r25, r24
     a26:	13 c0       	rjmp	.+38     	; 0xa4e <display_str+0x58>
     a28:	90 91 04 01 	lds	r25, 0x0104
     a2c:	89 81       	ldd	r24, Y+1	; 0x01
     a2e:	98 13       	cpse	r25, r24
     a30:	0e c0       	rjmp	.+28     	; 0xa4e <display_str+0x58>
     a32:	90 91 05 01 	lds	r25, 0x0105
     a36:	8a 81       	ldd	r24, Y+2	; 0x02
     a38:	98 13       	cpse	r25, r24
     a3a:	09 c0       	rjmp	.+18     	; 0xa4e <display_str+0x58>
     a3c:	80 91 36 01 	lds	r24, 0x0136
     a40:	84 13       	cpse	r24, r20
     a42:	05 c0       	rjmp	.+10     	; 0xa4e <display_str+0x58>
     a44:	80 91 34 01 	lds	r24, 0x0134
     a48:	82 17       	cp	r24, r18
     a4a:	09 f4       	brne	.+2      	; 0xa4e <display_str+0x58>
     a4c:	88 c0       	rjmp	.+272    	; 0xb5e <display_str+0x168>
				return;
			}
			SPI_select_left_disp(1);
     a4e:	81 e0       	ldi	r24, 0x01	; 1
     a50:	0e 94 b4 03 	call	0x768	; 0x768 <SPI_select_left_disp>
			break;
     a54:	23 c0       	rjmp	.+70     	; 0xa9c <display_str+0xa6>
		case 2:
			SPI_select_center_disp(1);
     a56:	81 e0       	ldi	r24, 0x01	; 1
     a58:	0e 94 c0 03 	call	0x780	; 0x780 <SPI_select_center_disp>
			break;
     a5c:	1f c0       	rjmp	.+62     	; 0xa9c <display_str+0xa6>
		case 3:
			if (right_text_mode == 1 && right_string[0] == string[0] && right_string[1] == string[1] && right_string[2] == string[2] && right_rgb == rgb && right_LEDs == LEDs) {
     a5e:	80 91 37 01 	lds	r24, 0x0137
     a62:	81 30       	cpi	r24, 0x01	; 1
     a64:	c1 f4       	brne	.+48     	; 0xa96 <display_str+0xa0>
     a66:	90 91 00 01 	lds	r25, 0x0100
     a6a:	88 81       	ld	r24, Y
     a6c:	98 13       	cpse	r25, r24
     a6e:	13 c0       	rjmp	.+38     	; 0xa96 <display_str+0xa0>
     a70:	90 91 01 01 	lds	r25, 0x0101
     a74:	89 81       	ldd	r24, Y+1	; 0x01
     a76:	98 13       	cpse	r25, r24
     a78:	0e c0       	rjmp	.+28     	; 0xa96 <display_str+0xa0>
     a7a:	90 91 02 01 	lds	r25, 0x0102
     a7e:	8a 81       	ldd	r24, Y+2	; 0x02
     a80:	98 13       	cpse	r25, r24
     a82:	09 c0       	rjmp	.+18     	; 0xa96 <display_str+0xa0>
     a84:	80 91 35 01 	lds	r24, 0x0135
     a88:	84 13       	cpse	r24, r20
     a8a:	05 c0       	rjmp	.+10     	; 0xa96 <display_str+0xa0>
     a8c:	80 91 33 01 	lds	r24, 0x0133
     a90:	82 17       	cp	r24, r18
     a92:	09 f4       	brne	.+2      	; 0xa96 <display_str+0xa0>
     a94:	64 c0       	rjmp	.+200    	; 0xb5e <display_str+0x168>
				return;
			}
			SPI_select_right_disp(1);
     a96:	81 e0       	ldi	r24, 0x01	; 1
     a98:	0e 94 cc 03 	call	0x798	; 0x798 <SPI_select_right_disp>
			break;
	}
	spi_send(LEDs);
     a9c:	8f 2d       	mov	r24, r15
     a9e:	0e 94 3b 06 	call	0xc76	; 0xc76 <spi_send>
	if (string[0] == '\n') {
     aa2:	88 81       	ld	r24, Y
     aa4:	8a 30       	cpi	r24, 0x0A	; 10
     aa6:	69 f4       	brne	.+26     	; 0xac2 <display_str+0xcc>
		writeCharacter(' ', rgb);	
     aa8:	60 2f       	mov	r22, r16
     aaa:	80 e2       	ldi	r24, 0x20	; 32
     aac:	0e 94 d7 04 	call	0x9ae	; 0x9ae <writeCharacter>
		writeCharacter(' ', rgb);	
     ab0:	60 2f       	mov	r22, r16
     ab2:	80 e2       	ldi	r24, 0x20	; 32
     ab4:	0e 94 d7 04 	call	0x9ae	; 0x9ae <writeCharacter>
		writeCharacter(' ', rgb);	
     ab8:	60 2f       	mov	r22, r16
     aba:	80 e2       	ldi	r24, 0x20	; 32
     abc:	0e 94 d7 04 	call	0x9ae	; 0x9ae <writeCharacter>
     ac0:	1d c0       	rjmp	.+58     	; 0xafc <display_str+0x106>
	} else {
		writeCharacter(string[0], rgb);	
     ac2:	60 2f       	mov	r22, r16
     ac4:	0e 94 d7 04 	call	0x9ae	; 0x9ae <writeCharacter>
		if (string[1] == '\n') {
     ac8:	89 81       	ldd	r24, Y+1	; 0x01
     aca:	8a 30       	cpi	r24, 0x0A	; 10
     acc:	49 f4       	brne	.+18     	; 0xae0 <display_str+0xea>
			writeCharacter(' ', rgb);
     ace:	60 2f       	mov	r22, r16
     ad0:	80 e2       	ldi	r24, 0x20	; 32
     ad2:	0e 94 d7 04 	call	0x9ae	; 0x9ae <writeCharacter>
			writeCharacter(' ', rgb);
     ad6:	60 2f       	mov	r22, r16
     ad8:	80 e2       	ldi	r24, 0x20	; 32
     ada:	0e 94 d7 04 	call	0x9ae	; 0x9ae <writeCharacter>
     ade:	0e c0       	rjmp	.+28     	; 0xafc <display_str+0x106>
		} else {
			writeCharacter(string[1], rgb);
     ae0:	60 2f       	mov	r22, r16
     ae2:	0e 94 d7 04 	call	0x9ae	; 0x9ae <writeCharacter>
			if (string[2] == '\n') {
     ae6:	8a 81       	ldd	r24, Y+2	; 0x02
     ae8:	8a 30       	cpi	r24, 0x0A	; 10
     aea:	29 f4       	brne	.+10     	; 0xaf6 <display_str+0x100>
				writeCharacter(' ', rgb);
     aec:	60 2f       	mov	r22, r16
     aee:	80 e2       	ldi	r24, 0x20	; 32
     af0:	0e 94 d7 04 	call	0x9ae	; 0x9ae <writeCharacter>
     af4:	03 c0       	rjmp	.+6      	; 0xafc <display_str+0x106>
			} else {
				writeCharacter(string[2], rgb);
     af6:	60 2f       	mov	r22, r16
     af8:	0e 94 d7 04 	call	0x9ae	; 0x9ae <writeCharacter>
			}
		}
	}
	
	switch(which_display) {
     afc:	12 30       	cpi	r17, 0x02	; 2
     afe:	c1 f0       	breq	.+48     	; 0xb30 <display_str+0x13a>
     b00:	13 30       	cpi	r17, 0x03	; 3
     b02:	d1 f0       	breq	.+52     	; 0xb38 <display_str+0x142>
     b04:	11 30       	cpi	r17, 0x01	; 1
     b06:	59 f5       	brne	.+86     	; 0xb5e <display_str+0x168>
		case 1:
			left_text_mode = 1;
     b08:	81 e0       	ldi	r24, 0x01	; 1
     b0a:	80 93 38 01 	sts	0x0138, r24
			left_string[0] = string[0];
     b0e:	88 81       	ld	r24, Y
     b10:	80 93 03 01 	sts	0x0103, r24
			left_string[1] = string[1];
     b14:	89 81       	ldd	r24, Y+1	; 0x01
     b16:	80 93 04 01 	sts	0x0104, r24
			left_string[2] = string[2];
     b1a:	8a 81       	ldd	r24, Y+2	; 0x02
     b1c:	80 93 05 01 	sts	0x0105, r24
			left_rgb = rgb;
     b20:	00 93 36 01 	sts	0x0136, r16
			left_LEDs = LEDs;
     b24:	f0 92 34 01 	sts	0x0134, r15
			SPI_select_left_disp(0);
     b28:	80 e0       	ldi	r24, 0x00	; 0
     b2a:	0e 94 b4 03 	call	0x768	; 0x768 <SPI_select_left_disp>
			break;
     b2e:	17 c0       	rjmp	.+46     	; 0xb5e <display_str+0x168>
		case 2:
			SPI_select_center_disp(0);
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	0e 94 c0 03 	call	0x780	; 0x780 <SPI_select_center_disp>
			break;
     b36:	13 c0       	rjmp	.+38     	; 0xb5e <display_str+0x168>
		case 3:
			right_text_mode = 1;
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	80 93 37 01 	sts	0x0137, r24
			right_string[0] = string[0];
     b3e:	88 81       	ld	r24, Y
     b40:	80 93 00 01 	sts	0x0100, r24
			right_string[1] = string[1];
     b44:	89 81       	ldd	r24, Y+1	; 0x01
     b46:	80 93 01 01 	sts	0x0101, r24
			right_string[2] = string[2];
     b4a:	8a 81       	ldd	r24, Y+2	; 0x02
     b4c:	80 93 02 01 	sts	0x0102, r24
			right_rgb = rgb;
     b50:	00 93 35 01 	sts	0x0135, r16
			right_LEDs = LEDs;
     b54:	f0 92 33 01 	sts	0x0133, r15
			SPI_select_right_disp(0);
     b58:	80 e0       	ldi	r24, 0x00	; 0
     b5a:	0e 94 cc 03 	call	0x798	; 0x798 <SPI_select_right_disp>
			break;
	}
     b5e:	df 91       	pop	r29
     b60:	cf 91       	pop	r28
     b62:	1f 91       	pop	r17
     b64:	0f 91       	pop	r16
     b66:	ff 90       	pop	r15
     b68:	08 95       	ret

00000b6a <init_interrupts>:
 * Returns: void
 */
void init_interrupts(void) {
	
	//Enable output compare A interrupt for Timer 1 (enables interrupt)
	TIMSK1 |= _BV(OCIE1A);
     b6a:	ef e6       	ldi	r30, 0x6F	; 111
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	80 81       	ld	r24, Z
     b70:	82 60       	ori	r24, 0x02	; 2
     b72:	80 83       	st	Z, r24
	
	// Set timer1_clk prescaler to clk/256 = 62.5kHz with 16MHz system clock
	TCCR1A = _BV(WGM12);
     b74:	a0 e8       	ldi	r26, 0x80	; 128
     b76:	b0 e0       	ldi	r27, 0x00	; 0
     b78:	88 e0       	ldi	r24, 0x08	; 8
     b7a:	8c 93       	st	X, r24
	TCCR1B = _BV(CS12) | _BV(CS11);
     b7c:	e1 e8       	ldi	r30, 0x81	; 129
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	86 e0       	ldi	r24, 0x06	; 6
     b82:	80 83       	st	Z, r24
	
	// Reset timer 1
	TCNT1 = 0;
     b84:	10 92 85 00 	sts	0x0085, r1
     b88:	10 92 84 00 	sts	0x0084, r1

	// Set timer1_clk prescaler to clk/256 = 62.5kHz with 16MHz system clock
	TCCR1A = 0;
     b8c:	1c 92       	st	X, r1
	TCCR1B &= (1 << CS12) | (0 << CS11) | (0 << CS10); 
     b8e:	80 81       	ld	r24, Z
     b90:	84 70       	andi	r24, 0x04	; 4
     b92:	80 83       	st	Z, r24
	
	/*Set output compare register 1A to 0x271=625
		This sets the timer to count to 625, making a
		100Hz interrupt
	*/
	OCR1A = 0x0271;
     b94:	81 e7       	ldi	r24, 0x71	; 113
     b96:	92 e0       	ldi	r25, 0x02	; 2
     b98:	90 93 89 00 	sts	0x0089, r25
     b9c:	80 93 88 00 	sts	0x0088, r24
	
	// Clear interrupts
	TIFR1 = (1 << OCF1A) || (1 << OCF1B);
     ba0:	81 e0       	ldi	r24, 0x01	; 1
     ba2:	86 bb       	out	0x16, r24	; 22

	// enable interrupts
	sei();
     ba4:	78 94       	sei
     ba6:	08 95       	ret

00000ba8 <init_io>:
/* init_io
 * Initialize digital I/O pins.
 * Arguments: void
 * Returns: void
 */
void init_io(void) {
     ba8:	0f 93       	push	r16
	//config_io_pin(MCU_STATUS_PIN, MCU_STATUS_PORT, IO_DIR_OUTPUT);
	set_DDRs();
     baa:	0e 94 e5 02 	call	0x5ca	; 0x5ca <set_DDRs>
	spi_init(0, 1, 0, 3, 0);
     bae:	00 e0       	ldi	r16, 0x00	; 0
     bb0:	23 e0       	ldi	r18, 0x03	; 3
     bb2:	40 e0       	ldi	r20, 0x00	; 0
     bb4:	61 e0       	ldi	r22, 0x01	; 1
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	0e 94 14 06 	call	0xc28	; 0xc28 <spi_init>
}
     bbc:	0f 91       	pop	r16
     bbe:	08 95       	ret

00000bc0 <init_adc>:
 * Arguments: void
 * Returns: void
 */
void init_adc(void){

	ADCSRA |= (1 << ADPS2) | (0 << ADPS1) | (0 << ADPS0); // Set ADC prescaler to 16 - 1MHz sample rate @ 16MHz
     bc0:	ea e7       	ldi	r30, 0x7A	; 122
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	80 81       	ld	r24, Z
     bc6:	84 60       	ori	r24, 0x04	; 4
     bc8:	80 83       	st	Z, r24

	ADMUX  |= (1 << ADLAR); // Left adjust ADC result to allow easy 8 bit reading
     bca:	ac e7       	ldi	r26, 0x7C	; 124
     bcc:	b0 e0       	ldi	r27, 0x00	; 0
     bce:	8c 91       	ld	r24, X
     bd0:	80 62       	ori	r24, 0x20	; 32
     bd2:	8c 93       	st	X, r24
	ADCSRB |= (1 << ADHSM);	// Set ADC high speed mode
     bd4:	ab e7       	ldi	r26, 0x7B	; 123
     bd6:	b0 e0       	ldi	r27, 0x00	; 0
     bd8:	8c 91       	ld	r24, X
     bda:	80 68       	ori	r24, 0x80	; 128
     bdc:	8c 93       	st	X, r24

	// No MUX values needed to be changed for initialization
	
	ADCSRB |= (1 << AREFEN); // Set ADC reference to AREF (AREFEN = 1, ISRCEN = 0, REFS1 = 0, REFS0 = 0)
     bde:	8c 91       	ld	r24, X
     be0:	80 62       	ori	r24, 0x20	; 32
     be2:	8c 93       	st	X, r24
	
	ADCSRA |= (1 << ADEN);  // Enable ADC
     be4:	80 81       	ld	r24, Z
     be6:	80 68       	ori	r24, 0x80	; 128
     be8:	80 83       	st	Z, r24
	
	// Enable timer 1 output compare B interrupt to sample ADCs
	// 62.5KHz timer clock * 2.5ms compare time = 156 = 0x9C
	OCR1B = 0x009C;
     bea:	8c e9       	ldi	r24, 0x9C	; 156
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	90 93 8b 00 	sts	0x008B, r25
     bf2:	80 93 8a 00 	sts	0x008A, r24
	// Enable output compare B interrupt
	TIMSK1 |= _BV(OCIE1B);
     bf6:	ef e6       	ldi	r30, 0x6F	; 111
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	80 81       	ld	r24, Z
     bfc:	84 60       	ori	r24, 0x04	; 4
     bfe:	80 83       	st	Z, r24
     c00:	08 95       	ret

00000c02 <init_can_mailboxes>:
 * sets up mailboxes for all critical CAN messages that this board receives
 *
 */
void init_can_mailboxes(void) {
	// Initialize heartbeat send mailbox 
	setup_can_send(&heartbeat_cmd_st, ((uint8_t *)(&can_send_buffer)), sizeof(struct dash_heartbeat_st), DASH_HEARTBEAT_ID);
     c02:	25 e0       	ldi	r18, 0x05	; 5
     c04:	32 e0       	ldi	r19, 0x02	; 2
     c06:	42 e0       	ldi	r20, 0x02	; 2
     c08:	69 e3       	ldi	r22, 0x39	; 57
     c0a:	71 e0       	ldi	r23, 0x01	; 1
     c0c:	89 e6       	ldi	r24, 0x69	; 105
     c0e:	91 e0       	ldi	r25, 0x01	; 1
     c10:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <setup_can_send>
	
	/* Initialize receive mailboxes    */
	//Receive main heartbeat for state transitions
	setup_can_rcv(&rcv_cmd_st[0], ((uint8_t *)(&can_rcv_buffer[0])), sizeof(struct main_heartbeat_st), MAIN_HEARTBEAT_ID);
     c14:	20 e0       	ldi	r18, 0x00	; 0
     c16:	32 e0       	ldi	r19, 0x02	; 2
     c18:	41 e0       	ldi	r20, 0x01	; 1
     c1a:	61 e4       	ldi	r22, 0x41	; 65
     c1c:	71 e0       	ldi	r23, 0x01	; 1
     c1e:	87 e7       	ldi	r24, 0x77	; 119
     c20:	91 e0       	ldi	r25, 0x01	; 1
     c22:	0e 94 4e 0c 	call	0x189c	; 0x189c <setup_can_rcv>
     c26:	08 95       	ret

00000c28 <spi_init>:
//  EXAMPLE: spi_init(0, 1, 0, 3, 0)
void spi_init(uint8_t lsbfirst,
              uint8_t master,
              uint8_t mode,
              uint8_t clkrate,
              uint8_t dblclk){
     c28:	0f 93       	push	r16
  //set outputs
  __SPI_DDR |= ((1<<__SPI_MOSI) | (1<<__SPI_SCK));
     c2a:	94 b1       	in	r25, 0x04	; 4
     c2c:	92 68       	ori	r25, 0x82	; 130
     c2e:	94 b9       	out	0x04, r25	; 4
  //set inputs
  __SPI_DDR &= ~(1<<__SPI_MISO);
     c30:	20 98       	cbi	0x04, 0	; 4
  __SPI_PORT |= (1<<__SPI_MISO); //turn on pull-up resistor
     c32:	28 9a       	sbi	0x05, 0	; 5
  //set SPI control register
  SPCR = (
     c34:	23 70       	andi	r18, 0x03	; 3
     c36:	20 64       	ori	r18, 0x40	; 64
           (1<<SPE) | //enable SPI
           ((lsbfirst & __SPI_LSBFIRST_MASK)<<DORD) | //set msb/lsb ordering
           ((master & __SPI_MASTER_MASK)<<MSTR) | //set master/slave mode
           ((mode & __SPI_MODE_MASK)<<CPHA) | //set mode
     c38:	43 70       	andi	r20, 0x03	; 3
     c3a:	44 0f       	add	r20, r20
     c3c:	44 0f       	add	r20, r20
  __SPI_DDR |= ((1<<__SPI_MOSI) | (1<<__SPI_SCK));
  //set inputs
  __SPI_DDR &= ~(1<<__SPI_MISO);
  __SPI_PORT |= (1<<__SPI_MISO); //turn on pull-up resistor
  //set SPI control register
  SPCR = (
     c3e:	24 2b       	or	r18, r20
           (1<<SPE) | //enable SPI
           ((lsbfirst & __SPI_LSBFIRST_MASK)<<DORD) | //set msb/lsb ordering
           ((master & __SPI_MASTER_MASK)<<MSTR) | //set master/slave mode
     c40:	a6 2f       	mov	r26, r22
     c42:	a1 70       	andi	r26, 0x01	; 1
     c44:	b0 e0       	ldi	r27, 0x00	; 0
     c46:	a2 95       	swap	r26
     c48:	b2 95       	swap	r27
     c4a:	b0 7f       	andi	r27, 0xF0	; 240
     c4c:	ba 27       	eor	r27, r26
     c4e:	a0 7f       	andi	r26, 0xF0	; 240
     c50:	ba 27       	eor	r27, r26
  __SPI_DDR |= ((1<<__SPI_MOSI) | (1<<__SPI_SCK));
  //set inputs
  __SPI_DDR &= ~(1<<__SPI_MISO);
  __SPI_PORT |= (1<<__SPI_MISO); //turn on pull-up resistor
  //set SPI control register
  SPCR = (
     c52:	a2 2b       	or	r26, r18
           (1<<SPE) | //enable SPI
           ((lsbfirst & __SPI_LSBFIRST_MASK)<<DORD) | //set msb/lsb ordering
     c54:	e8 2f       	mov	r30, r24
     c56:	e1 70       	andi	r30, 0x01	; 1
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	ee 0f       	add	r30, r30
     c5c:	ff 1f       	adc	r31, r31
     c5e:	e2 95       	swap	r30
     c60:	f2 95       	swap	r31
     c62:	f0 7f       	andi	r31, 0xF0	; 240
     c64:	fe 27       	eor	r31, r30
     c66:	e0 7f       	andi	r30, 0xF0	; 240
     c68:	fe 27       	eor	r31, r30
  __SPI_DDR |= ((1<<__SPI_MOSI) | (1<<__SPI_SCK));
  //set inputs
  __SPI_DDR &= ~(1<<__SPI_MISO);
  __SPI_PORT |= (1<<__SPI_MISO); //turn on pull-up resistor
  //set SPI control register
  SPCR = (
     c6a:	ae 2b       	or	r26, r30
     c6c:	ac bd       	out	0x2c, r26	; 44
           ((master & __SPI_MASTER_MASK)<<MSTR) | //set master/slave mode
           ((mode & __SPI_MODE_MASK)<<CPHA) | //set mode
           (clkrate & __SPI_SPEED_MASK<<SPR0) //set speed
         );
  //set double speed bit
  SPSR = ((dblclk&__SPI_DBLCLK_MASK)<<SPI2X);
     c6e:	01 70       	andi	r16, 0x01	; 1
     c70:	0d bd       	out	0x2d, r16	; 45
}
     c72:	0f 91       	pop	r16
     c74:	08 95       	ret

00000c76 <spi_send>:
//  returns uint8_t - the data received during sending
uint8_t spi_send(uint8_t value){
  uint8_t result;

  //shift the first byte of the value
  SPDR = value;
     c76:	8e bd       	out	0x2e, r24	; 46
  //wait for the SPI bus to finish
  while(!(SPSR & (1<<SPIF)));
     c78:	0d b4       	in	r0, 0x2d	; 45
     c7a:	07 fe       	sbrs	r0, 7
     c7c:	fd cf       	rjmp	.-6      	; 0xc78 <spi_send+0x2>
  //get the received data
  result = SPDR;
     c7e:	8e b5       	in	r24, 0x2e	; 46

  return result;
}
     c80:	08 95       	ret

00000c82 <can_init>:
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
     c82:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <can_fixed_baudrate>
     c86:	88 23       	and	r24, r24
     c88:	49 f0       	breq	.+18     	; 0xc9c <can_init+0x1a>
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
     c8a:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <can_clear_all_mob>
    Can_enable();                               // c.f. macro in "can_drv.h" 
     c8e:	e8 ed       	ldi	r30, 0xD8	; 216
     c90:	f0 e0       	ldi	r31, 0x00	; 0
     c92:	80 81       	ld	r24, Z
     c94:	82 60       	ori	r24, 0x02	; 2
     c96:	80 83       	st	Z, r24
    return (1);
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	08 95       	ret
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
     c9c:	80 e0       	ldi	r24, 0x00	; 0
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
    Can_enable();                               // c.f. macro in "can_drv.h" 
    return (1);
}
     c9e:	08 95       	ret

00000ca0 <can_cmd>:
//! @return CAN_CMD_ACCEPTED - command is accepted
//!         CAN_CMD_REFUSED  - command is refused
//!
//------------------------------------------------------------------------------
uint8_t can_cmd(st_cmd_t* cmd)
{
     ca0:	0f 93       	push	r16
     ca2:	1f 93       	push	r17
     ca4:	cf 93       	push	r28
     ca6:	df 93       	push	r29
     ca8:	00 d0       	rcall	.+0      	; 0xcaa <can_cmd+0xa>
     caa:	00 d0       	rcall	.+0      	; 0xcac <can_cmd+0xc>
     cac:	cd b7       	in	r28, 0x3d	; 61
     cae:	de b7       	in	r29, 0x3e	; 62
     cb0:	8c 01       	movw	r16, r24
  uint8_t mob_handle, cpt;
  uint32_t u32_temp;
  
  if (cmd->cmd == CMD_ABORT)
     cb2:	dc 01       	movw	r26, r24
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	8c 91       	ld	r24, X
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	8c 30       	cpi	r24, 0x0C	; 12
     cbc:	b1 f4       	brne	.+44     	; 0xcea <can_cmd+0x4a>
  {
    if (cmd->status == MOB_PENDING)
     cbe:	19 96       	adiw	r26, 0x09	; 9
     cc0:	8c 91       	ld	r24, X
     cc2:	19 97       	sbiw	r26, 0x09	; 9
     cc4:	80 36       	cpi	r24, 0x60	; 96
     cc6:	69 f4       	brne	.+26     	; 0xce2 <can_cmd+0x42>
    {
      // Rx or Tx not yet performed
      Can_set_mob(cmd->handle);
     cc8:	8c 91       	ld	r24, X
     cca:	82 95       	swap	r24
     ccc:	80 7f       	andi	r24, 0xF0	; 240
     cce:	80 93 ed 00 	sts	0x00ED, r24
      Can_mob_abort();
     cd2:	ef ee       	ldi	r30, 0xEF	; 239
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	80 81       	ld	r24, Z
     cd8:	8f 73       	andi	r24, 0x3F	; 63
     cda:	80 83       	st	Z, r24
      Can_clear_status_mob();       // To be sure !
     cdc:	10 92 ee 00 	sts	0x00EE, r1
      cmd->handle = 0;
     ce0:	1c 92       	st	X, r1
    }
    cmd->status = STATUS_CLEARED; 
     ce2:	f8 01       	movw	r30, r16
     ce4:	11 86       	std	Z+9, r1	; 0x09
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     ce6:	80 e0       	ldi	r24, 0x00	; 0
     ce8:	01 c5       	rjmp	.+2562   	; 0x16ec <__stack+0x5ed>
    }
    cmd->status = STATUS_CLEARED; 
  }
  else
  {
    mob_handle = can_get_mob_free();
     cea:	0e 94 87 0c 	call	0x190e	; 0x190e <can_get_mob_free>
    if (mob_handle!= NO_MOB)
     cee:	8f 3f       	cpi	r24, 0xFF	; 255
     cf0:	09 f4       	brne	.+2      	; 0xcf4 <can_cmd+0x54>
     cf2:	f7 c4       	rjmp	.+2542   	; 0x16e2 <__stack+0x5e3>
    {
      cmd->status = MOB_PENDING; 
     cf4:	90 e6       	ldi	r25, 0x60	; 96
     cf6:	d8 01       	movw	r26, r16
     cf8:	19 96       	adiw	r26, 0x09	; 9
     cfa:	9c 93       	st	X, r25
     cfc:	19 97       	sbiw	r26, 0x09	; 9
      cmd->handle = mob_handle;
     cfe:	8c 93       	st	X, r24
      Can_set_mob(mob_handle);
     d00:	82 95       	swap	r24
     d02:	80 7f       	andi	r24, 0xF0	; 240
     d04:	80 93 ed 00 	sts	0x00ED, r24
      Can_clear_mob();
     d08:	ee ee       	ldi	r30, 0xEE	; 238
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	11 92       	st	Z+, r1
     d0e:	e8 3f       	cpi	r30, 0xF8	; 248
     d10:	f1 05       	cpc	r31, r1
     d12:	e1 f7       	brne	.-8      	; 0xd0c <can_cmd+0x6c>
          
      switch (cmd->cmd)
     d14:	f8 01       	movw	r30, r16
     d16:	41 81       	ldd	r20, Z+1	; 0x01
     d18:	50 e0       	ldi	r21, 0x00	; 0
     d1a:	fa 01       	movw	r30, r20
     d1c:	31 97       	sbiw	r30, 0x01	; 1
     d1e:	eb 30       	cpi	r30, 0x0B	; 11
     d20:	f1 05       	cpc	r31, r1
     d22:	08 f0       	brcs	.+2      	; 0xd26 <can_cmd+0x86>
     d24:	da c4       	rjmp	.+2484   	; 0x16da <__stack+0x5db>
     d26:	e7 56       	subi	r30, 0x67	; 103
     d28:	ff 4f       	sbci	r31, 0xFF	; 255
     d2a:	0c 94 e7 0c 	jmp	0x19ce	; 0x19ce <__tablejump2__>
          Can_set_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     d2e:	d8 01       	movw	r26, r16
     d30:	16 96       	adiw	r26, 0x06	; 6
     d32:	8c 91       	ld	r24, X
     d34:	81 11       	cpse	r24, r1
     d36:	cb c3       	rjmp	.+1942   	; 0x14ce <__stack+0x3cf>
     d38:	dc c3       	rjmp	.+1976   	; 0x14f2 <__stack+0x3f3>
          
      switch (cmd->cmd)
      {
        //------------      
        case CMD_TX:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     d3a:	f8 01       	movw	r30, r16
     d3c:	83 85       	ldd	r24, Z+11	; 0x0b
     d3e:	88 23       	and	r24, r24
     d40:	69 f1       	breq	.+90     	; 0xd9c <can_cmd+0xfc>
     d42:	94 81       	ldd	r25, Z+4	; 0x04
     d44:	92 95       	swap	r25
     d46:	96 95       	lsr	r25
     d48:	97 70       	andi	r25, 0x07	; 7
     d4a:	85 81       	ldd	r24, Z+5	; 0x05
     d4c:	88 0f       	add	r24, r24
     d4e:	88 0f       	add	r24, r24
     d50:	88 0f       	add	r24, r24
     d52:	89 0f       	add	r24, r25
     d54:	80 93 f3 00 	sts	0x00F3, r24
     d58:	93 81       	ldd	r25, Z+3	; 0x03
     d5a:	92 95       	swap	r25
     d5c:	96 95       	lsr	r25
     d5e:	97 70       	andi	r25, 0x07	; 7
     d60:	84 81       	ldd	r24, Z+4	; 0x04
     d62:	88 0f       	add	r24, r24
     d64:	88 0f       	add	r24, r24
     d66:	88 0f       	add	r24, r24
     d68:	89 0f       	add	r24, r25
     d6a:	80 93 f2 00 	sts	0x00F2, r24
     d6e:	92 81       	ldd	r25, Z+2	; 0x02
     d70:	92 95       	swap	r25
     d72:	96 95       	lsr	r25
     d74:	97 70       	andi	r25, 0x07	; 7
     d76:	83 81       	ldd	r24, Z+3	; 0x03
     d78:	88 0f       	add	r24, r24
     d7a:	88 0f       	add	r24, r24
     d7c:	88 0f       	add	r24, r24
     d7e:	89 0f       	add	r24, r25
     d80:	80 93 f1 00 	sts	0x00F1, r24
     d84:	82 81       	ldd	r24, Z+2	; 0x02
     d86:	88 0f       	add	r24, r24
     d88:	88 0f       	add	r24, r24
     d8a:	88 0f       	add	r24, r24
     d8c:	80 93 f0 00 	sts	0x00F0, r24
     d90:	ef ee       	ldi	r30, 0xEF	; 239
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	80 81       	ld	r24, Z
     d96:	80 61       	ori	r24, 0x10	; 16
     d98:	80 83       	st	Z, r24
     d9a:	17 c0       	rjmp	.+46     	; 0xdca <can_cmd+0x12a>
          else              { Can_set_std_id(cmd->id.std);}
     d9c:	82 81       	ldd	r24, Z+2	; 0x02
     d9e:	86 95       	lsr	r24
     da0:	86 95       	lsr	r24
     da2:	86 95       	lsr	r24
     da4:	93 81       	ldd	r25, Z+3	; 0x03
     da6:	b0 e2       	ldi	r27, 0x20	; 32
     da8:	9b 9f       	mul	r25, r27
     daa:	80 0d       	add	r24, r0
     dac:	11 24       	eor	r1, r1
     dae:	80 93 f3 00 	sts	0x00F3, r24
     db2:	f8 01       	movw	r30, r16
     db4:	82 81       	ldd	r24, Z+2	; 0x02
     db6:	82 95       	swap	r24
     db8:	88 0f       	add	r24, r24
     dba:	80 7e       	andi	r24, 0xE0	; 224
     dbc:	80 93 f2 00 	sts	0x00F2, r24
     dc0:	ef ee       	ldi	r30, 0xEF	; 239
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	80 81       	ld	r24, Z
     dc6:	8f 7e       	andi	r24, 0xEF	; 239
     dc8:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     dca:	d8 01       	movw	r26, r16
     dcc:	16 96       	adiw	r26, 0x06	; 6
     dce:	8c 91       	ld	r24, X
     dd0:	88 23       	and	r24, r24
     dd2:	91 f0       	breq	.+36     	; 0xdf8 <can_cmd+0x158>
     dd4:	80 e0       	ldi	r24, 0x00	; 0
     dd6:	2a ef       	ldi	r18, 0xFA	; 250
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	d8 01       	movw	r26, r16
     ddc:	17 96       	adiw	r26, 0x07	; 7
     dde:	ed 91       	ld	r30, X+
     de0:	fc 91       	ld	r31, X
     de2:	18 97       	sbiw	r26, 0x08	; 8
     de4:	e8 0f       	add	r30, r24
     de6:	f1 1d       	adc	r31, r1
     de8:	90 81       	ld	r25, Z
     dea:	f9 01       	movw	r30, r18
     dec:	90 83       	st	Z, r25
     dee:	8f 5f       	subi	r24, 0xFF	; 255
     df0:	16 96       	adiw	r26, 0x06	; 6
     df2:	9c 91       	ld	r25, X
     df4:	89 17       	cp	r24, r25
     df6:	88 f3       	brcs	.-30     	; 0xdda <can_cmd+0x13a>
          if (cmd->ctrl.rtr) Can_set_rtr(); 
     df8:	d8 01       	movw	r26, r16
     dfa:	1a 96       	adiw	r26, 0x0a	; 10
     dfc:	8c 91       	ld	r24, X
     dfe:	88 23       	and	r24, r24
     e00:	31 f0       	breq	.+12     	; 0xe0e <can_cmd+0x16e>
     e02:	e0 ef       	ldi	r30, 0xF0	; 240
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	80 81       	ld	r24, Z
     e08:	84 60       	ori	r24, 0x04	; 4
     e0a:	80 83       	st	Z, r24
     e0c:	05 c0       	rjmp	.+10     	; 0xe18 <can_cmd+0x178>
            else Can_clear_rtr();    
     e0e:	e0 ef       	ldi	r30, 0xF0	; 240
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	8b 7f       	andi	r24, 0xFB	; 251
     e16:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     e18:	ef ee       	ldi	r30, 0xEF	; 239
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	90 81       	ld	r25, Z
     e1e:	d8 01       	movw	r26, r16
     e20:	16 96       	adiw	r26, 0x06	; 6
     e22:	8c 91       	ld	r24, X
     e24:	89 2b       	or	r24, r25
     e26:	80 83       	st	Z, r24
          Can_config_tx();
     e28:	80 81       	ld	r24, Z
     e2a:	8f 73       	andi	r24, 0x3F	; 63
     e2c:	80 83       	st	Z, r24
     e2e:	80 81       	ld	r24, Z
     e30:	80 64       	ori	r24, 0x40	; 64
     e32:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     e34:	80 e0       	ldi	r24, 0x00	; 0
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          if (cmd->ctrl.rtr) Can_set_rtr(); 
            else Can_clear_rtr();    
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     e36:	5a c4       	rjmp	.+2228   	; 0x16ec <__stack+0x5ed>
        //------------      
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     e38:	f8 01       	movw	r30, r16
     e3a:	83 85       	ldd	r24, Z+11	; 0x0b
     e3c:	88 23       	and	r24, r24
     e3e:	69 f1       	breq	.+90     	; 0xe9a <can_cmd+0x1fa>
     e40:	94 81       	ldd	r25, Z+4	; 0x04
     e42:	92 95       	swap	r25
     e44:	96 95       	lsr	r25
     e46:	97 70       	andi	r25, 0x07	; 7
     e48:	85 81       	ldd	r24, Z+5	; 0x05
     e4a:	88 0f       	add	r24, r24
     e4c:	88 0f       	add	r24, r24
     e4e:	88 0f       	add	r24, r24
     e50:	89 0f       	add	r24, r25
     e52:	80 93 f3 00 	sts	0x00F3, r24
     e56:	93 81       	ldd	r25, Z+3	; 0x03
     e58:	92 95       	swap	r25
     e5a:	96 95       	lsr	r25
     e5c:	97 70       	andi	r25, 0x07	; 7
     e5e:	84 81       	ldd	r24, Z+4	; 0x04
     e60:	88 0f       	add	r24, r24
     e62:	88 0f       	add	r24, r24
     e64:	88 0f       	add	r24, r24
     e66:	89 0f       	add	r24, r25
     e68:	80 93 f2 00 	sts	0x00F2, r24
     e6c:	92 81       	ldd	r25, Z+2	; 0x02
     e6e:	92 95       	swap	r25
     e70:	96 95       	lsr	r25
     e72:	97 70       	andi	r25, 0x07	; 7
     e74:	83 81       	ldd	r24, Z+3	; 0x03
     e76:	88 0f       	add	r24, r24
     e78:	88 0f       	add	r24, r24
     e7a:	88 0f       	add	r24, r24
     e7c:	89 0f       	add	r24, r25
     e7e:	80 93 f1 00 	sts	0x00F1, r24
     e82:	82 81       	ldd	r24, Z+2	; 0x02
     e84:	88 0f       	add	r24, r24
     e86:	88 0f       	add	r24, r24
     e88:	88 0f       	add	r24, r24
     e8a:	80 93 f0 00 	sts	0x00F0, r24
     e8e:	ef ee       	ldi	r30, 0xEF	; 239
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	80 61       	ori	r24, 0x10	; 16
     e96:	80 83       	st	Z, r24
     e98:	17 c0       	rjmp	.+46     	; 0xec8 <can_cmd+0x228>
          else              { Can_set_std_id(cmd->id.std);}
     e9a:	82 81       	ldd	r24, Z+2	; 0x02
     e9c:	86 95       	lsr	r24
     e9e:	86 95       	lsr	r24
     ea0:	86 95       	lsr	r24
     ea2:	93 81       	ldd	r25, Z+3	; 0x03
     ea4:	b0 e2       	ldi	r27, 0x20	; 32
     ea6:	9b 9f       	mul	r25, r27
     ea8:	80 0d       	add	r24, r0
     eaa:	11 24       	eor	r1, r1
     eac:	80 93 f3 00 	sts	0x00F3, r24
     eb0:	f8 01       	movw	r30, r16
     eb2:	82 81       	ldd	r24, Z+2	; 0x02
     eb4:	82 95       	swap	r24
     eb6:	88 0f       	add	r24, r24
     eb8:	80 7e       	andi	r24, 0xE0	; 224
     eba:	80 93 f2 00 	sts	0x00F2, r24
     ebe:	ef ee       	ldi	r30, 0xEF	; 239
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	8f 7e       	andi	r24, 0xEF	; 239
     ec6:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     ec8:	d8 01       	movw	r26, r16
     eca:	16 96       	adiw	r26, 0x06	; 6
     ecc:	8c 91       	ld	r24, X
     ece:	88 23       	and	r24, r24
     ed0:	91 f0       	breq	.+36     	; 0xef6 <can_cmd+0x256>
     ed2:	80 e0       	ldi	r24, 0x00	; 0
     ed4:	2a ef       	ldi	r18, 0xFA	; 250
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	d8 01       	movw	r26, r16
     eda:	17 96       	adiw	r26, 0x07	; 7
     edc:	ed 91       	ld	r30, X+
     ede:	fc 91       	ld	r31, X
     ee0:	18 97       	sbiw	r26, 0x08	; 8
     ee2:	e8 0f       	add	r30, r24
     ee4:	f1 1d       	adc	r31, r1
     ee6:	90 81       	ld	r25, Z
     ee8:	f9 01       	movw	r30, r18
     eea:	90 83       	st	Z, r25
     eec:	8f 5f       	subi	r24, 0xFF	; 255
     eee:	16 96       	adiw	r26, 0x06	; 6
     ef0:	9c 91       	ld	r25, X
     ef2:	89 17       	cp	r24, r25
     ef4:	88 f3       	brcs	.-30     	; 0xed8 <can_cmd+0x238>
          cmd->ctrl.rtr=0; Can_clear_rtr();
     ef6:	d8 01       	movw	r26, r16
     ef8:	1a 96       	adiw	r26, 0x0a	; 10
     efa:	1c 92       	st	X, r1
     efc:	1a 97       	sbiw	r26, 0x0a	; 10
     efe:	e0 ef       	ldi	r30, 0xF0	; 240
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	8b 7f       	andi	r24, 0xFB	; 251
     f06:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     f08:	ef ee       	ldi	r30, 0xEF	; 239
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	90 81       	ld	r25, Z
     f0e:	16 96       	adiw	r26, 0x06	; 6
     f10:	8c 91       	ld	r24, X
     f12:	89 2b       	or	r24, r25
     f14:	80 83       	st	Z, r24
          Can_config_tx();
     f16:	80 81       	ld	r24, Z
     f18:	8f 73       	andi	r24, 0x3F	; 63
     f1a:	80 83       	st	Z, r24
     f1c:	80 81       	ld	r24, Z
     f1e:	80 64       	ori	r24, 0x40	; 64
     f20:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     f22:	80 e0       	ldi	r24, 0x00	; 0
          else              { Can_set_std_id(cmd->id.std);}
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          cmd->ctrl.rtr=0; Can_clear_rtr();
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     f24:	e3 c3       	rjmp	.+1990   	; 0x16ec <__stack+0x5ed>
        //------------      
        case CMD_TX_REMOTE:       
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     f26:	f8 01       	movw	r30, r16
     f28:	83 85       	ldd	r24, Z+11	; 0x0b
     f2a:	88 23       	and	r24, r24
     f2c:	69 f1       	breq	.+90     	; 0xf88 <can_cmd+0x2e8>
     f2e:	94 81       	ldd	r25, Z+4	; 0x04
     f30:	92 95       	swap	r25
     f32:	96 95       	lsr	r25
     f34:	97 70       	andi	r25, 0x07	; 7
     f36:	85 81       	ldd	r24, Z+5	; 0x05
     f38:	88 0f       	add	r24, r24
     f3a:	88 0f       	add	r24, r24
     f3c:	88 0f       	add	r24, r24
     f3e:	89 0f       	add	r24, r25
     f40:	80 93 f3 00 	sts	0x00F3, r24
     f44:	93 81       	ldd	r25, Z+3	; 0x03
     f46:	92 95       	swap	r25
     f48:	96 95       	lsr	r25
     f4a:	97 70       	andi	r25, 0x07	; 7
     f4c:	84 81       	ldd	r24, Z+4	; 0x04
     f4e:	88 0f       	add	r24, r24
     f50:	88 0f       	add	r24, r24
     f52:	88 0f       	add	r24, r24
     f54:	89 0f       	add	r24, r25
     f56:	80 93 f2 00 	sts	0x00F2, r24
     f5a:	92 81       	ldd	r25, Z+2	; 0x02
     f5c:	92 95       	swap	r25
     f5e:	96 95       	lsr	r25
     f60:	97 70       	andi	r25, 0x07	; 7
     f62:	83 81       	ldd	r24, Z+3	; 0x03
     f64:	88 0f       	add	r24, r24
     f66:	88 0f       	add	r24, r24
     f68:	88 0f       	add	r24, r24
     f6a:	89 0f       	add	r24, r25
     f6c:	80 93 f1 00 	sts	0x00F1, r24
     f70:	82 81       	ldd	r24, Z+2	; 0x02
     f72:	88 0f       	add	r24, r24
     f74:	88 0f       	add	r24, r24
     f76:	88 0f       	add	r24, r24
     f78:	80 93 f0 00 	sts	0x00F0, r24
     f7c:	ef ee       	ldi	r30, 0xEF	; 239
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	80 61       	ori	r24, 0x10	; 16
     f84:	80 83       	st	Z, r24
     f86:	17 c0       	rjmp	.+46     	; 0xfb6 <can_cmd+0x316>
          else              { Can_set_std_id(cmd->id.std);}
     f88:	82 81       	ldd	r24, Z+2	; 0x02
     f8a:	86 95       	lsr	r24
     f8c:	86 95       	lsr	r24
     f8e:	86 95       	lsr	r24
     f90:	93 81       	ldd	r25, Z+3	; 0x03
     f92:	b0 e2       	ldi	r27, 0x20	; 32
     f94:	9b 9f       	mul	r25, r27
     f96:	80 0d       	add	r24, r0
     f98:	11 24       	eor	r1, r1
     f9a:	80 93 f3 00 	sts	0x00F3, r24
     f9e:	f8 01       	movw	r30, r16
     fa0:	82 81       	ldd	r24, Z+2	; 0x02
     fa2:	82 95       	swap	r24
     fa4:	88 0f       	add	r24, r24
     fa6:	80 7e       	andi	r24, 0xE0	; 224
     fa8:	80 93 f2 00 	sts	0x00F2, r24
     fac:	ef ee       	ldi	r30, 0xEF	; 239
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	8f 7e       	andi	r24, 0xEF	; 239
     fb4:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtr();
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	d8 01       	movw	r26, r16
     fba:	1a 96       	adiw	r26, 0x0a	; 10
     fbc:	8c 93       	st	X, r24
     fbe:	1a 97       	sbiw	r26, 0x0a	; 10
     fc0:	e0 ef       	ldi	r30, 0xF0	; 240
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	84 60       	ori	r24, 0x04	; 4
     fc8:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     fca:	ef ee       	ldi	r30, 0xEF	; 239
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	90 81       	ld	r25, Z
     fd0:	16 96       	adiw	r26, 0x06	; 6
     fd2:	8c 91       	ld	r24, X
     fd4:	89 2b       	or	r24, r25
     fd6:	80 83       	st	Z, r24
          Can_config_tx();
     fd8:	80 81       	ld	r24, Z
     fda:	8f 73       	andi	r24, 0x3F	; 63
     fdc:	80 83       	st	Z, r24
     fde:	80 81       	ld	r24, Z
     fe0:	80 64       	ori	r24, 0x40	; 64
     fe2:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     fe4:	80 e0       	ldi	r24, 0x00	; 0
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
          cmd->ctrl.rtr=1; Can_set_rtr();
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     fe6:	82 c3       	rjmp	.+1796   	; 0x16ec <__stack+0x5ed>
        //------------      
        case CMD_RX:
          u32_temp=0; Can_set_ext_msk(u32_temp);
     fe8:	19 82       	std	Y+1, r1	; 0x01
     fea:	1a 82       	std	Y+2, r1	; 0x02
     fec:	1b 82       	std	Y+3, r1	; 0x03
     fee:	1c 82       	std	Y+4, r1	; 0x04
     ff0:	10 92 f7 00 	sts	0x00F7, r1
     ff4:	9a 81       	ldd	r25, Y+2	; 0x02
     ff6:	92 95       	swap	r25
     ff8:	96 95       	lsr	r25
     ffa:	97 70       	andi	r25, 0x07	; 7
     ffc:	8b 81       	ldd	r24, Y+3	; 0x03
     ffe:	88 0f       	add	r24, r24
    1000:	88 0f       	add	r24, r24
    1002:	88 0f       	add	r24, r24
    1004:	89 0f       	add	r24, r25
    1006:	80 93 f6 00 	sts	0x00F6, r24
    100a:	99 81       	ldd	r25, Y+1	; 0x01
    100c:	92 95       	swap	r25
    100e:	96 95       	lsr	r25
    1010:	97 70       	andi	r25, 0x07	; 7
    1012:	8a 81       	ldd	r24, Y+2	; 0x02
    1014:	88 0f       	add	r24, r24
    1016:	88 0f       	add	r24, r24
    1018:	88 0f       	add	r24, r24
    101a:	89 0f       	add	r24, r25
    101c:	80 93 f5 00 	sts	0x00F5, r24
    1020:	89 81       	ldd	r24, Y+1	; 0x01
    1022:	88 0f       	add	r24, r24
    1024:	88 0f       	add	r24, r24
    1026:	88 0f       	add	r24, r24
    1028:	24 ef       	ldi	r18, 0xF4	; 244
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	f9 01       	movw	r30, r18
    102e:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
    1030:	ef ee       	ldi	r30, 0xEF	; 239
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	90 81       	ld	r25, Z
    1036:	d8 01       	movw	r26, r16
    1038:	16 96       	adiw	r26, 0x06	; 6
    103a:	8c 91       	ld	r24, X
    103c:	89 2b       	or	r24, r25
    103e:	80 83       	st	Z, r24
          Can_clear_rtrmsk();
    1040:	d9 01       	movw	r26, r18
    1042:	8c 91       	ld	r24, X
    1044:	8b 7f       	andi	r24, 0xFB	; 251
    1046:	8c 93       	st	X, r24
          Can_clear_idemsk();
    1048:	8c 91       	ld	r24, X
    104a:	8e 7f       	andi	r24, 0xFE	; 254
    104c:	8c 93       	st	X, r24
          Can_config_rx();       
    104e:	80 81       	ld	r24, Z
    1050:	8f 73       	andi	r24, 0x3F	; 63
    1052:	80 83       	st	Z, r24
    1054:	80 81       	ld	r24, Z
    1056:	80 68       	ori	r24, 0x80	; 128
    1058:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    105a:	80 e0       	ldi	r24, 0x00	; 0
          u32_temp=0; Can_set_ext_msk(u32_temp);
          Can_set_dlc(cmd->dlc);
          Can_clear_rtrmsk();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
    105c:	47 c3       	rjmp	.+1678   	; 0x16ec <__stack+0x5ed>
        //------------      
        case CMD_RX_DATA:
          u32_temp=0; Can_set_ext_msk(u32_temp);
    105e:	19 82       	std	Y+1, r1	; 0x01
    1060:	1a 82       	std	Y+2, r1	; 0x02
    1062:	1b 82       	std	Y+3, r1	; 0x03
    1064:	1c 82       	std	Y+4, r1	; 0x04
    1066:	10 92 f7 00 	sts	0x00F7, r1
    106a:	9a 81       	ldd	r25, Y+2	; 0x02
    106c:	92 95       	swap	r25
    106e:	96 95       	lsr	r25
    1070:	97 70       	andi	r25, 0x07	; 7
    1072:	8b 81       	ldd	r24, Y+3	; 0x03
    1074:	88 0f       	add	r24, r24
    1076:	88 0f       	add	r24, r24
    1078:	88 0f       	add	r24, r24
    107a:	89 0f       	add	r24, r25
    107c:	80 93 f6 00 	sts	0x00F6, r24
    1080:	99 81       	ldd	r25, Y+1	; 0x01
    1082:	92 95       	swap	r25
    1084:	96 95       	lsr	r25
    1086:	97 70       	andi	r25, 0x07	; 7
    1088:	8a 81       	ldd	r24, Y+2	; 0x02
    108a:	88 0f       	add	r24, r24
    108c:	88 0f       	add	r24, r24
    108e:	88 0f       	add	r24, r24
    1090:	89 0f       	add	r24, r25
    1092:	80 93 f5 00 	sts	0x00F5, r24
    1096:	89 81       	ldd	r24, Y+1	; 0x01
    1098:	88 0f       	add	r24, r24
    109a:	88 0f       	add	r24, r24
    109c:	88 0f       	add	r24, r24
    109e:	44 ef       	ldi	r20, 0xF4	; 244
    10a0:	50 e0       	ldi	r21, 0x00	; 0
    10a2:	fa 01       	movw	r30, r20
    10a4:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
    10a6:	ef ee       	ldi	r30, 0xEF	; 239
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	90 81       	ld	r25, Z
    10ac:	d8 01       	movw	r26, r16
    10ae:	16 96       	adiw	r26, 0x06	; 6
    10b0:	8c 91       	ld	r24, X
    10b2:	16 97       	sbiw	r26, 0x06	; 6
    10b4:	89 2b       	or	r24, r25
    10b6:	80 83       	st	Z, r24
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
    10b8:	1a 96       	adiw	r26, 0x0a	; 10
    10ba:	1c 92       	st	X, r1
    10bc:	da 01       	movw	r26, r20
    10be:	8c 91       	ld	r24, X
    10c0:	84 60       	ori	r24, 0x04	; 4
    10c2:	8c 93       	st	X, r24
    10c4:	80 ef       	ldi	r24, 0xF0	; 240
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	dc 01       	movw	r26, r24
    10ca:	2c 91       	ld	r18, X
    10cc:	2b 7f       	andi	r18, 0xFB	; 251
    10ce:	2c 93       	st	X, r18
          Can_clear_idemsk();
    10d0:	da 01       	movw	r26, r20
    10d2:	8c 91       	ld	r24, X
    10d4:	8e 7f       	andi	r24, 0xFE	; 254
    10d6:	8c 93       	st	X, r24
          Can_config_rx();       
    10d8:	80 81       	ld	r24, Z
    10da:	8f 73       	andi	r24, 0x3F	; 63
    10dc:	80 83       	st	Z, r24
    10de:	80 81       	ld	r24, Z
    10e0:	80 68       	ori	r24, 0x80	; 128
    10e2:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    10e4:	80 e0       	ldi	r24, 0x00	; 0
          u32_temp=0; Can_set_ext_msk(u32_temp);
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
    10e6:	02 c3       	rjmp	.+1540   	; 0x16ec <__stack+0x5ed>
        //------------      
        case CMD_RX_REMOTE:
          u32_temp=0; Can_set_ext_msk(u32_temp);
    10e8:	19 82       	std	Y+1, r1	; 0x01
    10ea:	1a 82       	std	Y+2, r1	; 0x02
    10ec:	1b 82       	std	Y+3, r1	; 0x03
    10ee:	1c 82       	std	Y+4, r1	; 0x04
    10f0:	10 92 f7 00 	sts	0x00F7, r1
    10f4:	9a 81       	ldd	r25, Y+2	; 0x02
    10f6:	92 95       	swap	r25
    10f8:	96 95       	lsr	r25
    10fa:	97 70       	andi	r25, 0x07	; 7
    10fc:	8b 81       	ldd	r24, Y+3	; 0x03
    10fe:	88 0f       	add	r24, r24
    1100:	88 0f       	add	r24, r24
    1102:	88 0f       	add	r24, r24
    1104:	89 0f       	add	r24, r25
    1106:	80 93 f6 00 	sts	0x00F6, r24
    110a:	99 81       	ldd	r25, Y+1	; 0x01
    110c:	92 95       	swap	r25
    110e:	96 95       	lsr	r25
    1110:	97 70       	andi	r25, 0x07	; 7
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	88 0f       	add	r24, r24
    1116:	88 0f       	add	r24, r24
    1118:	88 0f       	add	r24, r24
    111a:	89 0f       	add	r24, r25
    111c:	80 93 f5 00 	sts	0x00F5, r24
    1120:	89 81       	ldd	r24, Y+1	; 0x01
    1122:	88 0f       	add	r24, r24
    1124:	88 0f       	add	r24, r24
    1126:	88 0f       	add	r24, r24
    1128:	44 ef       	ldi	r20, 0xF4	; 244
    112a:	50 e0       	ldi	r21, 0x00	; 0
    112c:	fa 01       	movw	r30, r20
    112e:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
    1130:	ef ee       	ldi	r30, 0xEF	; 239
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	90 81       	ld	r25, Z
    1136:	d8 01       	movw	r26, r16
    1138:	16 96       	adiw	r26, 0x06	; 6
    113a:	8c 91       	ld	r24, X
    113c:	16 97       	sbiw	r26, 0x06	; 6
    113e:	89 2b       	or	r24, r25
    1140:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	1a 96       	adiw	r26, 0x0a	; 10
    1146:	8c 93       	st	X, r24
    1148:	da 01       	movw	r26, r20
    114a:	8c 91       	ld	r24, X
    114c:	84 60       	ori	r24, 0x04	; 4
    114e:	8c 93       	st	X, r24
    1150:	80 ef       	ldi	r24, 0xF0	; 240
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	dc 01       	movw	r26, r24
    1156:	2c 91       	ld	r18, X
    1158:	24 60       	ori	r18, 0x04	; 4
    115a:	2c 93       	st	X, r18
          Can_clear_rplv();
    115c:	80 81       	ld	r24, Z
    115e:	8f 7d       	andi	r24, 0xDF	; 223
    1160:	80 83       	st	Z, r24
          Can_clear_idemsk();
    1162:	da 01       	movw	r26, r20
    1164:	8c 91       	ld	r24, X
    1166:	8e 7f       	andi	r24, 0xFE	; 254
    1168:	8c 93       	st	X, r24
          Can_config_rx();       
    116a:	80 81       	ld	r24, Z
    116c:	8f 73       	andi	r24, 0x3F	; 63
    116e:	80 83       	st	Z, r24
    1170:	80 81       	ld	r24, Z
    1172:	80 68       	ori	r24, 0x80	; 128
    1174:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    1176:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_clear_rplv();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
    1178:	b9 c2       	rjmp	.+1394   	; 0x16ec <__stack+0x5ed>
        //------------      
        case CMD_RX_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    117a:	f8 01       	movw	r30, r16
    117c:	83 85       	ldd	r24, Z+11	; 0x0b
    117e:	88 23       	and	r24, r24
    1180:	69 f1       	breq	.+90     	; 0x11dc <__stack+0xdd>
    1182:	94 81       	ldd	r25, Z+4	; 0x04
    1184:	92 95       	swap	r25
    1186:	96 95       	lsr	r25
    1188:	97 70       	andi	r25, 0x07	; 7
    118a:	85 81       	ldd	r24, Z+5	; 0x05
    118c:	88 0f       	add	r24, r24
    118e:	88 0f       	add	r24, r24
    1190:	88 0f       	add	r24, r24
    1192:	89 0f       	add	r24, r25
    1194:	80 93 f3 00 	sts	0x00F3, r24
    1198:	93 81       	ldd	r25, Z+3	; 0x03
    119a:	92 95       	swap	r25
    119c:	96 95       	lsr	r25
    119e:	97 70       	andi	r25, 0x07	; 7
    11a0:	84 81       	ldd	r24, Z+4	; 0x04
    11a2:	88 0f       	add	r24, r24
    11a4:	88 0f       	add	r24, r24
    11a6:	88 0f       	add	r24, r24
    11a8:	89 0f       	add	r24, r25
    11aa:	80 93 f2 00 	sts	0x00F2, r24
    11ae:	92 81       	ldd	r25, Z+2	; 0x02
    11b0:	92 95       	swap	r25
    11b2:	96 95       	lsr	r25
    11b4:	97 70       	andi	r25, 0x07	; 7
    11b6:	83 81       	ldd	r24, Z+3	; 0x03
    11b8:	88 0f       	add	r24, r24
    11ba:	88 0f       	add	r24, r24
    11bc:	88 0f       	add	r24, r24
    11be:	89 0f       	add	r24, r25
    11c0:	80 93 f1 00 	sts	0x00F1, r24
    11c4:	82 81       	ldd	r24, Z+2	; 0x02
    11c6:	88 0f       	add	r24, r24
    11c8:	88 0f       	add	r24, r24
    11ca:	88 0f       	add	r24, r24
    11cc:	80 93 f0 00 	sts	0x00F0, r24
    11d0:	ef ee       	ldi	r30, 0xEF	; 239
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
    11d6:	80 61       	ori	r24, 0x10	; 16
    11d8:	80 83       	st	Z, r24
    11da:	17 c0       	rjmp	.+46     	; 0x120a <__stack+0x10b>
          else              { Can_set_std_id(cmd->id.std);}
    11dc:	82 81       	ldd	r24, Z+2	; 0x02
    11de:	86 95       	lsr	r24
    11e0:	86 95       	lsr	r24
    11e2:	86 95       	lsr	r24
    11e4:	93 81       	ldd	r25, Z+3	; 0x03
    11e6:	b0 e2       	ldi	r27, 0x20	; 32
    11e8:	9b 9f       	mul	r25, r27
    11ea:	80 0d       	add	r24, r0
    11ec:	11 24       	eor	r1, r1
    11ee:	80 93 f3 00 	sts	0x00F3, r24
    11f2:	f8 01       	movw	r30, r16
    11f4:	82 81       	ldd	r24, Z+2	; 0x02
    11f6:	82 95       	swap	r24
    11f8:	88 0f       	add	r24, r24
    11fa:	80 7e       	andi	r24, 0xE0	; 224
    11fc:	80 93 f2 00 	sts	0x00F2, r24
    1200:	ef ee       	ldi	r30, 0xEF	; 239
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	8f 7e       	andi	r24, 0xEF	; 239
    1208:	80 83       	st	Z, r24
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    120a:	8f ef       	ldi	r24, 0xFF	; 255
    120c:	9f ef       	ldi	r25, 0xFF	; 255
    120e:	dc 01       	movw	r26, r24
    1210:	89 83       	std	Y+1, r24	; 0x01
    1212:	9a 83       	std	Y+2, r25	; 0x02
    1214:	ab 83       	std	Y+3, r26	; 0x03
    1216:	bc 83       	std	Y+4, r27	; 0x04
    1218:	80 93 f7 00 	sts	0x00F7, r24
    121c:	9a 81       	ldd	r25, Y+2	; 0x02
    121e:	92 95       	swap	r25
    1220:	96 95       	lsr	r25
    1222:	97 70       	andi	r25, 0x07	; 7
    1224:	8b 81       	ldd	r24, Y+3	; 0x03
    1226:	88 0f       	add	r24, r24
    1228:	88 0f       	add	r24, r24
    122a:	88 0f       	add	r24, r24
    122c:	89 0f       	add	r24, r25
    122e:	80 93 f6 00 	sts	0x00F6, r24
    1232:	99 81       	ldd	r25, Y+1	; 0x01
    1234:	92 95       	swap	r25
    1236:	96 95       	lsr	r25
    1238:	97 70       	andi	r25, 0x07	; 7
    123a:	8a 81       	ldd	r24, Y+2	; 0x02
    123c:	88 0f       	add	r24, r24
    123e:	88 0f       	add	r24, r24
    1240:	88 0f       	add	r24, r24
    1242:	89 0f       	add	r24, r25
    1244:	80 93 f5 00 	sts	0x00F5, r24
    1248:	89 81       	ldd	r24, Y+1	; 0x01
    124a:	88 0f       	add	r24, r24
    124c:	88 0f       	add	r24, r24
    124e:	88 0f       	add	r24, r24
    1250:	24 ef       	ldi	r18, 0xF4	; 244
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	d9 01       	movw	r26, r18
    1256:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
    1258:	ef ee       	ldi	r30, 0xEF	; 239
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	90 81       	ld	r25, Z
    125e:	d8 01       	movw	r26, r16
    1260:	16 96       	adiw	r26, 0x06	; 6
    1262:	8c 91       	ld	r24, X
    1264:	89 2b       	or	r24, r25
    1266:	80 83       	st	Z, r24
          Can_clear_rtrmsk();
    1268:	d9 01       	movw	r26, r18
    126a:	8c 91       	ld	r24, X
    126c:	8b 7f       	andi	r24, 0xFB	; 251
    126e:	8c 93       	st	X, r24
          Can_set_idemsk();
    1270:	8c 91       	ld	r24, X
    1272:	81 60       	ori	r24, 0x01	; 1
    1274:	8c 93       	st	X, r24
          Can_config_rx();       
    1276:	80 81       	ld	r24, Z
    1278:	8f 73       	andi	r24, 0x3F	; 63
    127a:	80 83       	st	Z, r24
    127c:	80 81       	ld	r24, Z
    127e:	80 68       	ori	r24, 0x80	; 128
    1280:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    1282:	80 e0       	ldi	r24, 0x00	; 0
          u32_temp=~0; Can_set_ext_msk(u32_temp);
          Can_set_dlc(cmd->dlc);
          Can_clear_rtrmsk();
          Can_set_idemsk();
          Can_config_rx();       
          break;
    1284:	33 c2       	rjmp	.+1126   	; 0x16ec <__stack+0x5ed>
        //------------      
        case CMD_RX_DATA_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    1286:	f8 01       	movw	r30, r16
    1288:	83 85       	ldd	r24, Z+11	; 0x0b
    128a:	88 23       	and	r24, r24
    128c:	69 f1       	breq	.+90     	; 0x12e8 <__stack+0x1e9>
    128e:	94 81       	ldd	r25, Z+4	; 0x04
    1290:	92 95       	swap	r25
    1292:	96 95       	lsr	r25
    1294:	97 70       	andi	r25, 0x07	; 7
    1296:	85 81       	ldd	r24, Z+5	; 0x05
    1298:	88 0f       	add	r24, r24
    129a:	88 0f       	add	r24, r24
    129c:	88 0f       	add	r24, r24
    129e:	89 0f       	add	r24, r25
    12a0:	80 93 f3 00 	sts	0x00F3, r24
    12a4:	93 81       	ldd	r25, Z+3	; 0x03
    12a6:	92 95       	swap	r25
    12a8:	96 95       	lsr	r25
    12aa:	97 70       	andi	r25, 0x07	; 7
    12ac:	84 81       	ldd	r24, Z+4	; 0x04
    12ae:	88 0f       	add	r24, r24
    12b0:	88 0f       	add	r24, r24
    12b2:	88 0f       	add	r24, r24
    12b4:	89 0f       	add	r24, r25
    12b6:	80 93 f2 00 	sts	0x00F2, r24
    12ba:	92 81       	ldd	r25, Z+2	; 0x02
    12bc:	92 95       	swap	r25
    12be:	96 95       	lsr	r25
    12c0:	97 70       	andi	r25, 0x07	; 7
    12c2:	83 81       	ldd	r24, Z+3	; 0x03
    12c4:	88 0f       	add	r24, r24
    12c6:	88 0f       	add	r24, r24
    12c8:	88 0f       	add	r24, r24
    12ca:	89 0f       	add	r24, r25
    12cc:	80 93 f1 00 	sts	0x00F1, r24
    12d0:	82 81       	ldd	r24, Z+2	; 0x02
    12d2:	88 0f       	add	r24, r24
    12d4:	88 0f       	add	r24, r24
    12d6:	88 0f       	add	r24, r24
    12d8:	80 93 f0 00 	sts	0x00F0, r24
    12dc:	ef ee       	ldi	r30, 0xEF	; 239
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	80 81       	ld	r24, Z
    12e2:	80 61       	ori	r24, 0x10	; 16
    12e4:	80 83       	st	Z, r24
    12e6:	17 c0       	rjmp	.+46     	; 0x1316 <__stack+0x217>
          else              { Can_set_std_id(cmd->id.std);}
    12e8:	82 81       	ldd	r24, Z+2	; 0x02
    12ea:	86 95       	lsr	r24
    12ec:	86 95       	lsr	r24
    12ee:	86 95       	lsr	r24
    12f0:	93 81       	ldd	r25, Z+3	; 0x03
    12f2:	b0 e2       	ldi	r27, 0x20	; 32
    12f4:	9b 9f       	mul	r25, r27
    12f6:	80 0d       	add	r24, r0
    12f8:	11 24       	eor	r1, r1
    12fa:	80 93 f3 00 	sts	0x00F3, r24
    12fe:	f8 01       	movw	r30, r16
    1300:	82 81       	ldd	r24, Z+2	; 0x02
    1302:	82 95       	swap	r24
    1304:	88 0f       	add	r24, r24
    1306:	80 7e       	andi	r24, 0xE0	; 224
    1308:	80 93 f2 00 	sts	0x00F2, r24
    130c:	ef ee       	ldi	r30, 0xEF	; 239
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	80 81       	ld	r24, Z
    1312:	8f 7e       	andi	r24, 0xEF	; 239
    1314:	80 83       	st	Z, r24
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    1316:	8f ef       	ldi	r24, 0xFF	; 255
    1318:	9f ef       	ldi	r25, 0xFF	; 255
    131a:	dc 01       	movw	r26, r24
    131c:	89 83       	std	Y+1, r24	; 0x01
    131e:	9a 83       	std	Y+2, r25	; 0x02
    1320:	ab 83       	std	Y+3, r26	; 0x03
    1322:	bc 83       	std	Y+4, r27	; 0x04
    1324:	80 93 f7 00 	sts	0x00F7, r24
    1328:	9a 81       	ldd	r25, Y+2	; 0x02
    132a:	92 95       	swap	r25
    132c:	96 95       	lsr	r25
    132e:	97 70       	andi	r25, 0x07	; 7
    1330:	8b 81       	ldd	r24, Y+3	; 0x03
    1332:	88 0f       	add	r24, r24
    1334:	88 0f       	add	r24, r24
    1336:	88 0f       	add	r24, r24
    1338:	89 0f       	add	r24, r25
    133a:	80 93 f6 00 	sts	0x00F6, r24
    133e:	99 81       	ldd	r25, Y+1	; 0x01
    1340:	92 95       	swap	r25
    1342:	96 95       	lsr	r25
    1344:	97 70       	andi	r25, 0x07	; 7
    1346:	8a 81       	ldd	r24, Y+2	; 0x02
    1348:	88 0f       	add	r24, r24
    134a:	88 0f       	add	r24, r24
    134c:	88 0f       	add	r24, r24
    134e:	89 0f       	add	r24, r25
    1350:	80 93 f5 00 	sts	0x00F5, r24
    1354:	89 81       	ldd	r24, Y+1	; 0x01
    1356:	88 0f       	add	r24, r24
    1358:	88 0f       	add	r24, r24
    135a:	88 0f       	add	r24, r24
    135c:	44 ef       	ldi	r20, 0xF4	; 244
    135e:	50 e0       	ldi	r21, 0x00	; 0
    1360:	da 01       	movw	r26, r20
    1362:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
    1364:	ef ee       	ldi	r30, 0xEF	; 239
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	90 81       	ld	r25, Z
    136a:	d8 01       	movw	r26, r16
    136c:	16 96       	adiw	r26, 0x06	; 6
    136e:	8c 91       	ld	r24, X
    1370:	16 97       	sbiw	r26, 0x06	; 6
    1372:	89 2b       	or	r24, r25
    1374:	80 83       	st	Z, r24
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
    1376:	1a 96       	adiw	r26, 0x0a	; 10
    1378:	1c 92       	st	X, r1
    137a:	da 01       	movw	r26, r20
    137c:	8c 91       	ld	r24, X
    137e:	84 60       	ori	r24, 0x04	; 4
    1380:	8c 93       	st	X, r24
    1382:	80 ef       	ldi	r24, 0xF0	; 240
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	dc 01       	movw	r26, r24
    1388:	2c 91       	ld	r18, X
    138a:	2b 7f       	andi	r18, 0xFB	; 251
    138c:	2c 93       	st	X, r18
          Can_set_idemsk();
    138e:	da 01       	movw	r26, r20
    1390:	8c 91       	ld	r24, X
    1392:	81 60       	ori	r24, 0x01	; 1
    1394:	8c 93       	st	X, r24
          Can_config_rx();       
    1396:	80 81       	ld	r24, Z
    1398:	8f 73       	andi	r24, 0x3F	; 63
    139a:	80 83       	st	Z, r24
    139c:	80 81       	ld	r24, Z
    139e:	80 68       	ori	r24, 0x80	; 128
    13a0:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    13a2:	80 e0       	ldi	r24, 0x00	; 0
          u32_temp=~0; Can_set_ext_msk(u32_temp);
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
          Can_set_idemsk();
          Can_config_rx();       
          break;
    13a4:	a3 c1       	rjmp	.+838    	; 0x16ec <__stack+0x5ed>
        //------------      
        case CMD_RX_REMOTE_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    13a6:	f8 01       	movw	r30, r16
    13a8:	83 85       	ldd	r24, Z+11	; 0x0b
    13aa:	88 23       	and	r24, r24
    13ac:	69 f1       	breq	.+90     	; 0x1408 <__stack+0x309>
    13ae:	94 81       	ldd	r25, Z+4	; 0x04
    13b0:	92 95       	swap	r25
    13b2:	96 95       	lsr	r25
    13b4:	97 70       	andi	r25, 0x07	; 7
    13b6:	85 81       	ldd	r24, Z+5	; 0x05
    13b8:	88 0f       	add	r24, r24
    13ba:	88 0f       	add	r24, r24
    13bc:	88 0f       	add	r24, r24
    13be:	89 0f       	add	r24, r25
    13c0:	80 93 f3 00 	sts	0x00F3, r24
    13c4:	93 81       	ldd	r25, Z+3	; 0x03
    13c6:	92 95       	swap	r25
    13c8:	96 95       	lsr	r25
    13ca:	97 70       	andi	r25, 0x07	; 7
    13cc:	84 81       	ldd	r24, Z+4	; 0x04
    13ce:	88 0f       	add	r24, r24
    13d0:	88 0f       	add	r24, r24
    13d2:	88 0f       	add	r24, r24
    13d4:	89 0f       	add	r24, r25
    13d6:	80 93 f2 00 	sts	0x00F2, r24
    13da:	92 81       	ldd	r25, Z+2	; 0x02
    13dc:	92 95       	swap	r25
    13de:	96 95       	lsr	r25
    13e0:	97 70       	andi	r25, 0x07	; 7
    13e2:	83 81       	ldd	r24, Z+3	; 0x03
    13e4:	88 0f       	add	r24, r24
    13e6:	88 0f       	add	r24, r24
    13e8:	88 0f       	add	r24, r24
    13ea:	89 0f       	add	r24, r25
    13ec:	80 93 f1 00 	sts	0x00F1, r24
    13f0:	82 81       	ldd	r24, Z+2	; 0x02
    13f2:	88 0f       	add	r24, r24
    13f4:	88 0f       	add	r24, r24
    13f6:	88 0f       	add	r24, r24
    13f8:	80 93 f0 00 	sts	0x00F0, r24
    13fc:	ef ee       	ldi	r30, 0xEF	; 239
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	80 81       	ld	r24, Z
    1402:	80 61       	ori	r24, 0x10	; 16
    1404:	80 83       	st	Z, r24
    1406:	17 c0       	rjmp	.+46     	; 0x1436 <__stack+0x337>
          else              { Can_set_std_id(cmd->id.std);}
    1408:	82 81       	ldd	r24, Z+2	; 0x02
    140a:	86 95       	lsr	r24
    140c:	86 95       	lsr	r24
    140e:	86 95       	lsr	r24
    1410:	93 81       	ldd	r25, Z+3	; 0x03
    1412:	b0 e2       	ldi	r27, 0x20	; 32
    1414:	9b 9f       	mul	r25, r27
    1416:	80 0d       	add	r24, r0
    1418:	11 24       	eor	r1, r1
    141a:	80 93 f3 00 	sts	0x00F3, r24
    141e:	f8 01       	movw	r30, r16
    1420:	82 81       	ldd	r24, Z+2	; 0x02
    1422:	82 95       	swap	r24
    1424:	88 0f       	add	r24, r24
    1426:	80 7e       	andi	r24, 0xE0	; 224
    1428:	80 93 f2 00 	sts	0x00F2, r24
    142c:	ef ee       	ldi	r30, 0xEF	; 239
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	80 81       	ld	r24, Z
    1432:	8f 7e       	andi	r24, 0xEF	; 239
    1434:	80 83       	st	Z, r24
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    1436:	8f ef       	ldi	r24, 0xFF	; 255
    1438:	9f ef       	ldi	r25, 0xFF	; 255
    143a:	dc 01       	movw	r26, r24
    143c:	89 83       	std	Y+1, r24	; 0x01
    143e:	9a 83       	std	Y+2, r25	; 0x02
    1440:	ab 83       	std	Y+3, r26	; 0x03
    1442:	bc 83       	std	Y+4, r27	; 0x04
    1444:	80 93 f7 00 	sts	0x00F7, r24
    1448:	9a 81       	ldd	r25, Y+2	; 0x02
    144a:	92 95       	swap	r25
    144c:	96 95       	lsr	r25
    144e:	97 70       	andi	r25, 0x07	; 7
    1450:	8b 81       	ldd	r24, Y+3	; 0x03
    1452:	88 0f       	add	r24, r24
    1454:	88 0f       	add	r24, r24
    1456:	88 0f       	add	r24, r24
    1458:	89 0f       	add	r24, r25
    145a:	80 93 f6 00 	sts	0x00F6, r24
    145e:	99 81       	ldd	r25, Y+1	; 0x01
    1460:	92 95       	swap	r25
    1462:	96 95       	lsr	r25
    1464:	97 70       	andi	r25, 0x07	; 7
    1466:	8a 81       	ldd	r24, Y+2	; 0x02
    1468:	88 0f       	add	r24, r24
    146a:	88 0f       	add	r24, r24
    146c:	88 0f       	add	r24, r24
    146e:	89 0f       	add	r24, r25
    1470:	80 93 f5 00 	sts	0x00F5, r24
    1474:	89 81       	ldd	r24, Y+1	; 0x01
    1476:	88 0f       	add	r24, r24
    1478:	88 0f       	add	r24, r24
    147a:	88 0f       	add	r24, r24
    147c:	44 ef       	ldi	r20, 0xF4	; 244
    147e:	50 e0       	ldi	r21, 0x00	; 0
    1480:	da 01       	movw	r26, r20
    1482:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
    1484:	ef ee       	ldi	r30, 0xEF	; 239
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	90 81       	ld	r25, Z
    148a:	d8 01       	movw	r26, r16
    148c:	16 96       	adiw	r26, 0x06	; 6
    148e:	8c 91       	ld	r24, X
    1490:	16 97       	sbiw	r26, 0x06	; 6
    1492:	89 2b       	or	r24, r25
    1494:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	1a 96       	adiw	r26, 0x0a	; 10
    149a:	8c 93       	st	X, r24
    149c:	da 01       	movw	r26, r20
    149e:	8c 91       	ld	r24, X
    14a0:	84 60       	ori	r24, 0x04	; 4
    14a2:	8c 93       	st	X, r24
    14a4:	80 ef       	ldi	r24, 0xF0	; 240
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	dc 01       	movw	r26, r24
    14aa:	2c 91       	ld	r18, X
    14ac:	24 60       	ori	r18, 0x04	; 4
    14ae:	2c 93       	st	X, r18
          Can_clear_rplv();
    14b0:	80 81       	ld	r24, Z
    14b2:	8f 7d       	andi	r24, 0xDF	; 223
    14b4:	80 83       	st	Z, r24
          Can_set_idemsk();
    14b6:	da 01       	movw	r26, r20
    14b8:	8c 91       	ld	r24, X
    14ba:	81 60       	ori	r24, 0x01	; 1
    14bc:	8c 93       	st	X, r24
          Can_config_rx();       
    14be:	80 81       	ld	r24, Z
    14c0:	8f 73       	andi	r24, 0x3F	; 63
    14c2:	80 83       	st	Z, r24
    14c4:	80 81       	ld	r24, Z
    14c6:	80 68       	ori	r24, 0x80	; 128
    14c8:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    14ca:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_clear_rplv();
          Can_set_idemsk();
          Can_config_rx();       
          break;
    14cc:	0f c1       	rjmp	.+542    	; 0x16ec <__stack+0x5ed>
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    14ce:	80 e0       	ldi	r24, 0x00	; 0
    14d0:	2a ef       	ldi	r18, 0xFA	; 250
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	d8 01       	movw	r26, r16
    14d6:	17 96       	adiw	r26, 0x07	; 7
    14d8:	ed 91       	ld	r30, X+
    14da:	fc 91       	ld	r31, X
    14dc:	18 97       	sbiw	r26, 0x08	; 8
    14de:	e8 0f       	add	r30, r24
    14e0:	f1 1d       	adc	r31, r1
    14e2:	90 81       	ld	r25, Z
    14e4:	f9 01       	movw	r30, r18
    14e6:	90 83       	st	Z, r25
    14e8:	8f 5f       	subi	r24, 0xFF	; 255
    14ea:	16 96       	adiw	r26, 0x06	; 6
    14ec:	9c 91       	ld	r25, X
    14ee:	89 17       	cp	r24, r25
    14f0:	88 f3       	brcs	.-30     	; 0x14d4 <__stack+0x3d5>
          u32_temp=0; Can_set_ext_msk(u32_temp);
    14f2:	19 82       	std	Y+1, r1	; 0x01
    14f4:	1a 82       	std	Y+2, r1	; 0x02
    14f6:	1b 82       	std	Y+3, r1	; 0x03
    14f8:	1c 82       	std	Y+4, r1	; 0x04
    14fa:	10 92 f7 00 	sts	0x00F7, r1
    14fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1500:	92 95       	swap	r25
    1502:	96 95       	lsr	r25
    1504:	97 70       	andi	r25, 0x07	; 7
    1506:	8b 81       	ldd	r24, Y+3	; 0x03
    1508:	88 0f       	add	r24, r24
    150a:	88 0f       	add	r24, r24
    150c:	88 0f       	add	r24, r24
    150e:	89 0f       	add	r24, r25
    1510:	80 93 f6 00 	sts	0x00F6, r24
    1514:	99 81       	ldd	r25, Y+1	; 0x01
    1516:	92 95       	swap	r25
    1518:	96 95       	lsr	r25
    151a:	97 70       	andi	r25, 0x07	; 7
    151c:	8a 81       	ldd	r24, Y+2	; 0x02
    151e:	88 0f       	add	r24, r24
    1520:	88 0f       	add	r24, r24
    1522:	88 0f       	add	r24, r24
    1524:	89 0f       	add	r24, r25
    1526:	80 93 f5 00 	sts	0x00F5, r24
    152a:	89 81       	ldd	r24, Y+1	; 0x01
    152c:	88 0f       	add	r24, r24
    152e:	88 0f       	add	r24, r24
    1530:	88 0f       	add	r24, r24
    1532:	44 ef       	ldi	r20, 0xF4	; 244
    1534:	50 e0       	ldi	r21, 0x00	; 0
    1536:	da 01       	movw	r26, r20
    1538:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
    153a:	ef ee       	ldi	r30, 0xEF	; 239
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	90 81       	ld	r25, Z
    1540:	d8 01       	movw	r26, r16
    1542:	16 96       	adiw	r26, 0x06	; 6
    1544:	8c 91       	ld	r24, X
    1546:	16 97       	sbiw	r26, 0x06	; 6
    1548:	89 2b       	or	r24, r25
    154a:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    154c:	81 e0       	ldi	r24, 0x01	; 1
    154e:	1a 96       	adiw	r26, 0x0a	; 10
    1550:	8c 93       	st	X, r24
    1552:	da 01       	movw	r26, r20
    1554:	8c 91       	ld	r24, X
    1556:	84 60       	ori	r24, 0x04	; 4
    1558:	8c 93       	st	X, r24
    155a:	80 ef       	ldi	r24, 0xF0	; 240
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	dc 01       	movw	r26, r24
    1560:	2c 91       	ld	r18, X
    1562:	24 60       	ori	r18, 0x04	; 4
    1564:	2c 93       	st	X, r18
          Can_set_rplv();
    1566:	80 81       	ld	r24, Z
    1568:	80 62       	ori	r24, 0x20	; 32
    156a:	80 83       	st	Z, r24
          Can_clear_idemsk();
    156c:	da 01       	movw	r26, r20
    156e:	8c 91       	ld	r24, X
    1570:	8e 7f       	andi	r24, 0xFE	; 254
    1572:	8c 93       	st	X, r24
          Can_config_rx();       
    1574:	80 81       	ld	r24, Z
    1576:	8f 73       	andi	r24, 0x3F	; 63
    1578:	80 83       	st	Z, r24
    157a:	80 81       	ld	r24, Z
    157c:	80 68       	ori	r24, 0x80	; 128
    157e:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    1580:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_set_rplv();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
    1582:	b4 c0       	rjmp	.+360    	; 0x16ec <__stack+0x5ed>
        //------------      
        case CMD_REPLY_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    1584:	f8 01       	movw	r30, r16
    1586:	83 85       	ldd	r24, Z+11	; 0x0b
    1588:	88 23       	and	r24, r24
    158a:	69 f1       	breq	.+90     	; 0x15e6 <__stack+0x4e7>
    158c:	94 81       	ldd	r25, Z+4	; 0x04
    158e:	92 95       	swap	r25
    1590:	96 95       	lsr	r25
    1592:	97 70       	andi	r25, 0x07	; 7
    1594:	85 81       	ldd	r24, Z+5	; 0x05
    1596:	88 0f       	add	r24, r24
    1598:	88 0f       	add	r24, r24
    159a:	88 0f       	add	r24, r24
    159c:	89 0f       	add	r24, r25
    159e:	80 93 f3 00 	sts	0x00F3, r24
    15a2:	93 81       	ldd	r25, Z+3	; 0x03
    15a4:	92 95       	swap	r25
    15a6:	96 95       	lsr	r25
    15a8:	97 70       	andi	r25, 0x07	; 7
    15aa:	84 81       	ldd	r24, Z+4	; 0x04
    15ac:	88 0f       	add	r24, r24
    15ae:	88 0f       	add	r24, r24
    15b0:	88 0f       	add	r24, r24
    15b2:	89 0f       	add	r24, r25
    15b4:	80 93 f2 00 	sts	0x00F2, r24
    15b8:	92 81       	ldd	r25, Z+2	; 0x02
    15ba:	92 95       	swap	r25
    15bc:	96 95       	lsr	r25
    15be:	97 70       	andi	r25, 0x07	; 7
    15c0:	83 81       	ldd	r24, Z+3	; 0x03
    15c2:	88 0f       	add	r24, r24
    15c4:	88 0f       	add	r24, r24
    15c6:	88 0f       	add	r24, r24
    15c8:	89 0f       	add	r24, r25
    15ca:	80 93 f1 00 	sts	0x00F1, r24
    15ce:	82 81       	ldd	r24, Z+2	; 0x02
    15d0:	88 0f       	add	r24, r24
    15d2:	88 0f       	add	r24, r24
    15d4:	88 0f       	add	r24, r24
    15d6:	80 93 f0 00 	sts	0x00F0, r24
    15da:	ef ee       	ldi	r30, 0xEF	; 239
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	80 61       	ori	r24, 0x10	; 16
    15e2:	80 83       	st	Z, r24
    15e4:	17 c0       	rjmp	.+46     	; 0x1614 <__stack+0x515>
          else              { Can_set_std_id(cmd->id.std);}
    15e6:	82 81       	ldd	r24, Z+2	; 0x02
    15e8:	86 95       	lsr	r24
    15ea:	86 95       	lsr	r24
    15ec:	86 95       	lsr	r24
    15ee:	93 81       	ldd	r25, Z+3	; 0x03
    15f0:	b0 e2       	ldi	r27, 0x20	; 32
    15f2:	9b 9f       	mul	r25, r27
    15f4:	80 0d       	add	r24, r0
    15f6:	11 24       	eor	r1, r1
    15f8:	80 93 f3 00 	sts	0x00F3, r24
    15fc:	f8 01       	movw	r30, r16
    15fe:	82 81       	ldd	r24, Z+2	; 0x02
    1600:	82 95       	swap	r24
    1602:	88 0f       	add	r24, r24
    1604:	80 7e       	andi	r24, 0xE0	; 224
    1606:	80 93 f2 00 	sts	0x00F2, r24
    160a:	ef ee       	ldi	r30, 0xEF	; 239
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	80 81       	ld	r24, Z
    1610:	8f 7e       	andi	r24, 0xEF	; 239
    1612:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    1614:	d8 01       	movw	r26, r16
    1616:	16 96       	adiw	r26, 0x06	; 6
    1618:	8c 91       	ld	r24, X
    161a:	88 23       	and	r24, r24
    161c:	91 f0       	breq	.+36     	; 0x1642 <__stack+0x543>
    161e:	80 e0       	ldi	r24, 0x00	; 0
    1620:	2a ef       	ldi	r18, 0xFA	; 250
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	d8 01       	movw	r26, r16
    1626:	17 96       	adiw	r26, 0x07	; 7
    1628:	ed 91       	ld	r30, X+
    162a:	fc 91       	ld	r31, X
    162c:	18 97       	sbiw	r26, 0x08	; 8
    162e:	e8 0f       	add	r30, r24
    1630:	f1 1d       	adc	r31, r1
    1632:	90 81       	ld	r25, Z
    1634:	f9 01       	movw	r30, r18
    1636:	90 83       	st	Z, r25
    1638:	8f 5f       	subi	r24, 0xFF	; 255
    163a:	16 96       	adiw	r26, 0x06	; 6
    163c:	9c 91       	ld	r25, X
    163e:	89 17       	cp	r24, r25
    1640:	88 f3       	brcs	.-30     	; 0x1624 <__stack+0x525>
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    1642:	8f ef       	ldi	r24, 0xFF	; 255
    1644:	9f ef       	ldi	r25, 0xFF	; 255
    1646:	dc 01       	movw	r26, r24
    1648:	89 83       	std	Y+1, r24	; 0x01
    164a:	9a 83       	std	Y+2, r25	; 0x02
    164c:	ab 83       	std	Y+3, r26	; 0x03
    164e:	bc 83       	std	Y+4, r27	; 0x04
    1650:	80 93 f7 00 	sts	0x00F7, r24
    1654:	9a 81       	ldd	r25, Y+2	; 0x02
    1656:	92 95       	swap	r25
    1658:	96 95       	lsr	r25
    165a:	97 70       	andi	r25, 0x07	; 7
    165c:	8b 81       	ldd	r24, Y+3	; 0x03
    165e:	88 0f       	add	r24, r24
    1660:	88 0f       	add	r24, r24
    1662:	88 0f       	add	r24, r24
    1664:	89 0f       	add	r24, r25
    1666:	80 93 f6 00 	sts	0x00F6, r24
    166a:	99 81       	ldd	r25, Y+1	; 0x01
    166c:	92 95       	swap	r25
    166e:	96 95       	lsr	r25
    1670:	97 70       	andi	r25, 0x07	; 7
    1672:	8a 81       	ldd	r24, Y+2	; 0x02
    1674:	88 0f       	add	r24, r24
    1676:	88 0f       	add	r24, r24
    1678:	88 0f       	add	r24, r24
    167a:	89 0f       	add	r24, r25
    167c:	80 93 f5 00 	sts	0x00F5, r24
    1680:	89 81       	ldd	r24, Y+1	; 0x01
    1682:	88 0f       	add	r24, r24
    1684:	88 0f       	add	r24, r24
    1686:	88 0f       	add	r24, r24
    1688:	44 ef       	ldi	r20, 0xF4	; 244
    168a:	50 e0       	ldi	r21, 0x00	; 0
    168c:	da 01       	movw	r26, r20
    168e:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
    1690:	ef ee       	ldi	r30, 0xEF	; 239
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	90 81       	ld	r25, Z
    1696:	d8 01       	movw	r26, r16
    1698:	16 96       	adiw	r26, 0x06	; 6
    169a:	8c 91       	ld	r24, X
    169c:	16 97       	sbiw	r26, 0x06	; 6
    169e:	89 2b       	or	r24, r25
    16a0:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    16a2:	81 e0       	ldi	r24, 0x01	; 1
    16a4:	1a 96       	adiw	r26, 0x0a	; 10
    16a6:	8c 93       	st	X, r24
    16a8:	da 01       	movw	r26, r20
    16aa:	8c 91       	ld	r24, X
    16ac:	84 60       	ori	r24, 0x04	; 4
    16ae:	8c 93       	st	X, r24
    16b0:	80 ef       	ldi	r24, 0xF0	; 240
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	dc 01       	movw	r26, r24
    16b6:	2c 91       	ld	r18, X
    16b8:	24 60       	ori	r18, 0x04	; 4
    16ba:	2c 93       	st	X, r18
          Can_set_rplv();
    16bc:	80 81       	ld	r24, Z
    16be:	80 62       	ori	r24, 0x20	; 32
    16c0:	80 83       	st	Z, r24
          Can_set_idemsk();
    16c2:	da 01       	movw	r26, r20
    16c4:	8c 91       	ld	r24, X
    16c6:	81 60       	ori	r24, 0x01	; 1
    16c8:	8c 93       	st	X, r24
          Can_config_rx();       
    16ca:	80 81       	ld	r24, Z
    16cc:	8f 73       	andi	r24, 0x3F	; 63
    16ce:	80 83       	st	Z, r24
    16d0:	80 81       	ld	r24, Z
    16d2:	80 68       	ori	r24, 0x80	; 128
    16d4:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    16d6:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_set_rplv();
          Can_set_idemsk();
          Can_config_rx();       
          break;
    16d8:	09 c0       	rjmp	.+18     	; 0x16ec <__stack+0x5ed>
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
    16da:	f8 01       	movw	r30, r16
    16dc:	11 86       	std	Z+9, r1	; 0x09
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    16de:	80 e0       	ldi	r24, 0x00	; 0
          break;
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
          break;
    16e0:	05 c0       	rjmp	.+10     	; 0x16ec <__stack+0x5ed>
        //------------      
      } // switch (cmd ...
    } // if (mob_handle ...
    else
    {
      cmd->status = MOB_NOT_REACHED;
    16e2:	8f e1       	ldi	r24, 0x1F	; 31
    16e4:	d8 01       	movw	r26, r16
    16e6:	19 96       	adiw	r26, 0x09	; 9
    16e8:	8c 93       	st	X, r24
      return CAN_CMD_REFUSED;
    16ea:	8f ef       	ldi	r24, 0xFF	; 255
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
}
    16ec:	0f 90       	pop	r0
    16ee:	0f 90       	pop	r0
    16f0:	0f 90       	pop	r0
    16f2:	0f 90       	pop	r0
    16f4:	df 91       	pop	r29
    16f6:	cf 91       	pop	r28
    16f8:	1f 91       	pop	r17
    16fa:	0f 91       	pop	r16
    16fc:	08 95       	ret

000016fe <can_get_status>:
//!         CAN_STATUS_ERROR         - Error in configuration or in the
//!                                    CAN communication
//!
//------------------------------------------------------------------------------
uint8_t can_get_status (st_cmd_t* cmd)
{
    16fe:	ef 92       	push	r14
    1700:	ff 92       	push	r15
    1702:	1f 93       	push	r17
    1704:	cf 93       	push	r28
    1706:	df 93       	push	r29
    1708:	ec 01       	movw	r28, r24
    uint8_t a_status, rtn_val;
     
    a_status = cmd->status;
    170a:	89 85       	ldd	r24, Y+9	; 0x09
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    170c:	88 23       	and	r24, r24
    170e:	09 f4       	brne	.+2      	; 0x1712 <can_get_status+0x14>
    1710:	91 c0       	rjmp	.+290    	; 0x1834 <can_get_status+0x136>
    1712:	8f 31       	cpi	r24, 0x1F	; 31
    1714:	09 f4       	brne	.+2      	; 0x1718 <can_get_status+0x1a>
    1716:	90 c0       	rjmp	.+288    	; 0x1838 <can_get_status+0x13a>
    1718:	8f 3f       	cpi	r24, 0xFF	; 255
    171a:	09 f4       	brne	.+2      	; 0x171e <can_get_status+0x20>
    171c:	8f c0       	rjmp	.+286    	; 0x183c <can_get_status+0x13e>
    {
        return CAN_STATUS_ERROR;
    }

    Can_set_mob(cmd->handle);
    171e:	88 81       	ld	r24, Y
    1720:	82 95       	swap	r24
    1722:	80 7f       	andi	r24, 0xF0	; 240
    1724:	80 93 ed 00 	sts	0x00ED, r24
    a_status = can_get_mob_status();
    1728:	0e 94 a7 0c 	call	0x194e	; 0x194e <can_get_mob_status>
    172c:	18 2f       	mov	r17, r24
    
    switch (a_status)
    172e:	80 32       	cpi	r24, 0x20	; 32
    1730:	59 f0       	breq	.+22     	; 0x1748 <can_get_status+0x4a>
    1732:	20 f4       	brcc	.+8      	; 0x173c <can_get_status+0x3e>
    1734:	88 23       	and	r24, r24
    1736:	09 f4       	brne	.+2      	; 0x173a <can_get_status+0x3c>
    1738:	83 c0       	rjmp	.+262    	; 0x1840 <can_get_status+0x142>
    173a:	72 c0       	rjmp	.+228    	; 0x1820 <can_get_status+0x122>
    173c:	80 34       	cpi	r24, 0x40	; 64
    173e:	09 f4       	brne	.+2      	; 0x1742 <can_get_status+0x44>
    1740:	64 c0       	rjmp	.+200    	; 0x180a <can_get_status+0x10c>
    1742:	80 3a       	cpi	r24, 0xA0	; 160
    1744:	09 f0       	breq	.+2      	; 0x1748 <can_get_status+0x4a>
    1746:	6c c0       	rjmp	.+216    	; 0x1820 <can_get_status+0x122>
            rtn_val = CAN_STATUS_NOT_COMPLETED;
            break;
        //---------------      
        case MOB_RX_COMPLETED:     
        case MOB_RX_COMPLETED_DLCW:
            cmd->dlc = Can_get_dlc();
    1748:	0f 2e       	mov	r0, r31
    174a:	ff ee       	ldi	r31, 0xEF	; 239
    174c:	ef 2e       	mov	r14, r31
    174e:	f1 2c       	mov	r15, r1
    1750:	f0 2d       	mov	r31, r0
    1752:	f7 01       	movw	r30, r14
    1754:	80 81       	ld	r24, Z
    1756:	8f 70       	andi	r24, 0x0F	; 15
    1758:	8e 83       	std	Y+6, r24	; 0x06
            can_get_data(cmd->pt_data);
    175a:	8f 81       	ldd	r24, Y+7	; 0x07
    175c:	98 85       	ldd	r25, Y+8	; 0x08
    175e:	0e 94 bd 0c 	call	0x197a	; 0x197a <can_get_data>
            cmd->ctrl.rtr = Can_get_rtr();
    1762:	80 91 f0 00 	lds	r24, 0x00F0
    1766:	82 fb       	bst	r24, 2
    1768:	88 27       	eor	r24, r24
    176a:	80 f9       	bld	r24, 0
    176c:	8a 87       	std	Y+10, r24	; 0x0a
            if (Can_get_ide()) // if extended frame
    176e:	f7 01       	movw	r30, r14
    1770:	80 81       	ld	r24, Z
    1772:	84 ff       	sbrs	r24, 4
    1774:	2d c0       	rjmp	.+90     	; 0x17d0 <can_get_status+0xd2>
            {
                cmd->ctrl.ide = 1; // extended frame
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	8b 87       	std	Y+11, r24	; 0x0b
                Can_get_ext_id(cmd->id.ext);
    177a:	e3 ef       	ldi	r30, 0xF3	; 243
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	80 81       	ld	r24, Z
    1780:	86 95       	lsr	r24
    1782:	86 95       	lsr	r24
    1784:	86 95       	lsr	r24
    1786:	8d 83       	std	Y+5, r24	; 0x05
    1788:	a2 ef       	ldi	r26, 0xF2	; 242
    178a:	b0 e0       	ldi	r27, 0x00	; 0
    178c:	8c 91       	ld	r24, X
    178e:	90 81       	ld	r25, Z
    1790:	86 95       	lsr	r24
    1792:	86 95       	lsr	r24
    1794:	86 95       	lsr	r24
    1796:	f0 e2       	ldi	r31, 0x20	; 32
    1798:	9f 9f       	mul	r25, r31
    179a:	80 0d       	add	r24, r0
    179c:	11 24       	eor	r1, r1
    179e:	8c 83       	std	Y+4, r24	; 0x04
    17a0:	e1 ef       	ldi	r30, 0xF1	; 241
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 81       	ld	r24, Z
    17a6:	9c 91       	ld	r25, X
    17a8:	86 95       	lsr	r24
    17aa:	86 95       	lsr	r24
    17ac:	86 95       	lsr	r24
    17ae:	20 e2       	ldi	r18, 0x20	; 32
    17b0:	92 9f       	mul	r25, r18
    17b2:	80 0d       	add	r24, r0
    17b4:	11 24       	eor	r1, r1
    17b6:	8b 83       	std	Y+3, r24	; 0x03
    17b8:	80 91 f0 00 	lds	r24, 0x00F0
    17bc:	90 81       	ld	r25, Z
    17be:	86 95       	lsr	r24
    17c0:	86 95       	lsr	r24
    17c2:	86 95       	lsr	r24
    17c4:	e0 e2       	ldi	r30, 0x20	; 32
    17c6:	9e 9f       	mul	r25, r30
    17c8:	80 0d       	add	r24, r0
    17ca:	11 24       	eor	r1, r1
    17cc:	8a 83       	std	Y+2, r24	; 0x02
    17ce:	13 c0       	rjmp	.+38     	; 0x17f6 <can_get_status+0xf8>
            }
            else // else standard frame
                {
                    cmd->ctrl.ide = 0;
    17d0:	1b 86       	std	Y+11, r1	; 0x0b
                    Can_get_std_id(cmd->id.std);
    17d2:	e3 ef       	ldi	r30, 0xF3	; 243
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	80 81       	ld	r24, Z
    17d8:	82 95       	swap	r24
    17da:	86 95       	lsr	r24
    17dc:	87 70       	andi	r24, 0x07	; 7
    17de:	8b 83       	std	Y+3, r24	; 0x03
    17e0:	80 91 f2 00 	lds	r24, 0x00F2
    17e4:	90 81       	ld	r25, Z
    17e6:	99 0f       	add	r25, r25
    17e8:	99 0f       	add	r25, r25
    17ea:	99 0f       	add	r25, r25
    17ec:	82 95       	swap	r24
    17ee:	86 95       	lsr	r24
    17f0:	87 70       	andi	r24, 0x07	; 7
    17f2:	89 0f       	add	r24, r25
    17f4:	8a 83       	std	Y+2, r24	; 0x02
                }
            // Status field of descriptor: 0x20 if Rx completed
            // Status field of descriptor: 0xA0 if Rx completed with DLCWarning    
            cmd->status = a_status;
    17f6:	19 87       	std	Y+9, r17	; 0x09
            Can_mob_abort();        // Freed the MOB
    17f8:	ef ee       	ldi	r30, 0xEF	; 239
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	80 81       	ld	r24, Z
    17fe:	8f 73       	andi	r24, 0x3F	; 63
    1800:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
    1802:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = CAN_STATUS_COMPLETED;
    1806:	80 e0       	ldi	r24, 0x00	; 0
            break;
    1808:	1c c0       	rjmp	.+56     	; 0x1842 <can_get_status+0x144>
        //---------------      
        case MOB_TX_COMPLETED:     
            // Status field of descriptor: 0x40 if Tx completed
            cmd->status = a_status;
    180a:	80 e4       	ldi	r24, 0x40	; 64
    180c:	89 87       	std	Y+9, r24	; 0x09
            Can_mob_abort();        // Freed the MOB
    180e:	ef ee       	ldi	r30, 0xEF	; 239
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	80 81       	ld	r24, Z
    1814:	8f 73       	andi	r24, 0x3F	; 63
    1816:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
    1818:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = CAN_STATUS_COMPLETED;
    181c:	80 e0       	ldi	r24, 0x00	; 0
            break;
    181e:	11 c0       	rjmp	.+34     	; 0x1842 <can_get_status+0x144>
        //---------------      
        default:
            // Status field of descriptor: (bin)000b.scfa if MOb error
            cmd->status = a_status;
    1820:	19 87       	std	Y+9, r17	; 0x09
            Can_mob_abort();        // Freed the MOB
    1822:	ef ee       	ldi	r30, 0xEF	; 239
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	80 81       	ld	r24, Z
    1828:	8f 73       	andi	r24, 0x3F	; 63
    182a:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
    182c:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = CAN_STATUS_ERROR;
    1830:	82 e0       	ldi	r24, 0x02	; 2
            break;
    1832:	07 c0       	rjmp	.+14     	; 0x1842 <can_get_status+0x144>
    uint8_t a_status, rtn_val;
     
    a_status = cmd->status;
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    {
        return CAN_STATUS_ERROR;
    1834:	82 e0       	ldi	r24, 0x02	; 2
    1836:	05 c0       	rjmp	.+10     	; 0x1842 <can_get_status+0x144>
    1838:	82 e0       	ldi	r24, 0x02	; 2
    183a:	03 c0       	rjmp	.+6      	; 0x1842 <can_get_status+0x144>
    183c:	82 e0       	ldi	r24, 0x02	; 2
    183e:	01 c0       	rjmp	.+2      	; 0x1842 <can_get_status+0x144>
    
    switch (a_status)
    {
        case MOB_NOT_COMPLETED:
            // cmd->status not updated
            rtn_val = CAN_STATUS_NOT_COMPLETED;
    1840:	81 e0       	ldi	r24, 0x01	; 1
            break;
             
    } // switch (a_status...
 
    return (rtn_val);
}
    1842:	df 91       	pop	r29
    1844:	cf 91       	pop	r28
    1846:	1f 91       	pop	r17
    1848:	ff 90       	pop	r15
    184a:	ef 90       	pop	r14
    184c:	08 95       	ret

0000184e <can_tx_sync>:
 *		buf_size, the size of the buffer
 * 
 * Returns:
 *		void	
 */
void can_tx_sync(uint16_t id, uint8_t *buffer, uint8_t buf_size) {
    184e:	cf 93       	push	r28
    1850:	df 93       	push	r29
    1852:	cd b7       	in	r28, 0x3d	; 61
    1854:	de b7       	in	r29, 0x3e	; 62
    1856:	2c 97       	sbiw	r28, 0x0c	; 12
    1858:	0f b6       	in	r0, 0x3f	; 63
    185a:	f8 94       	cli
    185c:	de bf       	out	0x3e, r29	; 62
    185e:	0f be       	out	0x3f, r0	; 63
    1860:	cd bf       	out	0x3d, r28	; 61
	// Message command object
	st_cmd_t can_msg;
	
	// Configure TX mailbox
	can_msg.pt_data = buffer;	// point message object to the data buffer
    1862:	79 87       	std	Y+9, r23	; 0x09
    1864:	68 87       	std	Y+8, r22	; 0x08
	can_msg.ctrl.ide = 0;		// CAN 2.0A
    1866:	1c 86       	std	Y+12, r1	; 0x0c
	can_msg.dlc = buf_size;		// Number of data bytes (8 max) requested from remote node
    1868:	4f 83       	std	Y+7, r20	; 0x07
	can_msg.id.std = id;		// Message ID
    186a:	9c 83       	std	Y+4, r25	; 0x04
    186c:	8b 83       	std	Y+3, r24	; 0x03
	can_msg.cmd = CMD_TX_DATA;	// Transmit data command object
    186e:	82 e0       	ldi	r24, 0x02	; 2
    1870:	8a 83       	std	Y+2, r24	; 0x02

	// Wait for MOb to configure (Must re-configure MOb for every transaction) and send request
	while(can_cmd(&can_msg) != CAN_CMD_ACCEPTED);
    1872:	ce 01       	movw	r24, r28
    1874:	01 96       	adiw	r24, 0x01	; 1
    1876:	0e 94 50 06 	call	0xca0	; 0xca0 <can_cmd>
    187a:	81 11       	cpse	r24, r1
    187c:	fa cf       	rjmp	.-12     	; 0x1872 <can_tx_sync+0x24>
	// Wait for Tx to complete
	while(can_get_status(&can_msg) == CAN_STATUS_NOT_COMPLETED);
    187e:	ce 01       	movw	r24, r28
    1880:	01 96       	adiw	r24, 0x01	; 1
    1882:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <can_get_status>
    1886:	81 30       	cpi	r24, 0x01	; 1
    1888:	d1 f3       	breq	.-12     	; 0x187e <can_tx_sync+0x30>
}
    188a:	2c 96       	adiw	r28, 0x0c	; 12
    188c:	0f b6       	in	r0, 0x3f	; 63
    188e:	f8 94       	cli
    1890:	de bf       	out	0x3e, r29	; 62
    1892:	0f be       	out	0x3f, r0	; 63
    1894:	cd bf       	out	0x3d, r28	; 61
    1896:	df 91       	pop	r29
    1898:	cf 91       	pop	r28
    189a:	08 95       	ret

0000189c <setup_can_rcv>:
 * Arguments:
 *  can_receive_msg: pointer to can cmd msg struct
 *  can_receive_buffer: pointer to buffer to receive msg_id into
 *  buffer_len: length of the buffer to receive
 */
void setup_can_rcv(st_cmd_t *can_receive_msg, uint8_t *can_receive_buffer, uint8_t buffer_len, uint16_t msg_id) {
    189c:	cf 93       	push	r28
    189e:	df 93       	push	r29
    18a0:	ec 01       	movw	r28, r24
	// Populate message object
	can_receive_msg->pt_data = &can_receive_buffer[0];			// Point to receive buffer
    18a2:	78 87       	std	Y+8, r23	; 0x08
    18a4:	6f 83       	std	Y+7, r22	; 0x07
	can_receive_msg->ctrl.ide = 0;								// CAN 2.0A
    18a6:	1b 86       	std	Y+11, r1	; 0x0b
	can_receive_msg->dlc	= buffer_len;							// Data buffer length
    18a8:	4e 83       	std	Y+6, r20	; 0x06
	can_receive_msg->id.std = msg_id;							// Set the receive ID to be the state ID
    18aa:	3b 83       	std	Y+3, r19	; 0x03
    18ac:	2a 83       	std	Y+2, r18	; 0x02
	can_receive_msg->cmd = CMD_RX_DATA_MASKED;					// Receive data
    18ae:	88 e0       	ldi	r24, 0x08	; 8
    18b0:	89 83       	std	Y+1, r24	; 0x01
	
	/* Wait for an open mailbox and bind msg_id to the mailbox when available*/
	
	while(can_cmd(can_receive_msg) != CAN_CMD_ACCEPTED);
    18b2:	ce 01       	movw	r24, r28
    18b4:	0e 94 50 06 	call	0xca0	; 0xca0 <can_cmd>
    18b8:	81 11       	cpse	r24, r1
    18ba:	fb cf       	rjmp	.-10     	; 0x18b2 <setup_can_rcv+0x16>
}
    18bc:	df 91       	pop	r29
    18be:	cf 91       	pop	r28
    18c0:	08 95       	ret

000018c2 <setup_can_send>:
 * Arguments:
 *  can_send_msg: pointer to can cmd msg struct
 *  can_send_buffer: pointer to buffer to send msg_id from
 *  buffer_len: length of the buffer to send
 */
void setup_can_send(st_cmd_t *can_send_msg, uint8_t *can_send_buffer, uint8_t buffer_len, uint16_t msg_id) {
    18c2:	cf 93       	push	r28
    18c4:	df 93       	push	r29
    18c6:	ec 01       	movw	r28, r24
	// Populate message object
	can_send_msg->pt_data = &can_send_buffer[0];				// Point to send buffer
    18c8:	78 87       	std	Y+8, r23	; 0x08
    18ca:	6f 83       	std	Y+7, r22	; 0x07
	can_send_msg->ctrl.ide = 0;									// CAN 2.0A
    18cc:	1b 86       	std	Y+11, r1	; 0x0b
	can_send_msg->dlc	= buffer_len;							// Data buffer length
    18ce:	4e 83       	std	Y+6, r20	; 0x06
	can_send_msg->id.std = msg_id;								// Set the receive ID to be the state ID
    18d0:	3b 83       	std	Y+3, r19	; 0x03
    18d2:	2a 83       	std	Y+2, r18	; 0x02
	can_send_msg->cmd = CMD_TX_DATA;							// Send data
    18d4:	82 e0       	ldi	r24, 0x02	; 2
    18d6:	89 83       	std	Y+1, r24	; 0x01
	
	/* Wait for an open mailbox and bind msg_id to the mailbox when available*/
	while(can_cmd(can_send_msg) != CAN_CMD_ACCEPTED);
    18d8:	ce 01       	movw	r24, r28
    18da:	0e 94 50 06 	call	0xca0	; 0xca0 <can_cmd>
    18de:	81 11       	cpse	r24, r1
    18e0:	fb cf       	rjmp	.-10     	; 0x18d8 <setup_can_send+0x16>
    18e2:	df 91       	pop	r29
    18e4:	cf 91       	pop	r28
    18e6:	08 95       	ret

000018e8 <can_clear_all_mob>:
uint8_t  mob_number;
/*
    uint8_t  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    18e8:	80 e0       	ldi	r24, 0x00	; 0
    {
        CANPAGE = (mob_number << 4);    //! Page index
    18ea:	ad ee       	ldi	r26, 0xED	; 237
    18ec:	b0 e0       	ldi	r27, 0x00	; 0
        Can_clear_mob();                //! All MOb Registers=0
    18ee:	3e ee       	ldi	r19, 0xEE	; 238
    18f0:	20 e0       	ldi	r18, 0x00	; 0
    uint8_t  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    {
        CANPAGE = (mob_number << 4);    //! Page index
    18f2:	98 2f       	mov	r25, r24
    18f4:	92 95       	swap	r25
    18f6:	90 7f       	andi	r25, 0xF0	; 240
    18f8:	9c 93       	st	X, r25
        Can_clear_mob();                //! All MOb Registers=0
    18fa:	e3 2f       	mov	r30, r19
    18fc:	f2 2f       	mov	r31, r18
    18fe:	11 92       	st	Z+, r1
    1900:	e8 3f       	cpi	r30, 0xF8	; 248
    1902:	f1 05       	cpc	r31, r1
    1904:	e1 f7       	brne	.-8      	; 0x18fe <can_clear_all_mob+0x16>
uint8_t  mob_number;
/*
    uint8_t  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    1906:	8f 5f       	subi	r24, 0xFF	; 255
    1908:	86 30       	cpi	r24, 0x06	; 6
    190a:	99 f7       	brne	.-26     	; 0x18f2 <can_clear_all_mob+0xa>
        {
            CANMSG = 0;                 //! MOb data FIFO
        }
*/
    }
}
    190c:	08 95       	ret

0000190e <can_get_mob_free>:
//------------------------------------------------------------------------------
uint8_t can_get_mob_free(void)
{
    uint8_t mob_number, page_saved;

    page_saved = CANPAGE;
    190e:	ed ee       	ldi	r30, 0xED	; 237
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	20 81       	ld	r18, Z
    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    {
        Can_set_mob(mob_number);
    1914:	10 82       	st	Z, r1
        if ((CANCDMOB & 0xC0) == 0x00) //! Disable configuration
    1916:	80 91 ef 00 	lds	r24, 0x00EF
    191a:	80 7c       	andi	r24, 0xC0	; 192
    191c:	69 f0       	breq	.+26     	; 0x1938 <can_get_mob_free+0x2a>
uint8_t can_get_mob_free(void)
{
    uint8_t mob_number, page_saved;

    page_saved = CANPAGE;
    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    191e:	81 e0       	ldi	r24, 0x01	; 1
    {
        Can_set_mob(mob_number);
    1920:	ad ee       	ldi	r26, 0xED	; 237
    1922:	b0 e0       	ldi	r27, 0x00	; 0
        if ((CANCDMOB & 0xC0) == 0x00) //! Disable configuration
    1924:	ef ee       	ldi	r30, 0xEF	; 239
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    uint8_t mob_number, page_saved;

    page_saved = CANPAGE;
    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    {
        Can_set_mob(mob_number);
    1928:	98 2f       	mov	r25, r24
    192a:	92 95       	swap	r25
    192c:	90 7f       	andi	r25, 0xF0	; 240
    192e:	9c 93       	st	X, r25
        if ((CANCDMOB & 0xC0) == 0x00) //! Disable configuration
    1930:	90 81       	ld	r25, Z
    1932:	90 7c       	andi	r25, 0xC0	; 192
    1934:	29 f4       	brne	.+10     	; 0x1940 <can_get_mob_free+0x32>
    1936:	01 c0       	rjmp	.+2      	; 0x193a <can_get_mob_free+0x2c>
uint8_t can_get_mob_free(void)
{
    uint8_t mob_number, page_saved;

    page_saved = CANPAGE;
    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    1938:	80 e0       	ldi	r24, 0x00	; 0
    {
        Can_set_mob(mob_number);
        if ((CANCDMOB & 0xC0) == 0x00) //! Disable configuration
        {
            CANPAGE = page_saved;
    193a:	20 93 ed 00 	sts	0x00ED, r18
            return (mob_number);
    193e:	08 95       	ret
uint8_t can_get_mob_free(void)
{
    uint8_t mob_number, page_saved;

    page_saved = CANPAGE;
    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    1940:	8f 5f       	subi	r24, 0xFF	; 255
    1942:	86 30       	cpi	r24, 0x06	; 6
    1944:	89 f7       	brne	.-30     	; 0x1928 <can_get_mob_free+0x1a>
        {
            CANPAGE = page_saved;
            return (mob_number);
        }
    }
    CANPAGE = page_saved;
    1946:	20 93 ed 00 	sts	0x00ED, r18
    return (NO_MOB);
    194a:	8f ef       	ldi	r24, 0xFF	; 255
}
    194c:	08 95       	ret

0000194e <can_get_mob_status>:
uint8_t can_get_mob_status(void)
{
    uint8_t mob_status, canstmob_copy;

    // Test if MOb ENABLE or DISABLE
    if ((CANCDMOB & 0xC0) == 0x00) {return(MOB_DISABLE);}
    194e:	80 91 ef 00 	lds	r24, 0x00EF
    1952:	80 7c       	andi	r24, 0xC0	; 192
    1954:	61 f0       	breq	.+24     	; 0x196e <can_get_mob_status+0x20>

    canstmob_copy = CANSTMOB; // Copy for test integrity
    1956:	80 91 ee 00 	lds	r24, 0x00EE

    // If MOb is ENABLE, test if MOb is COMPLETED
    // - MOb Status = 0x20 then MOB_RX_COMPLETED
    // - MOb Status = 0x40 then MOB_TX_COMPLETED
    // - MOb Status = 0xA0 then MOB_RX_COMPLETED_DLCW
    mob_status = canstmob_copy & ((1<<DLCW)|(1<<TXOK)|(1<<RXOK));
    195a:	98 2f       	mov	r25, r24
    195c:	90 7e       	andi	r25, 0xE0	; 224
    if ( (mob_status==MOB_RX_COMPLETED) ||   \
    195e:	28 2f       	mov	r18, r24
    1960:	20 76       	andi	r18, 0x60	; 96
    1962:	20 32       	cpi	r18, 0x20	; 32
    1964:	31 f0       	breq	.+12     	; 0x1972 <can_get_mob_status+0x24>
    1966:	90 34       	cpi	r25, 0x40	; 64
    1968:	31 f0       	breq	.+12     	; 0x1976 <can_get_mob_status+0x28>
    // - MOb Status bit_0 = MOB_ACK_ERROR
    // - MOb Status bit_1 = MOB_FORM_ERROR
    // - MOb Status bit_2 = MOB_CRC_ERROR
    // - MOb Status bit_3 = MOB_STUFF_ERROR
    // - MOb Status bit_4 = MOB_BIT_ERROR
    mob_status = canstmob_copy & ERR_MOB_MSK;
    196a:	8f 71       	andi	r24, 0x1F	; 31
    196c:	08 95       	ret
uint8_t can_get_mob_status(void)
{
    uint8_t mob_status, canstmob_copy;

    // Test if MOb ENABLE or DISABLE
    if ((CANCDMOB & 0xC0) == 0x00) {return(MOB_DISABLE);}
    196e:	8f ef       	ldi	r24, 0xFF	; 255
    1970:	08 95       	ret
    // - MOb Status = 0x40 then MOB_TX_COMPLETED
    // - MOb Status = 0xA0 then MOB_RX_COMPLETED_DLCW
    mob_status = canstmob_copy & ((1<<DLCW)|(1<<TXOK)|(1<<RXOK));
    if ( (mob_status==MOB_RX_COMPLETED) ||   \
         (mob_status==MOB_TX_COMPLETED) ||   \
         (mob_status==MOB_RX_COMPLETED_DLCW) ) { return(mob_status); }
    1972:	89 2f       	mov	r24, r25
    1974:	08 95       	ret
    1976:	89 2f       	mov	r24, r25
    mob_status = canstmob_copy & ERR_MOB_MSK;
    if (mob_status != 0) { return(mob_status); }

    // If CANSTMOB = 0 then MOB_NOT_COMPLETED
    return(MOB_NOT_COMPLETED);
}
    1978:	08 95       	ret

0000197a <can_get_data>:
//! @param CAN message data address.
//!
//! @return none.
//------------------------------------------------------------------------------
void can_get_data(uint8_t* p_can_message_data)
{
    197a:	cf 93       	push	r28
    197c:	df 93       	push	r29
    uint8_t data_index;

    for (data_index = 0; data_index < (Can_get_dlc()); data_index++)
    197e:	20 91 ef 00 	lds	r18, 0x00EF
    1982:	2f 70       	andi	r18, 0x0F	; 15
    1984:	99 f0       	breq	.+38     	; 0x19ac <can_get_data+0x32>
    1986:	60 e0       	ldi	r22, 0x00	; 0
    {
        *(p_can_message_data + data_index) = CANMSG;
    1988:	ca ef       	ldi	r28, 0xFA	; 250
    198a:	d0 e0       	ldi	r29, 0x00	; 0
//------------------------------------------------------------------------------
void can_get_data(uint8_t* p_can_message_data)
{
    uint8_t data_index;

    for (data_index = 0; data_index < (Can_get_dlc()); data_index++)
    198c:	af ee       	ldi	r26, 0xEF	; 239
    198e:	b0 e0       	ldi	r27, 0x00	; 0
    {
        *(p_can_message_data + data_index) = CANMSG;
    1990:	28 81       	ld	r18, Y
    1992:	fc 01       	movw	r30, r24
    1994:	e6 0f       	add	r30, r22
    1996:	f1 1d       	adc	r31, r1
    1998:	20 83       	st	Z, r18
//------------------------------------------------------------------------------
void can_get_data(uint8_t* p_can_message_data)
{
    uint8_t data_index;

    for (data_index = 0; data_index < (Can_get_dlc()); data_index++)
    199a:	6f 5f       	subi	r22, 0xFF	; 255
    199c:	2c 91       	ld	r18, X
    199e:	46 2f       	mov	r20, r22
    19a0:	50 e0       	ldi	r21, 0x00	; 0
    19a2:	2f 70       	andi	r18, 0x0F	; 15
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	42 17       	cp	r20, r18
    19a8:	53 07       	cpc	r21, r19
    19aa:	94 f3       	brlt	.-28     	; 0x1990 <can_get_data+0x16>
    {
        *(p_can_message_data + data_index) = CANMSG;
    }
}
    19ac:	df 91       	pop	r29
    19ae:	cf 91       	pop	r28
    19b0:	08 95       	ret

000019b2 <can_fixed_baudrate>:
//! @return Baudrate Status
//!         fixed = 1: baudrate performed
//------------------------------------------------------------------------------
uint8_t can_fixed_baudrate(uint8_t mode)
{
    Can_reset();
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	80 93 d8 00 	sts	0x00D8, r24
    Can_conf_bt();
    19b8:	86 e0       	ldi	r24, 0x06	; 6
    19ba:	80 93 e2 00 	sts	0x00E2, r24
    19be:	84 e0       	ldi	r24, 0x04	; 4
    19c0:	80 93 e3 00 	sts	0x00E3, r24
    19c4:	83 e1       	ldi	r24, 0x13	; 19
    19c6:	80 93 e4 00 	sts	0x00E4, r24
    return 1;
    19ca:	81 e0       	ldi	r24, 0x01	; 1
    19cc:	08 95       	ret

000019ce <__tablejump2__>:
    19ce:	ee 0f       	add	r30, r30
    19d0:	ff 1f       	adc	r31, r31

000019d2 <__tablejump__>:
    19d2:	05 90       	lpm	r0, Z+
    19d4:	f4 91       	lpm	r31, Z
    19d6:	e0 2d       	mov	r30, r0
    19d8:	09 94       	ijmp

000019da <_exit>:
    19da:	f8 94       	cli

000019dc <__stop_program>:
    19dc:	ff cf       	rjmp	.-2      	; 0x19dc <__stop_program>
