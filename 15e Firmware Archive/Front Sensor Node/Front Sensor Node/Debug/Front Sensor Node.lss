
Front Sensor Node.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000012d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001262  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008d  00800100  00800100  000012d6  2**0
                  ALLOC
  3 .comment      0000005f  00000000  00000000  000012d6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001338  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  00001378  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000168c  00000000  00000000  000014d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008b6  00000000  00000000  00002b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ab9  00000000  00000000  00003412  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003b4  00000000  00000000  00003ecc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000079d  00000000  00000000  00004280  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000132d  00000000  00000000  00004a1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  00005d4a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 49 00 	jmp	0x92	; 0x92 <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 9c 00 	jmp	0x138	; 0x138 <__vector_12>
      34:	0c 94 5d 00 	jmp	0xba	; 0xba <__vector_13>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      7c:	fc 01       	movw	r30, r24
      7e:	8e 02       	muls	r24, r30
      80:	08 03       	fmul	r16, r16
      82:	6c 03       	fmul	r22, r20
      84:	a9 03       	fmulsu	r18, r17
      86:	f0 03       	fmuls	r23, r16
      88:	3b 04       	cpc	r3, r11
      8a:	c6 04       	cpc	r12, r6
      8c:	5b 05       	cpc	r21, r11
      8e:	f7 01       	movw	r30, r14
      90:	51 06       	cpc	r5, r17

00000092 <__ctors_end>:
      92:	11 24       	eor	r1, r1
      94:	1f be       	out	0x3f, r1	; 63
      96:	cf ef       	ldi	r28, 0xFF	; 255
      98:	d0 e1       	ldi	r29, 0x10	; 16
      9a:	de bf       	out	0x3e, r29	; 62
      9c:	cd bf       	out	0x3d, r28	; 61

0000009e <__do_clear_bss>:
      9e:	21 e0       	ldi	r18, 0x01	; 1
      a0:	a0 e0       	ldi	r26, 0x00	; 0
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	ad 38       	cpi	r26, 0x8D	; 141
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 38 01 	call	0x270	; 0x270 <main>
      b2:	0c 94 2f 09 	jmp	0x125e	; 0x125e <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <__vector_13>:
      ba:	1f 92       	push	r1
      bc:	0f 92       	push	r0
      be:	0f b6       	in	r0, 0x3f	; 63
      c0:	0f 92       	push	r0
      c2:	11 24       	eor	r1, r1
      c4:	ef 92       	push	r14
      c6:	ff 92       	push	r15
      c8:	0f 93       	push	r16
      ca:	1f 93       	push	r17
      cc:	2f 93       	push	r18
      ce:	3f 93       	push	r19
      d0:	4f 93       	push	r20
      d2:	5f 93       	push	r21
      d4:	6f 93       	push	r22
      d6:	7f 93       	push	r23
      d8:	8f 93       	push	r24
      da:	9f 93       	push	r25
      dc:	af 93       	push	r26
      de:	bf 93       	push	r27
      e0:	cf 93       	push	r28
      e2:	df 93       	push	r29
      e4:	ef 93       	push	r30
      e6:	ff 93       	push	r31
      e8:	0f 2e       	mov	r0, r31
      ea:	f3 e0       	ldi	r31, 0x03	; 3
      ec:	ef 2e       	mov	r14, r31
      ee:	f1 e0       	ldi	r31, 0x01	; 1
      f0:	ff 2e       	mov	r15, r31
      f2:	f0 2d       	mov	r31, r0
      f4:	01 e1       	ldi	r16, 0x11	; 17
      f6:	11 e0       	ldi	r17, 0x01	; 1
      f8:	e7 01       	movw	r28, r14
      fa:	8c 2f       	mov	r24, r28
      fc:	8e 19       	sub	r24, r14
      fe:	0e 94 bc 07 	call	0xf78	; 0xf78 <adc_read>
     102:	89 93       	st	Y+, r24
     104:	c0 17       	cp	r28, r16
     106:	d1 07       	cpc	r29, r17
     108:	c1 f7       	brne	.-16     	; 0xfa <__vector_13+0x40>
     10a:	ff 91       	pop	r31
     10c:	ef 91       	pop	r30
     10e:	df 91       	pop	r29
     110:	cf 91       	pop	r28
     112:	bf 91       	pop	r27
     114:	af 91       	pop	r26
     116:	9f 91       	pop	r25
     118:	8f 91       	pop	r24
     11a:	7f 91       	pop	r23
     11c:	6f 91       	pop	r22
     11e:	5f 91       	pop	r21
     120:	4f 91       	pop	r20
     122:	3f 91       	pop	r19
     124:	2f 91       	pop	r18
     126:	1f 91       	pop	r17
     128:	0f 91       	pop	r16
     12a:	ff 90       	pop	r15
     12c:	ef 90       	pop	r14
     12e:	0f 90       	pop	r0
     130:	0f be       	out	0x3f, r0	; 63
     132:	0f 90       	pop	r0
     134:	1f 90       	pop	r1
     136:	18 95       	reti

00000138 <__vector_12>:
     138:	1f 92       	push	r1
     13a:	0f 92       	push	r0
     13c:	0f b6       	in	r0, 0x3f	; 63
     13e:	0f 92       	push	r0
     140:	11 24       	eor	r1, r1
     142:	2f 93       	push	r18
     144:	3f 93       	push	r19
     146:	4f 93       	push	r20
     148:	5f 93       	push	r21
     14a:	6f 93       	push	r22
     14c:	7f 93       	push	r23
     14e:	8f 93       	push	r24
     150:	9f 93       	push	r25
     152:	af 93       	push	r26
     154:	bf 93       	push	r27
     156:	ef 93       	push	r30
     158:	ff 93       	push	r31
     15a:	a8 95       	wdr
     15c:	10 92 85 00 	sts	0x0085, r1
     160:	10 92 84 00 	sts	0x0084, r1
     164:	41 e0       	ldi	r20, 0x01	; 1
     166:	67 e0       	ldi	r22, 0x07	; 7
     168:	82 e0       	ldi	r24, 0x02	; 2
     16a:	0e 94 13 08 	call	0x1026	; 0x1026 <set_io_pin>
     16e:	10 92 00 01 	sts	0x0100, r1
     172:	80 91 02 01 	lds	r24, 0x0102
     176:	81 30       	cpi	r24, 0x01	; 1
     178:	49 f0       	breq	.+18     	; 0x18c <__vector_12+0x54>
     17a:	28 f0       	brcs	.+10     	; 0x186 <__vector_12+0x4e>
     17c:	82 30       	cpi	r24, 0x02	; 2
     17e:	49 f0       	breq	.+18     	; 0x192 <__vector_12+0x5a>
     180:	83 30       	cpi	r24, 0x03	; 3
     182:	c9 f5       	brne	.+114    	; 0x1f6 <__vector_12+0xbe>
     184:	36 c0       	rjmp	.+108    	; 0x1f2 <__vector_12+0xba>
     186:	10 92 01 01 	sts	0x0101, r1
     18a:	35 c0       	rjmp	.+106    	; 0x1f6 <__vector_12+0xbe>
     18c:	10 92 01 01 	sts	0x0101, r1
     190:	32 c0       	rjmp	.+100    	; 0x1f6 <__vector_12+0xbe>
     192:	e0 91 0c 01 	lds	r30, 0x010C
     196:	60 91 05 01 	lds	r22, 0x0105
     19a:	6e 17       	cp	r22, r30
     19c:	88 f4       	brcc	.+34     	; 0x1c0 <__vector_12+0x88>
     19e:	2e 2f       	mov	r18, r30
     1a0:	30 e0       	ldi	r19, 0x00	; 0
     1a2:	70 e0       	ldi	r23, 0x00	; 0
     1a4:	a9 01       	movw	r20, r18
     1a6:	46 1b       	sub	r20, r22
     1a8:	57 0b       	sbc	r21, r23
     1aa:	f8 ec       	ldi	r31, 0xC8	; 200
     1ac:	f4 9f       	mul	r31, r20
     1ae:	c0 01       	movw	r24, r0
     1b0:	f5 9f       	mul	r31, r21
     1b2:	90 0d       	add	r25, r0
     1b4:	11 24       	eor	r1, r1
     1b6:	62 0f       	add	r22, r18
     1b8:	73 1f       	adc	r23, r19
     1ba:	0e 94 15 09 	call	0x122a	; 0x122a <__udivmodhi4>
     1be:	10 c0       	rjmp	.+32     	; 0x1e0 <__vector_12+0xa8>
     1c0:	70 e0       	ldi	r23, 0x00	; 0
     1c2:	2e 2f       	mov	r18, r30
     1c4:	30 e0       	ldi	r19, 0x00	; 0
     1c6:	ab 01       	movw	r20, r22
     1c8:	42 1b       	sub	r20, r18
     1ca:	53 0b       	sbc	r21, r19
     1cc:	f8 ec       	ldi	r31, 0xC8	; 200
     1ce:	f4 9f       	mul	r31, r20
     1d0:	c0 01       	movw	r24, r0
     1d2:	f5 9f       	mul	r31, r21
     1d4:	90 0d       	add	r25, r0
     1d6:	11 24       	eor	r1, r1
     1d8:	62 0f       	add	r22, r18
     1da:	73 1f       	adc	r23, r19
     1dc:	0e 94 15 09 	call	0x122a	; 0x122a <__udivmodhi4>
     1e0:	6b 30       	cpi	r22, 0x0B	; 11
     1e2:	71 05       	cpc	r23, r1
     1e4:	18 f4       	brcc	.+6      	; 0x1ec <__vector_12+0xb4>
     1e6:	e0 93 01 01 	sts	0x0101, r30
     1ea:	05 c0       	rjmp	.+10     	; 0x1f6 <__vector_12+0xbe>
     1ec:	10 92 01 01 	sts	0x0101, r1
     1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <__vector_12+0xbe>
     1f2:	10 92 01 01 	sts	0x0101, r1
     1f6:	81 e5       	ldi	r24, 0x51	; 81
     1f8:	91 e0       	ldi	r25, 0x01	; 1
     1fa:	0e 94 13 07 	call	0xe26	; 0xe26 <can_get_status>
     1fe:	81 30       	cpi	r24, 0x01	; 1
     200:	51 f0       	breq	.+20     	; 0x216 <__vector_12+0xde>
     202:	80 91 1d 01 	lds	r24, 0x011D
     206:	80 93 02 01 	sts	0x0102, r24
     20a:	81 e5       	ldi	r24, 0x51	; 81
     20c:	91 e0       	ldi	r25, 0x01	; 1
     20e:	0e 94 b3 01 	call	0x366	; 0x366 <can_cmd>
     212:	81 11       	cpse	r24, r1
     214:	fa cf       	rjmp	.-12     	; 0x20a <__vector_12+0xd2>
     216:	80 91 02 01 	lds	r24, 0x0102
     21a:	80 93 19 01 	sts	0x0119, r24
     21e:	80 91 0d 01 	lds	r24, 0x010D
     222:	80 93 1b 01 	sts	0x011B, r24
     226:	80 91 01 01 	lds	r24, 0x0101
     22a:	80 93 1a 01 	sts	0x011A, r24
     22e:	80 91 00 01 	lds	r24, 0x0100
     232:	80 93 1c 01 	sts	0x011C, r24
     236:	44 e0       	ldi	r20, 0x04	; 4
     238:	69 e1       	ldi	r22, 0x19	; 25
     23a:	71 e0       	ldi	r23, 0x01	; 1
     23c:	81 e0       	ldi	r24, 0x01	; 1
     23e:	92 e0       	ldi	r25, 0x02	; 2
     240:	0e 94 52 08 	call	0x10a4	; 0x10a4 <can_tx_sync>
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	67 e0       	ldi	r22, 0x07	; 7
     248:	82 e0       	ldi	r24, 0x02	; 2
     24a:	0e 94 13 08 	call	0x1026	; 0x1026 <set_io_pin>
     24e:	ff 91       	pop	r31
     250:	ef 91       	pop	r30
     252:	bf 91       	pop	r27
     254:	af 91       	pop	r26
     256:	9f 91       	pop	r25
     258:	8f 91       	pop	r24
     25a:	7f 91       	pop	r23
     25c:	6f 91       	pop	r22
     25e:	5f 91       	pop	r21
     260:	4f 91       	pop	r20
     262:	3f 91       	pop	r19
     264:	2f 91       	pop	r18
     266:	0f 90       	pop	r0
     268:	0f be       	out	0x3f, r0	; 63
     26a:	0f 90       	pop	r0
     26c:	1f 90       	pop	r1
     26e:	18 95       	reti

00000270 <main>:
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	80 e8       	ldi	r24, 0x80	; 128
     274:	0f b6       	in	r0, 0x3f	; 63
     276:	f8 94       	cli
     278:	80 93 61 00 	sts	0x0061, r24
     27c:	90 93 61 00 	sts	0x0061, r25
     280:	0f be       	out	0x3f, r0	; 63
     282:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <init_io>
     286:	81 e0       	ldi	r24, 0x01	; 1
     288:	0e 94 a6 01 	call	0x34c	; 0x34c <can_init>
     28c:	0e 94 93 01 	call	0x326	; 0x326 <init_can_mailboxes>
     290:	0e 94 72 01 	call	0x2e4	; 0x2e4 <init_adc>
     294:	0e 94 4d 01 	call	0x29a	; 0x29a <init_interrupts>
     298:	ff cf       	rjmp	.-2      	; 0x298 <main+0x28>

0000029a <init_interrupts>:
 * Returns: void
 */
void init_interrupts(void) {
	
	//Enable output compare A interrupt for Timer 1 (enables interrupt)
	TIMSK1 |= _BV(OCIE1A);
     29a:	ef e6       	ldi	r30, 0x6F	; 111
     29c:	f0 e0       	ldi	r31, 0x00	; 0
     29e:	80 81       	ld	r24, Z
     2a0:	82 60       	ori	r24, 0x02	; 2
     2a2:	80 83       	st	Z, r24
	
	// Set timer1_clk prescaler to clk/256 = 62.5kHz with 16MHz system clock
	TCCR1A = _BV(WGM12);
     2a4:	a0 e8       	ldi	r26, 0x80	; 128
     2a6:	b0 e0       	ldi	r27, 0x00	; 0
     2a8:	88 e0       	ldi	r24, 0x08	; 8
     2aa:	8c 93       	st	X, r24
	TCCR1B = _BV(CS12) | _BV(CS11);
     2ac:	e1 e8       	ldi	r30, 0x81	; 129
     2ae:	f0 e0       	ldi	r31, 0x00	; 0
     2b0:	86 e0       	ldi	r24, 0x06	; 6
     2b2:	80 83       	st	Z, r24
	
	// Reset timer 1
	TCNT1 = 0;
     2b4:	10 92 85 00 	sts	0x0085, r1
     2b8:	10 92 84 00 	sts	0x0084, r1

	// Set timer1_clk prescaler to clk/256 = 62.5kHz with 16MHz system clock
	TCCR1A = 0;
     2bc:	1c 92       	st	X, r1
	TCCR1B &= (1 << CS12) | (0 << CS11) | (0 << CS10); 
     2be:	80 81       	ld	r24, Z
     2c0:	84 70       	andi	r24, 0x04	; 4
     2c2:	80 83       	st	Z, r24
	
	/*Set output compare register 1A to 0x271=625
		This sets the timer to count to 625, making a
		100Hz interrupt
	*/
	OCR1A = 0x0271;
     2c4:	81 e7       	ldi	r24, 0x71	; 113
     2c6:	92 e0       	ldi	r25, 0x02	; 2
     2c8:	90 93 89 00 	sts	0x0089, r25
     2cc:	80 93 88 00 	sts	0x0088, r24
	
	// Clear interrupts
	TIFR1 = (1 << OCF1A) || (1 << OCF1B);
     2d0:	81 e0       	ldi	r24, 0x01	; 1
     2d2:	86 bb       	out	0x16, r24	; 22

	// enable interrupts
	sei();
     2d4:	78 94       	sei
     2d6:	08 95       	ret

000002d8 <init_io>:
 * Initialize digital I/O pins.
 * Arguments: void
 * Returns: void
 */
void init_io(void) {
	config_io_pin(MCU_STATUS_PIN, MCU_STATUS_PORT, IO_DIR_OUTPUT);
     2d8:	41 e0       	ldi	r20, 0x01	; 1
     2da:	61 e0       	ldi	r22, 0x01	; 1
     2dc:	80 e0       	ldi	r24, 0x00	; 0
     2de:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <config_io_pin>
     2e2:	08 95       	ret

000002e4 <init_adc>:
 * Arguments: void
 * Returns: void
 */
void init_adc(void){

	ADCSRA |= (1 << ADPS2) | (0 << ADPS1) | (0 << ADPS0); // Set ADC prescaler to 16 - 1MHz sample rate @ 16MHz
     2e4:	ea e7       	ldi	r30, 0x7A	; 122
     2e6:	f0 e0       	ldi	r31, 0x00	; 0
     2e8:	80 81       	ld	r24, Z
     2ea:	84 60       	ori	r24, 0x04	; 4
     2ec:	80 83       	st	Z, r24

	ADMUX  |= (1 << ADLAR); // Left adjust ADC result to allow easy 8 bit reading
     2ee:	ac e7       	ldi	r26, 0x7C	; 124
     2f0:	b0 e0       	ldi	r27, 0x00	; 0
     2f2:	8c 91       	ld	r24, X
     2f4:	80 62       	ori	r24, 0x20	; 32
     2f6:	8c 93       	st	X, r24
	ADCSRB |= (1 << ADHSM);	// Set ADC high speed mode
     2f8:	ab e7       	ldi	r26, 0x7B	; 123
     2fa:	b0 e0       	ldi	r27, 0x00	; 0
     2fc:	8c 91       	ld	r24, X
     2fe:	80 68       	ori	r24, 0x80	; 128
     300:	8c 93       	st	X, r24

	// No MUX values needed to be changed for initialization
	
	ADCSRB |= (1 << AREFEN); // Set ADC reference to AREF (AREFEN = 1, ISRCEN = 0, REFS1 = 0, REFS0 = 0)
     302:	8c 91       	ld	r24, X
     304:	80 62       	ori	r24, 0x20	; 32
     306:	8c 93       	st	X, r24
	
	ADCSRA |= (1 << ADEN);  // Enable ADC
     308:	80 81       	ld	r24, Z
     30a:	80 68       	ori	r24, 0x80	; 128
     30c:	80 83       	st	Z, r24
	
	// Enable timer 1 output compare B interrupt to sample ADCs
	// 62.5KHz timer clock * 2.5ms compare time = 156 = 0x9C
	OCR1B = 0x009C;
     30e:	8c e9       	ldi	r24, 0x9C	; 156
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	90 93 8b 00 	sts	0x008B, r25
     316:	80 93 8a 00 	sts	0x008A, r24
	// Enable output compare B interrupt
	TIMSK1 |= _BV(OCIE1B);
     31a:	ef e6       	ldi	r30, 0x6F	; 111
     31c:	f0 e0       	ldi	r31, 0x00	; 0
     31e:	80 81       	ld	r24, Z
     320:	84 60       	ori	r24, 0x04	; 4
     322:	80 83       	st	Z, r24
     324:	08 95       	ret

00000326 <init_can_mailboxes>:
 * sets up mailboxes for all critical CAN messages that this board receives
 *
 */
void init_can_mailboxes(void) {
	// Initialize heartbeat send mailbox for RSN
	setup_can_send(&heartbeat_cmd_st, ((uint8_t *)(&can_send_buffer)), sizeof(struct fsn_heartbeat_st), RSN_HEARTBEAT_ID);
     326:	22 e0       	ldi	r18, 0x02	; 2
     328:	32 e0       	ldi	r19, 0x02	; 2
     32a:	44 e0       	ldi	r20, 0x04	; 4
     32c:	61 e1       	ldi	r22, 0x11	; 17
     32e:	71 e0       	ldi	r23, 0x01	; 1
     330:	85 e4       	ldi	r24, 0x45	; 69
     332:	91 e0       	ldi	r25, 0x01	; 1
     334:	0e 94 8c 08 	call	0x1118	; 0x1118 <setup_can_send>
	
	/* Initialize receive mailboxes    */
	//Receive main heartbeat for state transitions
	setup_can_rcv(&rcv_cmd_st[0], ((uint8_t *)(&can_rcv_buffer[0])), sizeof(struct main_heartbeat_st), MAIN_HEARTBEAT_ID);
     338:	20 e0       	ldi	r18, 0x00	; 0
     33a:	32 e0       	ldi	r19, 0x02	; 2
     33c:	41 e0       	ldi	r20, 0x01	; 1
     33e:	6d e1       	ldi	r22, 0x1D	; 29
     340:	71 e0       	ldi	r23, 0x01	; 1
     342:	81 e5       	ldi	r24, 0x51	; 81
     344:	91 e0       	ldi	r25, 0x01	; 1
     346:	0e 94 79 08 	call	0x10f2	; 0x10f2 <setup_can_rcv>
     34a:	08 95       	ret

0000034c <can_init>:
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
     34c:	0e 94 07 09 	call	0x120e	; 0x120e <can_fixed_baudrate>
     350:	88 23       	and	r24, r24
     352:	41 f0       	breq	.+16     	; 0x364 <can_init+0x18>
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
     354:	0e 94 9f 08 	call	0x113e	; 0x113e <can_clear_all_mob>
    Can_enable();                               // c.f. macro in "can_drv.h" 
     358:	e8 ed       	ldi	r30, 0xD8	; 216
     35a:	f0 e0       	ldi	r31, 0x00	; 0
     35c:	80 81       	ld	r24, Z
     35e:	82 60       	ori	r24, 0x02	; 2
     360:	80 83       	st	Z, r24
    return (1);
     362:	81 e0       	ldi	r24, 0x01	; 1
}
     364:	08 95       	ret

00000366 <can_cmd>:
//! @return CAN_CMD_ACCEPTED - command is accepted
//!         CAN_CMD_REFUSED  - command is refused
//!
//------------------------------------------------------------------------------
uint8_t can_cmd(st_cmd_t* cmd)
{
     366:	0f 93       	push	r16
     368:	1f 93       	push	r17
     36a:	cf 93       	push	r28
     36c:	df 93       	push	r29
     36e:	00 d0       	rcall	.+0      	; 0x370 <can_cmd+0xa>
     370:	00 d0       	rcall	.+0      	; 0x372 <can_cmd+0xc>
     372:	cd b7       	in	r28, 0x3d	; 61
     374:	de b7       	in	r29, 0x3e	; 62
     376:	fc 01       	movw	r30, r24
  uint8_t mob_handle, cpt;
  uint32_t u32_temp;
  
  if (cmd->cmd == CMD_ABORT)
     378:	81 81       	ldd	r24, Z+1	; 0x01
     37a:	8c 30       	cpi	r24, 0x0C	; 12
     37c:	99 f4       	brne	.+38     	; 0x3a4 <can_cmd+0x3e>
  {
    if (cmd->status == MOB_PENDING)
     37e:	81 85       	ldd	r24, Z+9	; 0x09
     380:	80 36       	cpi	r24, 0x60	; 96
     382:	69 f4       	brne	.+26     	; 0x39e <can_cmd+0x38>
    {
      // Rx or Tx not yet performed
      Can_set_mob(cmd->handle);
     384:	80 81       	ld	r24, Z
     386:	82 95       	swap	r24
     388:	80 7f       	andi	r24, 0xF0	; 240
     38a:	80 93 ed 00 	sts	0x00ED, r24
      Can_mob_abort();
     38e:	af ee       	ldi	r26, 0xEF	; 239
     390:	b0 e0       	ldi	r27, 0x00	; 0
     392:	8c 91       	ld	r24, X
     394:	8f 73       	andi	r24, 0x3F	; 63
     396:	8c 93       	st	X, r24
      Can_clear_status_mob();       // To be sure !
     398:	10 92 ee 00 	sts	0x00EE, r1
      cmd->handle = 0;
     39c:	10 82       	st	Z, r1
    }
    cmd->status = STATUS_CLEARED; 
     39e:	11 86       	std	Z+9, r1	; 0x09
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     3a0:	80 e0       	ldi	r24, 0x00	; 0
     3a2:	38 c5       	rjmp	.+2672   	; 0xe14 <can_cmd+0xaae>
     3a4:	8f 01       	movw	r16, r30
    }
    cmd->status = STATUS_CLEARED; 
  }
  else
  {
    mob_handle = can_get_mob_free();
     3a6:	0e 94 b2 08 	call	0x1164	; 0x1164 <can_get_mob_free>
    if (mob_handle!= NO_MOB)
     3aa:	8f 3f       	cpi	r24, 0xFF	; 255
     3ac:	09 f4       	brne	.+2      	; 0x3b0 <can_cmd+0x4a>
     3ae:	2d c5       	rjmp	.+2650   	; 0xe0a <can_cmd+0xaa4>
    {
      cmd->status = MOB_PENDING; 
     3b0:	90 e6       	ldi	r25, 0x60	; 96
     3b2:	d8 01       	movw	r26, r16
     3b4:	19 96       	adiw	r26, 0x09	; 9
     3b6:	9c 93       	st	X, r25
     3b8:	19 97       	sbiw	r26, 0x09	; 9
      cmd->handle = mob_handle;
     3ba:	8c 93       	st	X, r24
      Can_set_mob(mob_handle);
     3bc:	82 95       	swap	r24
     3be:	80 7f       	andi	r24, 0xF0	; 240
     3c0:	80 93 ed 00 	sts	0x00ED, r24
      Can_clear_mob();
     3c4:	ee ee       	ldi	r30, 0xEE	; 238
     3c6:	f0 e0       	ldi	r31, 0x00	; 0
     3c8:	11 92       	st	Z+, r1
     3ca:	e8 3f       	cpi	r30, 0xF8	; 248
     3cc:	f1 05       	cpc	r31, r1
     3ce:	e1 f7       	brne	.-8      	; 0x3c8 <can_cmd+0x62>
          
      switch (cmd->cmd)
     3d0:	d8 01       	movw	r26, r16
     3d2:	11 96       	adiw	r26, 0x01	; 1
     3d4:	ec 91       	ld	r30, X
     3d6:	8e 2f       	mov	r24, r30
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	fc 01       	movw	r30, r24
     3dc:	31 97       	sbiw	r30, 0x01	; 1
     3de:	eb 30       	cpi	r30, 0x0B	; 11
     3e0:	f1 05       	cpc	r31, r1
     3e2:	08 f0       	brcs	.+2      	; 0x3e6 <can_cmd+0x80>
     3e4:	0e c5       	rjmp	.+2588   	; 0xe02 <can_cmd+0xa9c>
     3e6:	e2 5c       	subi	r30, 0xC2	; 194
     3e8:	ff 4f       	sbci	r31, 0xFF	; 255
     3ea:	0c 94 29 09 	jmp	0x1252	; 0x1252 <__tablejump2__>
          Can_set_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     3ee:	f8 01       	movw	r30, r16
     3f0:	86 81       	ldd	r24, Z+6	; 0x06
     3f2:	81 11       	cpse	r24, r1
     3f4:	f9 c3       	rjmp	.+2034   	; 0xbe8 <can_cmd+0x882>
     3f6:	0a c4       	rjmp	.+2068   	; 0xc0c <can_cmd+0x8a6>
          
      switch (cmd->cmd)
      {
        //------------      
        case CMD_TX:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     3f8:	d8 01       	movw	r26, r16
     3fa:	1b 96       	adiw	r26, 0x0b	; 11
     3fc:	8c 91       	ld	r24, X
     3fe:	1b 97       	sbiw	r26, 0x0b	; 11
     400:	88 23       	and	r24, r24
     402:	e9 f1       	breq	.+122    	; 0x47e <can_cmd+0x118>
     404:	14 96       	adiw	r26, 0x04	; 4
     406:	8c 91       	ld	r24, X
     408:	14 97       	sbiw	r26, 0x04	; 4
     40a:	98 2f       	mov	r25, r24
     40c:	92 95       	swap	r25
     40e:	96 95       	lsr	r25
     410:	97 70       	andi	r25, 0x07	; 7
     412:	15 96       	adiw	r26, 0x05	; 5
     414:	8c 91       	ld	r24, X
     416:	15 97       	sbiw	r26, 0x05	; 5
     418:	88 0f       	add	r24, r24
     41a:	88 0f       	add	r24, r24
     41c:	88 0f       	add	r24, r24
     41e:	89 0f       	add	r24, r25
     420:	80 93 f3 00 	sts	0x00F3, r24
     424:	13 96       	adiw	r26, 0x03	; 3
     426:	8c 91       	ld	r24, X
     428:	13 97       	sbiw	r26, 0x03	; 3
     42a:	98 2f       	mov	r25, r24
     42c:	92 95       	swap	r25
     42e:	96 95       	lsr	r25
     430:	97 70       	andi	r25, 0x07	; 7
     432:	14 96       	adiw	r26, 0x04	; 4
     434:	8c 91       	ld	r24, X
     436:	14 97       	sbiw	r26, 0x04	; 4
     438:	88 0f       	add	r24, r24
     43a:	88 0f       	add	r24, r24
     43c:	88 0f       	add	r24, r24
     43e:	89 0f       	add	r24, r25
     440:	80 93 f2 00 	sts	0x00F2, r24
     444:	12 96       	adiw	r26, 0x02	; 2
     446:	8c 91       	ld	r24, X
     448:	12 97       	sbiw	r26, 0x02	; 2
     44a:	98 2f       	mov	r25, r24
     44c:	92 95       	swap	r25
     44e:	96 95       	lsr	r25
     450:	97 70       	andi	r25, 0x07	; 7
     452:	13 96       	adiw	r26, 0x03	; 3
     454:	8c 91       	ld	r24, X
     456:	13 97       	sbiw	r26, 0x03	; 3
     458:	88 0f       	add	r24, r24
     45a:	88 0f       	add	r24, r24
     45c:	88 0f       	add	r24, r24
     45e:	89 0f       	add	r24, r25
     460:	80 93 f1 00 	sts	0x00F1, r24
     464:	12 96       	adiw	r26, 0x02	; 2
     466:	8c 91       	ld	r24, X
     468:	88 0f       	add	r24, r24
     46a:	88 0f       	add	r24, r24
     46c:	88 0f       	add	r24, r24
     46e:	80 93 f0 00 	sts	0x00F0, r24
     472:	ef ee       	ldi	r30, 0xEF	; 239
     474:	f0 e0       	ldi	r31, 0x00	; 0
     476:	80 81       	ld	r24, Z
     478:	80 61       	ori	r24, 0x10	; 16
     47a:	80 83       	st	Z, r24
     47c:	19 c0       	rjmp	.+50     	; 0x4b0 <can_cmd+0x14a>
          else              { Can_set_std_id(cmd->id.std);}
     47e:	f8 01       	movw	r30, r16
     480:	82 81       	ldd	r24, Z+2	; 0x02
     482:	86 95       	lsr	r24
     484:	86 95       	lsr	r24
     486:	86 95       	lsr	r24
     488:	93 81       	ldd	r25, Z+3	; 0x03
     48a:	f0 e2       	ldi	r31, 0x20	; 32
     48c:	9f 9f       	mul	r25, r31
     48e:	80 0d       	add	r24, r0
     490:	11 24       	eor	r1, r1
     492:	80 93 f3 00 	sts	0x00F3, r24
     496:	d8 01       	movw	r26, r16
     498:	12 96       	adiw	r26, 0x02	; 2
     49a:	8c 91       	ld	r24, X
     49c:	82 95       	swap	r24
     49e:	88 0f       	add	r24, r24
     4a0:	80 7e       	andi	r24, 0xE0	; 224
     4a2:	80 93 f2 00 	sts	0x00F2, r24
     4a6:	ef ee       	ldi	r30, 0xEF	; 239
     4a8:	f0 e0       	ldi	r31, 0x00	; 0
     4aa:	80 81       	ld	r24, Z
     4ac:	8f 7e       	andi	r24, 0xEF	; 239
     4ae:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     4b0:	f8 01       	movw	r30, r16
     4b2:	86 81       	ldd	r24, Z+6	; 0x06
     4b4:	88 23       	and	r24, r24
     4b6:	91 f0       	breq	.+36     	; 0x4dc <can_cmd+0x176>
     4b8:	80 e0       	ldi	r24, 0x00	; 0
     4ba:	2a ef       	ldi	r18, 0xFA	; 250
     4bc:	30 e0       	ldi	r19, 0x00	; 0
     4be:	d8 01       	movw	r26, r16
     4c0:	17 96       	adiw	r26, 0x07	; 7
     4c2:	ed 91       	ld	r30, X+
     4c4:	fc 91       	ld	r31, X
     4c6:	18 97       	sbiw	r26, 0x08	; 8
     4c8:	e8 0f       	add	r30, r24
     4ca:	f1 1d       	adc	r31, r1
     4cc:	90 81       	ld	r25, Z
     4ce:	f9 01       	movw	r30, r18
     4d0:	90 83       	st	Z, r25
     4d2:	8f 5f       	subi	r24, 0xFF	; 255
     4d4:	16 96       	adiw	r26, 0x06	; 6
     4d6:	9c 91       	ld	r25, X
     4d8:	89 17       	cp	r24, r25
     4da:	88 f3       	brcs	.-30     	; 0x4be <can_cmd+0x158>
          if (cmd->ctrl.rtr) Can_set_rtr(); 
     4dc:	d8 01       	movw	r26, r16
     4de:	1a 96       	adiw	r26, 0x0a	; 10
     4e0:	8c 91       	ld	r24, X
     4e2:	88 23       	and	r24, r24
     4e4:	31 f0       	breq	.+12     	; 0x4f2 <can_cmd+0x18c>
     4e6:	e0 ef       	ldi	r30, 0xF0	; 240
     4e8:	f0 e0       	ldi	r31, 0x00	; 0
     4ea:	80 81       	ld	r24, Z
     4ec:	84 60       	ori	r24, 0x04	; 4
     4ee:	80 83       	st	Z, r24
     4f0:	05 c0       	rjmp	.+10     	; 0x4fc <can_cmd+0x196>
            else Can_clear_rtr();    
     4f2:	e0 ef       	ldi	r30, 0xF0	; 240
     4f4:	f0 e0       	ldi	r31, 0x00	; 0
     4f6:	80 81       	ld	r24, Z
     4f8:	8b 7f       	andi	r24, 0xFB	; 251
     4fa:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     4fc:	ef ee       	ldi	r30, 0xEF	; 239
     4fe:	f0 e0       	ldi	r31, 0x00	; 0
     500:	90 81       	ld	r25, Z
     502:	d8 01       	movw	r26, r16
     504:	16 96       	adiw	r26, 0x06	; 6
     506:	8c 91       	ld	r24, X
     508:	89 2b       	or	r24, r25
     50a:	80 83       	st	Z, r24
          Can_config_tx();
     50c:	80 81       	ld	r24, Z
     50e:	8f 73       	andi	r24, 0x3F	; 63
     510:	80 83       	st	Z, r24
     512:	80 81       	ld	r24, Z
     514:	80 64       	ori	r24, 0x40	; 64
     516:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     518:	80 e0       	ldi	r24, 0x00	; 0
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          if (cmd->ctrl.rtr) Can_set_rtr(); 
            else Can_clear_rtr();    
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     51a:	7c c4       	rjmp	.+2296   	; 0xe14 <can_cmd+0xaae>
        //------------      
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     51c:	f8 01       	movw	r30, r16
     51e:	83 85       	ldd	r24, Z+11	; 0x0b
     520:	88 23       	and	r24, r24
     522:	81 f1       	breq	.+96     	; 0x584 <can_cmd+0x21e>
     524:	84 81       	ldd	r24, Z+4	; 0x04
     526:	98 2f       	mov	r25, r24
     528:	92 95       	swap	r25
     52a:	96 95       	lsr	r25
     52c:	97 70       	andi	r25, 0x07	; 7
     52e:	85 81       	ldd	r24, Z+5	; 0x05
     530:	88 0f       	add	r24, r24
     532:	88 0f       	add	r24, r24
     534:	88 0f       	add	r24, r24
     536:	89 0f       	add	r24, r25
     538:	80 93 f3 00 	sts	0x00F3, r24
     53c:	83 81       	ldd	r24, Z+3	; 0x03
     53e:	98 2f       	mov	r25, r24
     540:	92 95       	swap	r25
     542:	96 95       	lsr	r25
     544:	97 70       	andi	r25, 0x07	; 7
     546:	84 81       	ldd	r24, Z+4	; 0x04
     548:	88 0f       	add	r24, r24
     54a:	88 0f       	add	r24, r24
     54c:	88 0f       	add	r24, r24
     54e:	89 0f       	add	r24, r25
     550:	80 93 f2 00 	sts	0x00F2, r24
     554:	82 81       	ldd	r24, Z+2	; 0x02
     556:	98 2f       	mov	r25, r24
     558:	92 95       	swap	r25
     55a:	96 95       	lsr	r25
     55c:	97 70       	andi	r25, 0x07	; 7
     55e:	83 81       	ldd	r24, Z+3	; 0x03
     560:	88 0f       	add	r24, r24
     562:	88 0f       	add	r24, r24
     564:	88 0f       	add	r24, r24
     566:	89 0f       	add	r24, r25
     568:	80 93 f1 00 	sts	0x00F1, r24
     56c:	82 81       	ldd	r24, Z+2	; 0x02
     56e:	88 0f       	add	r24, r24
     570:	88 0f       	add	r24, r24
     572:	88 0f       	add	r24, r24
     574:	80 93 f0 00 	sts	0x00F0, r24
     578:	ef ee       	ldi	r30, 0xEF	; 239
     57a:	f0 e0       	ldi	r31, 0x00	; 0
     57c:	80 81       	ld	r24, Z
     57e:	80 61       	ori	r24, 0x10	; 16
     580:	80 83       	st	Z, r24
     582:	17 c0       	rjmp	.+46     	; 0x5b2 <can_cmd+0x24c>
          else              { Can_set_std_id(cmd->id.std);}
     584:	82 81       	ldd	r24, Z+2	; 0x02
     586:	86 95       	lsr	r24
     588:	86 95       	lsr	r24
     58a:	86 95       	lsr	r24
     58c:	93 81       	ldd	r25, Z+3	; 0x03
     58e:	b0 e2       	ldi	r27, 0x20	; 32
     590:	9b 9f       	mul	r25, r27
     592:	80 0d       	add	r24, r0
     594:	11 24       	eor	r1, r1
     596:	80 93 f3 00 	sts	0x00F3, r24
     59a:	f8 01       	movw	r30, r16
     59c:	82 81       	ldd	r24, Z+2	; 0x02
     59e:	82 95       	swap	r24
     5a0:	88 0f       	add	r24, r24
     5a2:	80 7e       	andi	r24, 0xE0	; 224
     5a4:	80 93 f2 00 	sts	0x00F2, r24
     5a8:	ef ee       	ldi	r30, 0xEF	; 239
     5aa:	f0 e0       	ldi	r31, 0x00	; 0
     5ac:	80 81       	ld	r24, Z
     5ae:	8f 7e       	andi	r24, 0xEF	; 239
     5b0:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     5b2:	d8 01       	movw	r26, r16
     5b4:	16 96       	adiw	r26, 0x06	; 6
     5b6:	8c 91       	ld	r24, X
     5b8:	88 23       	and	r24, r24
     5ba:	91 f0       	breq	.+36     	; 0x5e0 <can_cmd+0x27a>
     5bc:	80 e0       	ldi	r24, 0x00	; 0
     5be:	2a ef       	ldi	r18, 0xFA	; 250
     5c0:	30 e0       	ldi	r19, 0x00	; 0
     5c2:	d8 01       	movw	r26, r16
     5c4:	17 96       	adiw	r26, 0x07	; 7
     5c6:	ed 91       	ld	r30, X+
     5c8:	fc 91       	ld	r31, X
     5ca:	18 97       	sbiw	r26, 0x08	; 8
     5cc:	e8 0f       	add	r30, r24
     5ce:	f1 1d       	adc	r31, r1
     5d0:	90 81       	ld	r25, Z
     5d2:	f9 01       	movw	r30, r18
     5d4:	90 83       	st	Z, r25
     5d6:	8f 5f       	subi	r24, 0xFF	; 255
     5d8:	16 96       	adiw	r26, 0x06	; 6
     5da:	9c 91       	ld	r25, X
     5dc:	89 17       	cp	r24, r25
     5de:	88 f3       	brcs	.-30     	; 0x5c2 <can_cmd+0x25c>
          cmd->ctrl.rtr=0; Can_clear_rtr();
     5e0:	d8 01       	movw	r26, r16
     5e2:	1a 96       	adiw	r26, 0x0a	; 10
     5e4:	1c 92       	st	X, r1
     5e6:	1a 97       	sbiw	r26, 0x0a	; 10
     5e8:	e0 ef       	ldi	r30, 0xF0	; 240
     5ea:	f0 e0       	ldi	r31, 0x00	; 0
     5ec:	80 81       	ld	r24, Z
     5ee:	8b 7f       	andi	r24, 0xFB	; 251
     5f0:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     5f2:	ef ee       	ldi	r30, 0xEF	; 239
     5f4:	f0 e0       	ldi	r31, 0x00	; 0
     5f6:	90 81       	ld	r25, Z
     5f8:	16 96       	adiw	r26, 0x06	; 6
     5fa:	8c 91       	ld	r24, X
     5fc:	89 2b       	or	r24, r25
     5fe:	80 83       	st	Z, r24
          Can_config_tx();
     600:	80 81       	ld	r24, Z
     602:	8f 73       	andi	r24, 0x3F	; 63
     604:	80 83       	st	Z, r24
     606:	80 81       	ld	r24, Z
     608:	80 64       	ori	r24, 0x40	; 64
     60a:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     60c:	80 e0       	ldi	r24, 0x00	; 0
          else              { Can_set_std_id(cmd->id.std);}
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          cmd->ctrl.rtr=0; Can_clear_rtr();
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     60e:	02 c4       	rjmp	.+2052   	; 0xe14 <can_cmd+0xaae>
        //------------      
        case CMD_TX_REMOTE:       
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     610:	f8 01       	movw	r30, r16
     612:	83 85       	ldd	r24, Z+11	; 0x0b
     614:	88 23       	and	r24, r24
     616:	81 f1       	breq	.+96     	; 0x678 <can_cmd+0x312>
     618:	84 81       	ldd	r24, Z+4	; 0x04
     61a:	98 2f       	mov	r25, r24
     61c:	92 95       	swap	r25
     61e:	96 95       	lsr	r25
     620:	97 70       	andi	r25, 0x07	; 7
     622:	85 81       	ldd	r24, Z+5	; 0x05
     624:	88 0f       	add	r24, r24
     626:	88 0f       	add	r24, r24
     628:	88 0f       	add	r24, r24
     62a:	89 0f       	add	r24, r25
     62c:	80 93 f3 00 	sts	0x00F3, r24
     630:	83 81       	ldd	r24, Z+3	; 0x03
     632:	98 2f       	mov	r25, r24
     634:	92 95       	swap	r25
     636:	96 95       	lsr	r25
     638:	97 70       	andi	r25, 0x07	; 7
     63a:	84 81       	ldd	r24, Z+4	; 0x04
     63c:	88 0f       	add	r24, r24
     63e:	88 0f       	add	r24, r24
     640:	88 0f       	add	r24, r24
     642:	89 0f       	add	r24, r25
     644:	80 93 f2 00 	sts	0x00F2, r24
     648:	82 81       	ldd	r24, Z+2	; 0x02
     64a:	98 2f       	mov	r25, r24
     64c:	92 95       	swap	r25
     64e:	96 95       	lsr	r25
     650:	97 70       	andi	r25, 0x07	; 7
     652:	83 81       	ldd	r24, Z+3	; 0x03
     654:	88 0f       	add	r24, r24
     656:	88 0f       	add	r24, r24
     658:	88 0f       	add	r24, r24
     65a:	89 0f       	add	r24, r25
     65c:	80 93 f1 00 	sts	0x00F1, r24
     660:	82 81       	ldd	r24, Z+2	; 0x02
     662:	88 0f       	add	r24, r24
     664:	88 0f       	add	r24, r24
     666:	88 0f       	add	r24, r24
     668:	80 93 f0 00 	sts	0x00F0, r24
     66c:	ef ee       	ldi	r30, 0xEF	; 239
     66e:	f0 e0       	ldi	r31, 0x00	; 0
     670:	80 81       	ld	r24, Z
     672:	80 61       	ori	r24, 0x10	; 16
     674:	80 83       	st	Z, r24
     676:	17 c0       	rjmp	.+46     	; 0x6a6 <can_cmd+0x340>
          else              { Can_set_std_id(cmd->id.std);}
     678:	82 81       	ldd	r24, Z+2	; 0x02
     67a:	86 95       	lsr	r24
     67c:	86 95       	lsr	r24
     67e:	86 95       	lsr	r24
     680:	93 81       	ldd	r25, Z+3	; 0x03
     682:	b0 e2       	ldi	r27, 0x20	; 32
     684:	9b 9f       	mul	r25, r27
     686:	80 0d       	add	r24, r0
     688:	11 24       	eor	r1, r1
     68a:	80 93 f3 00 	sts	0x00F3, r24
     68e:	f8 01       	movw	r30, r16
     690:	82 81       	ldd	r24, Z+2	; 0x02
     692:	82 95       	swap	r24
     694:	88 0f       	add	r24, r24
     696:	80 7e       	andi	r24, 0xE0	; 224
     698:	80 93 f2 00 	sts	0x00F2, r24
     69c:	ef ee       	ldi	r30, 0xEF	; 239
     69e:	f0 e0       	ldi	r31, 0x00	; 0
     6a0:	80 81       	ld	r24, Z
     6a2:	8f 7e       	andi	r24, 0xEF	; 239
     6a4:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtr();
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	d8 01       	movw	r26, r16
     6aa:	1a 96       	adiw	r26, 0x0a	; 10
     6ac:	8c 93       	st	X, r24
     6ae:	1a 97       	sbiw	r26, 0x0a	; 10
     6b0:	e0 ef       	ldi	r30, 0xF0	; 240
     6b2:	f0 e0       	ldi	r31, 0x00	; 0
     6b4:	80 81       	ld	r24, Z
     6b6:	84 60       	ori	r24, 0x04	; 4
     6b8:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     6ba:	ef ee       	ldi	r30, 0xEF	; 239
     6bc:	f0 e0       	ldi	r31, 0x00	; 0
     6be:	90 81       	ld	r25, Z
     6c0:	16 96       	adiw	r26, 0x06	; 6
     6c2:	8c 91       	ld	r24, X
     6c4:	89 2b       	or	r24, r25
     6c6:	80 83       	st	Z, r24
          Can_config_tx();
     6c8:	80 81       	ld	r24, Z
     6ca:	8f 73       	andi	r24, 0x3F	; 63
     6cc:	80 83       	st	Z, r24
     6ce:	80 81       	ld	r24, Z
     6d0:	80 64       	ori	r24, 0x40	; 64
     6d2:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     6d4:	80 e0       	ldi	r24, 0x00	; 0
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
          cmd->ctrl.rtr=1; Can_set_rtr();
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     6d6:	9e c3       	rjmp	.+1852   	; 0xe14 <can_cmd+0xaae>
        //------------      
        case CMD_RX:
          u32_temp=0; Can_set_ext_msk(u32_temp);
     6d8:	19 82       	std	Y+1, r1	; 0x01
     6da:	1a 82       	std	Y+2, r1	; 0x02
     6dc:	1b 82       	std	Y+3, r1	; 0x03
     6de:	1c 82       	std	Y+4, r1	; 0x04
     6e0:	10 92 f7 00 	sts	0x00F7, r1
     6e4:	8a 81       	ldd	r24, Y+2	; 0x02
     6e6:	98 2f       	mov	r25, r24
     6e8:	92 95       	swap	r25
     6ea:	96 95       	lsr	r25
     6ec:	97 70       	andi	r25, 0x07	; 7
     6ee:	8b 81       	ldd	r24, Y+3	; 0x03
     6f0:	88 0f       	add	r24, r24
     6f2:	88 0f       	add	r24, r24
     6f4:	88 0f       	add	r24, r24
     6f6:	89 0f       	add	r24, r25
     6f8:	80 93 f6 00 	sts	0x00F6, r24
     6fc:	89 81       	ldd	r24, Y+1	; 0x01
     6fe:	98 2f       	mov	r25, r24
     700:	92 95       	swap	r25
     702:	96 95       	lsr	r25
     704:	97 70       	andi	r25, 0x07	; 7
     706:	8a 81       	ldd	r24, Y+2	; 0x02
     708:	88 0f       	add	r24, r24
     70a:	88 0f       	add	r24, r24
     70c:	88 0f       	add	r24, r24
     70e:	89 0f       	add	r24, r25
     710:	80 93 f5 00 	sts	0x00F5, r24
     714:	89 81       	ldd	r24, Y+1	; 0x01
     716:	88 0f       	add	r24, r24
     718:	88 0f       	add	r24, r24
     71a:	88 0f       	add	r24, r24
     71c:	24 ef       	ldi	r18, 0xF4	; 244
     71e:	30 e0       	ldi	r19, 0x00	; 0
     720:	f9 01       	movw	r30, r18
     722:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     724:	ef ee       	ldi	r30, 0xEF	; 239
     726:	f0 e0       	ldi	r31, 0x00	; 0
     728:	90 81       	ld	r25, Z
     72a:	d8 01       	movw	r26, r16
     72c:	16 96       	adiw	r26, 0x06	; 6
     72e:	8c 91       	ld	r24, X
     730:	89 2b       	or	r24, r25
     732:	80 83       	st	Z, r24
          Can_clear_rtrmsk();
     734:	d9 01       	movw	r26, r18
     736:	8c 91       	ld	r24, X
     738:	8b 7f       	andi	r24, 0xFB	; 251
     73a:	8c 93       	st	X, r24
          Can_clear_idemsk();
     73c:	8c 91       	ld	r24, X
     73e:	8e 7f       	andi	r24, 0xFE	; 254
     740:	8c 93       	st	X, r24
          Can_config_rx();       
     742:	80 81       	ld	r24, Z
     744:	8f 73       	andi	r24, 0x3F	; 63
     746:	80 83       	st	Z, r24
     748:	80 81       	ld	r24, Z
     74a:	80 68       	ori	r24, 0x80	; 128
     74c:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     74e:	80 e0       	ldi	r24, 0x00	; 0
          u32_temp=0; Can_set_ext_msk(u32_temp);
          Can_set_dlc(cmd->dlc);
          Can_clear_rtrmsk();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     750:	61 c3       	rjmp	.+1730   	; 0xe14 <can_cmd+0xaae>
        //------------      
        case CMD_RX_DATA:
          u32_temp=0; Can_set_ext_msk(u32_temp);
     752:	19 82       	std	Y+1, r1	; 0x01
     754:	1a 82       	std	Y+2, r1	; 0x02
     756:	1b 82       	std	Y+3, r1	; 0x03
     758:	1c 82       	std	Y+4, r1	; 0x04
     75a:	10 92 f7 00 	sts	0x00F7, r1
     75e:	8a 81       	ldd	r24, Y+2	; 0x02
     760:	98 2f       	mov	r25, r24
     762:	92 95       	swap	r25
     764:	96 95       	lsr	r25
     766:	97 70       	andi	r25, 0x07	; 7
     768:	8b 81       	ldd	r24, Y+3	; 0x03
     76a:	88 0f       	add	r24, r24
     76c:	88 0f       	add	r24, r24
     76e:	88 0f       	add	r24, r24
     770:	89 0f       	add	r24, r25
     772:	80 93 f6 00 	sts	0x00F6, r24
     776:	89 81       	ldd	r24, Y+1	; 0x01
     778:	98 2f       	mov	r25, r24
     77a:	92 95       	swap	r25
     77c:	96 95       	lsr	r25
     77e:	97 70       	andi	r25, 0x07	; 7
     780:	8a 81       	ldd	r24, Y+2	; 0x02
     782:	88 0f       	add	r24, r24
     784:	88 0f       	add	r24, r24
     786:	88 0f       	add	r24, r24
     788:	89 0f       	add	r24, r25
     78a:	80 93 f5 00 	sts	0x00F5, r24
     78e:	89 81       	ldd	r24, Y+1	; 0x01
     790:	88 0f       	add	r24, r24
     792:	88 0f       	add	r24, r24
     794:	88 0f       	add	r24, r24
     796:	44 ef       	ldi	r20, 0xF4	; 244
     798:	50 e0       	ldi	r21, 0x00	; 0
     79a:	fa 01       	movw	r30, r20
     79c:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     79e:	ef ee       	ldi	r30, 0xEF	; 239
     7a0:	f0 e0       	ldi	r31, 0x00	; 0
     7a2:	90 81       	ld	r25, Z
     7a4:	d8 01       	movw	r26, r16
     7a6:	16 96       	adiw	r26, 0x06	; 6
     7a8:	8c 91       	ld	r24, X
     7aa:	16 97       	sbiw	r26, 0x06	; 6
     7ac:	89 2b       	or	r24, r25
     7ae:	80 83       	st	Z, r24
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
     7b0:	1a 96       	adiw	r26, 0x0a	; 10
     7b2:	1c 92       	st	X, r1
     7b4:	da 01       	movw	r26, r20
     7b6:	8c 91       	ld	r24, X
     7b8:	84 60       	ori	r24, 0x04	; 4
     7ba:	8c 93       	st	X, r24
     7bc:	20 ef       	ldi	r18, 0xF0	; 240
     7be:	30 e0       	ldi	r19, 0x00	; 0
     7c0:	d9 01       	movw	r26, r18
     7c2:	8c 91       	ld	r24, X
     7c4:	8b 7f       	andi	r24, 0xFB	; 251
     7c6:	8c 93       	st	X, r24
          Can_clear_idemsk();
     7c8:	da 01       	movw	r26, r20
     7ca:	8c 91       	ld	r24, X
     7cc:	8e 7f       	andi	r24, 0xFE	; 254
     7ce:	8c 93       	st	X, r24
          Can_config_rx();       
     7d0:	80 81       	ld	r24, Z
     7d2:	8f 73       	andi	r24, 0x3F	; 63
     7d4:	80 83       	st	Z, r24
     7d6:	80 81       	ld	r24, Z
     7d8:	80 68       	ori	r24, 0x80	; 128
     7da:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     7dc:	80 e0       	ldi	r24, 0x00	; 0
          u32_temp=0; Can_set_ext_msk(u32_temp);
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     7de:	1a c3       	rjmp	.+1588   	; 0xe14 <can_cmd+0xaae>
        //------------      
        case CMD_RX_REMOTE:
          u32_temp=0; Can_set_ext_msk(u32_temp);
     7e0:	19 82       	std	Y+1, r1	; 0x01
     7e2:	1a 82       	std	Y+2, r1	; 0x02
     7e4:	1b 82       	std	Y+3, r1	; 0x03
     7e6:	1c 82       	std	Y+4, r1	; 0x04
     7e8:	10 92 f7 00 	sts	0x00F7, r1
     7ec:	8a 81       	ldd	r24, Y+2	; 0x02
     7ee:	98 2f       	mov	r25, r24
     7f0:	92 95       	swap	r25
     7f2:	96 95       	lsr	r25
     7f4:	97 70       	andi	r25, 0x07	; 7
     7f6:	8b 81       	ldd	r24, Y+3	; 0x03
     7f8:	88 0f       	add	r24, r24
     7fa:	88 0f       	add	r24, r24
     7fc:	88 0f       	add	r24, r24
     7fe:	89 0f       	add	r24, r25
     800:	80 93 f6 00 	sts	0x00F6, r24
     804:	89 81       	ldd	r24, Y+1	; 0x01
     806:	98 2f       	mov	r25, r24
     808:	92 95       	swap	r25
     80a:	96 95       	lsr	r25
     80c:	97 70       	andi	r25, 0x07	; 7
     80e:	8a 81       	ldd	r24, Y+2	; 0x02
     810:	88 0f       	add	r24, r24
     812:	88 0f       	add	r24, r24
     814:	88 0f       	add	r24, r24
     816:	89 0f       	add	r24, r25
     818:	80 93 f5 00 	sts	0x00F5, r24
     81c:	89 81       	ldd	r24, Y+1	; 0x01
     81e:	88 0f       	add	r24, r24
     820:	88 0f       	add	r24, r24
     822:	88 0f       	add	r24, r24
     824:	44 ef       	ldi	r20, 0xF4	; 244
     826:	50 e0       	ldi	r21, 0x00	; 0
     828:	fa 01       	movw	r30, r20
     82a:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     82c:	ef ee       	ldi	r30, 0xEF	; 239
     82e:	f0 e0       	ldi	r31, 0x00	; 0
     830:	90 81       	ld	r25, Z
     832:	d8 01       	movw	r26, r16
     834:	16 96       	adiw	r26, 0x06	; 6
     836:	8c 91       	ld	r24, X
     838:	16 97       	sbiw	r26, 0x06	; 6
     83a:	89 2b       	or	r24, r25
     83c:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
     83e:	81 e0       	ldi	r24, 0x01	; 1
     840:	1a 96       	adiw	r26, 0x0a	; 10
     842:	8c 93       	st	X, r24
     844:	da 01       	movw	r26, r20
     846:	8c 91       	ld	r24, X
     848:	84 60       	ori	r24, 0x04	; 4
     84a:	8c 93       	st	X, r24
     84c:	20 ef       	ldi	r18, 0xF0	; 240
     84e:	30 e0       	ldi	r19, 0x00	; 0
     850:	d9 01       	movw	r26, r18
     852:	8c 91       	ld	r24, X
     854:	84 60       	ori	r24, 0x04	; 4
     856:	8c 93       	st	X, r24
          Can_clear_rplv();
     858:	80 81       	ld	r24, Z
     85a:	8f 7d       	andi	r24, 0xDF	; 223
     85c:	80 83       	st	Z, r24
          Can_clear_idemsk();
     85e:	da 01       	movw	r26, r20
     860:	8c 91       	ld	r24, X
     862:	8e 7f       	andi	r24, 0xFE	; 254
     864:	8c 93       	st	X, r24
          Can_config_rx();       
     866:	80 81       	ld	r24, Z
     868:	8f 73       	andi	r24, 0x3F	; 63
     86a:	80 83       	st	Z, r24
     86c:	80 81       	ld	r24, Z
     86e:	80 68       	ori	r24, 0x80	; 128
     870:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     872:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_clear_rplv();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     874:	cf c2       	rjmp	.+1438   	; 0xe14 <can_cmd+0xaae>
        //------------      
        case CMD_RX_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     876:	f8 01       	movw	r30, r16
     878:	83 85       	ldd	r24, Z+11	; 0x0b
     87a:	88 23       	and	r24, r24
     87c:	81 f1       	breq	.+96     	; 0x8de <can_cmd+0x578>
     87e:	84 81       	ldd	r24, Z+4	; 0x04
     880:	98 2f       	mov	r25, r24
     882:	92 95       	swap	r25
     884:	96 95       	lsr	r25
     886:	97 70       	andi	r25, 0x07	; 7
     888:	85 81       	ldd	r24, Z+5	; 0x05
     88a:	88 0f       	add	r24, r24
     88c:	88 0f       	add	r24, r24
     88e:	88 0f       	add	r24, r24
     890:	89 0f       	add	r24, r25
     892:	80 93 f3 00 	sts	0x00F3, r24
     896:	83 81       	ldd	r24, Z+3	; 0x03
     898:	98 2f       	mov	r25, r24
     89a:	92 95       	swap	r25
     89c:	96 95       	lsr	r25
     89e:	97 70       	andi	r25, 0x07	; 7
     8a0:	84 81       	ldd	r24, Z+4	; 0x04
     8a2:	88 0f       	add	r24, r24
     8a4:	88 0f       	add	r24, r24
     8a6:	88 0f       	add	r24, r24
     8a8:	89 0f       	add	r24, r25
     8aa:	80 93 f2 00 	sts	0x00F2, r24
     8ae:	82 81       	ldd	r24, Z+2	; 0x02
     8b0:	98 2f       	mov	r25, r24
     8b2:	92 95       	swap	r25
     8b4:	96 95       	lsr	r25
     8b6:	97 70       	andi	r25, 0x07	; 7
     8b8:	83 81       	ldd	r24, Z+3	; 0x03
     8ba:	88 0f       	add	r24, r24
     8bc:	88 0f       	add	r24, r24
     8be:	88 0f       	add	r24, r24
     8c0:	89 0f       	add	r24, r25
     8c2:	80 93 f1 00 	sts	0x00F1, r24
     8c6:	82 81       	ldd	r24, Z+2	; 0x02
     8c8:	88 0f       	add	r24, r24
     8ca:	88 0f       	add	r24, r24
     8cc:	88 0f       	add	r24, r24
     8ce:	80 93 f0 00 	sts	0x00F0, r24
     8d2:	ef ee       	ldi	r30, 0xEF	; 239
     8d4:	f0 e0       	ldi	r31, 0x00	; 0
     8d6:	80 81       	ld	r24, Z
     8d8:	80 61       	ori	r24, 0x10	; 16
     8da:	80 83       	st	Z, r24
     8dc:	17 c0       	rjmp	.+46     	; 0x90c <can_cmd+0x5a6>
          else              { Can_set_std_id(cmd->id.std);}
     8de:	82 81       	ldd	r24, Z+2	; 0x02
     8e0:	86 95       	lsr	r24
     8e2:	86 95       	lsr	r24
     8e4:	86 95       	lsr	r24
     8e6:	93 81       	ldd	r25, Z+3	; 0x03
     8e8:	b0 e2       	ldi	r27, 0x20	; 32
     8ea:	9b 9f       	mul	r25, r27
     8ec:	80 0d       	add	r24, r0
     8ee:	11 24       	eor	r1, r1
     8f0:	80 93 f3 00 	sts	0x00F3, r24
     8f4:	f8 01       	movw	r30, r16
     8f6:	82 81       	ldd	r24, Z+2	; 0x02
     8f8:	82 95       	swap	r24
     8fa:	88 0f       	add	r24, r24
     8fc:	80 7e       	andi	r24, 0xE0	; 224
     8fe:	80 93 f2 00 	sts	0x00F2, r24
     902:	ef ee       	ldi	r30, 0xEF	; 239
     904:	f0 e0       	ldi	r31, 0x00	; 0
     906:	80 81       	ld	r24, Z
     908:	8f 7e       	andi	r24, 0xEF	; 239
     90a:	80 83       	st	Z, r24
          u32_temp=~0; Can_set_ext_msk(u32_temp);
     90c:	8f ef       	ldi	r24, 0xFF	; 255
     90e:	9f ef       	ldi	r25, 0xFF	; 255
     910:	dc 01       	movw	r26, r24
     912:	89 83       	std	Y+1, r24	; 0x01
     914:	9a 83       	std	Y+2, r25	; 0x02
     916:	ab 83       	std	Y+3, r26	; 0x03
     918:	bc 83       	std	Y+4, r27	; 0x04
     91a:	80 93 f7 00 	sts	0x00F7, r24
     91e:	8a 81       	ldd	r24, Y+2	; 0x02
     920:	98 2f       	mov	r25, r24
     922:	92 95       	swap	r25
     924:	96 95       	lsr	r25
     926:	97 70       	andi	r25, 0x07	; 7
     928:	8b 81       	ldd	r24, Y+3	; 0x03
     92a:	88 0f       	add	r24, r24
     92c:	88 0f       	add	r24, r24
     92e:	88 0f       	add	r24, r24
     930:	89 0f       	add	r24, r25
     932:	80 93 f6 00 	sts	0x00F6, r24
     936:	89 81       	ldd	r24, Y+1	; 0x01
     938:	98 2f       	mov	r25, r24
     93a:	92 95       	swap	r25
     93c:	96 95       	lsr	r25
     93e:	97 70       	andi	r25, 0x07	; 7
     940:	8a 81       	ldd	r24, Y+2	; 0x02
     942:	88 0f       	add	r24, r24
     944:	88 0f       	add	r24, r24
     946:	88 0f       	add	r24, r24
     948:	89 0f       	add	r24, r25
     94a:	80 93 f5 00 	sts	0x00F5, r24
     94e:	89 81       	ldd	r24, Y+1	; 0x01
     950:	88 0f       	add	r24, r24
     952:	88 0f       	add	r24, r24
     954:	88 0f       	add	r24, r24
     956:	24 ef       	ldi	r18, 0xF4	; 244
     958:	30 e0       	ldi	r19, 0x00	; 0
     95a:	d9 01       	movw	r26, r18
     95c:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
     95e:	ef ee       	ldi	r30, 0xEF	; 239
     960:	f0 e0       	ldi	r31, 0x00	; 0
     962:	90 81       	ld	r25, Z
     964:	d8 01       	movw	r26, r16
     966:	16 96       	adiw	r26, 0x06	; 6
     968:	8c 91       	ld	r24, X
     96a:	89 2b       	or	r24, r25
     96c:	80 83       	st	Z, r24
          Can_clear_rtrmsk();
     96e:	d9 01       	movw	r26, r18
     970:	8c 91       	ld	r24, X
     972:	8b 7f       	andi	r24, 0xFB	; 251
     974:	8c 93       	st	X, r24
          Can_set_idemsk();
     976:	8c 91       	ld	r24, X
     978:	81 60       	ori	r24, 0x01	; 1
     97a:	8c 93       	st	X, r24
          Can_config_rx();       
     97c:	80 81       	ld	r24, Z
     97e:	8f 73       	andi	r24, 0x3F	; 63
     980:	80 83       	st	Z, r24
     982:	80 81       	ld	r24, Z
     984:	80 68       	ori	r24, 0x80	; 128
     986:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     988:	80 e0       	ldi	r24, 0x00	; 0
          u32_temp=~0; Can_set_ext_msk(u32_temp);
          Can_set_dlc(cmd->dlc);
          Can_clear_rtrmsk();
          Can_set_idemsk();
          Can_config_rx();       
          break;
     98a:	44 c2       	rjmp	.+1160   	; 0xe14 <can_cmd+0xaae>
        //------------      
        case CMD_RX_DATA_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     98c:	f8 01       	movw	r30, r16
     98e:	83 85       	ldd	r24, Z+11	; 0x0b
     990:	88 23       	and	r24, r24
     992:	81 f1       	breq	.+96     	; 0x9f4 <can_cmd+0x68e>
     994:	84 81       	ldd	r24, Z+4	; 0x04
     996:	98 2f       	mov	r25, r24
     998:	92 95       	swap	r25
     99a:	96 95       	lsr	r25
     99c:	97 70       	andi	r25, 0x07	; 7
     99e:	85 81       	ldd	r24, Z+5	; 0x05
     9a0:	88 0f       	add	r24, r24
     9a2:	88 0f       	add	r24, r24
     9a4:	88 0f       	add	r24, r24
     9a6:	89 0f       	add	r24, r25
     9a8:	80 93 f3 00 	sts	0x00F3, r24
     9ac:	83 81       	ldd	r24, Z+3	; 0x03
     9ae:	98 2f       	mov	r25, r24
     9b0:	92 95       	swap	r25
     9b2:	96 95       	lsr	r25
     9b4:	97 70       	andi	r25, 0x07	; 7
     9b6:	84 81       	ldd	r24, Z+4	; 0x04
     9b8:	88 0f       	add	r24, r24
     9ba:	88 0f       	add	r24, r24
     9bc:	88 0f       	add	r24, r24
     9be:	89 0f       	add	r24, r25
     9c0:	80 93 f2 00 	sts	0x00F2, r24
     9c4:	82 81       	ldd	r24, Z+2	; 0x02
     9c6:	98 2f       	mov	r25, r24
     9c8:	92 95       	swap	r25
     9ca:	96 95       	lsr	r25
     9cc:	97 70       	andi	r25, 0x07	; 7
     9ce:	83 81       	ldd	r24, Z+3	; 0x03
     9d0:	88 0f       	add	r24, r24
     9d2:	88 0f       	add	r24, r24
     9d4:	88 0f       	add	r24, r24
     9d6:	89 0f       	add	r24, r25
     9d8:	80 93 f1 00 	sts	0x00F1, r24
     9dc:	82 81       	ldd	r24, Z+2	; 0x02
     9de:	88 0f       	add	r24, r24
     9e0:	88 0f       	add	r24, r24
     9e2:	88 0f       	add	r24, r24
     9e4:	80 93 f0 00 	sts	0x00F0, r24
     9e8:	ef ee       	ldi	r30, 0xEF	; 239
     9ea:	f0 e0       	ldi	r31, 0x00	; 0
     9ec:	80 81       	ld	r24, Z
     9ee:	80 61       	ori	r24, 0x10	; 16
     9f0:	80 83       	st	Z, r24
     9f2:	17 c0       	rjmp	.+46     	; 0xa22 <can_cmd+0x6bc>
          else              { Can_set_std_id(cmd->id.std);}
     9f4:	82 81       	ldd	r24, Z+2	; 0x02
     9f6:	86 95       	lsr	r24
     9f8:	86 95       	lsr	r24
     9fa:	86 95       	lsr	r24
     9fc:	93 81       	ldd	r25, Z+3	; 0x03
     9fe:	b0 e2       	ldi	r27, 0x20	; 32
     a00:	9b 9f       	mul	r25, r27
     a02:	80 0d       	add	r24, r0
     a04:	11 24       	eor	r1, r1
     a06:	80 93 f3 00 	sts	0x00F3, r24
     a0a:	f8 01       	movw	r30, r16
     a0c:	82 81       	ldd	r24, Z+2	; 0x02
     a0e:	82 95       	swap	r24
     a10:	88 0f       	add	r24, r24
     a12:	80 7e       	andi	r24, 0xE0	; 224
     a14:	80 93 f2 00 	sts	0x00F2, r24
     a18:	ef ee       	ldi	r30, 0xEF	; 239
     a1a:	f0 e0       	ldi	r31, 0x00	; 0
     a1c:	80 81       	ld	r24, Z
     a1e:	8f 7e       	andi	r24, 0xEF	; 239
     a20:	80 83       	st	Z, r24
          u32_temp=~0; Can_set_ext_msk(u32_temp);
     a22:	8f ef       	ldi	r24, 0xFF	; 255
     a24:	9f ef       	ldi	r25, 0xFF	; 255
     a26:	dc 01       	movw	r26, r24
     a28:	89 83       	std	Y+1, r24	; 0x01
     a2a:	9a 83       	std	Y+2, r25	; 0x02
     a2c:	ab 83       	std	Y+3, r26	; 0x03
     a2e:	bc 83       	std	Y+4, r27	; 0x04
     a30:	80 93 f7 00 	sts	0x00F7, r24
     a34:	8a 81       	ldd	r24, Y+2	; 0x02
     a36:	98 2f       	mov	r25, r24
     a38:	92 95       	swap	r25
     a3a:	96 95       	lsr	r25
     a3c:	97 70       	andi	r25, 0x07	; 7
     a3e:	8b 81       	ldd	r24, Y+3	; 0x03
     a40:	88 0f       	add	r24, r24
     a42:	88 0f       	add	r24, r24
     a44:	88 0f       	add	r24, r24
     a46:	89 0f       	add	r24, r25
     a48:	80 93 f6 00 	sts	0x00F6, r24
     a4c:	89 81       	ldd	r24, Y+1	; 0x01
     a4e:	98 2f       	mov	r25, r24
     a50:	92 95       	swap	r25
     a52:	96 95       	lsr	r25
     a54:	97 70       	andi	r25, 0x07	; 7
     a56:	8a 81       	ldd	r24, Y+2	; 0x02
     a58:	88 0f       	add	r24, r24
     a5a:	88 0f       	add	r24, r24
     a5c:	88 0f       	add	r24, r24
     a5e:	89 0f       	add	r24, r25
     a60:	80 93 f5 00 	sts	0x00F5, r24
     a64:	89 81       	ldd	r24, Y+1	; 0x01
     a66:	88 0f       	add	r24, r24
     a68:	88 0f       	add	r24, r24
     a6a:	88 0f       	add	r24, r24
     a6c:	44 ef       	ldi	r20, 0xF4	; 244
     a6e:	50 e0       	ldi	r21, 0x00	; 0
     a70:	da 01       	movw	r26, r20
     a72:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
     a74:	ef ee       	ldi	r30, 0xEF	; 239
     a76:	f0 e0       	ldi	r31, 0x00	; 0
     a78:	90 81       	ld	r25, Z
     a7a:	d8 01       	movw	r26, r16
     a7c:	16 96       	adiw	r26, 0x06	; 6
     a7e:	8c 91       	ld	r24, X
     a80:	16 97       	sbiw	r26, 0x06	; 6
     a82:	89 2b       	or	r24, r25
     a84:	80 83       	st	Z, r24
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
     a86:	1a 96       	adiw	r26, 0x0a	; 10
     a88:	1c 92       	st	X, r1
     a8a:	da 01       	movw	r26, r20
     a8c:	8c 91       	ld	r24, X
     a8e:	84 60       	ori	r24, 0x04	; 4
     a90:	8c 93       	st	X, r24
     a92:	20 ef       	ldi	r18, 0xF0	; 240
     a94:	30 e0       	ldi	r19, 0x00	; 0
     a96:	d9 01       	movw	r26, r18
     a98:	8c 91       	ld	r24, X
     a9a:	8b 7f       	andi	r24, 0xFB	; 251
     a9c:	8c 93       	st	X, r24
          Can_set_idemsk();
     a9e:	da 01       	movw	r26, r20
     aa0:	8c 91       	ld	r24, X
     aa2:	81 60       	ori	r24, 0x01	; 1
     aa4:	8c 93       	st	X, r24
          Can_config_rx();       
     aa6:	80 81       	ld	r24, Z
     aa8:	8f 73       	andi	r24, 0x3F	; 63
     aaa:	80 83       	st	Z, r24
     aac:	80 81       	ld	r24, Z
     aae:	80 68       	ori	r24, 0x80	; 128
     ab0:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     ab2:	80 e0       	ldi	r24, 0x00	; 0
          u32_temp=~0; Can_set_ext_msk(u32_temp);
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
          Can_set_idemsk();
          Can_config_rx();       
          break;
     ab4:	af c1       	rjmp	.+862    	; 0xe14 <can_cmd+0xaae>
        //------------      
        case CMD_RX_REMOTE_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     ab6:	f8 01       	movw	r30, r16
     ab8:	83 85       	ldd	r24, Z+11	; 0x0b
     aba:	88 23       	and	r24, r24
     abc:	81 f1       	breq	.+96     	; 0xb1e <can_cmd+0x7b8>
     abe:	84 81       	ldd	r24, Z+4	; 0x04
     ac0:	98 2f       	mov	r25, r24
     ac2:	92 95       	swap	r25
     ac4:	96 95       	lsr	r25
     ac6:	97 70       	andi	r25, 0x07	; 7
     ac8:	85 81       	ldd	r24, Z+5	; 0x05
     aca:	88 0f       	add	r24, r24
     acc:	88 0f       	add	r24, r24
     ace:	88 0f       	add	r24, r24
     ad0:	89 0f       	add	r24, r25
     ad2:	80 93 f3 00 	sts	0x00F3, r24
     ad6:	83 81       	ldd	r24, Z+3	; 0x03
     ad8:	98 2f       	mov	r25, r24
     ada:	92 95       	swap	r25
     adc:	96 95       	lsr	r25
     ade:	97 70       	andi	r25, 0x07	; 7
     ae0:	84 81       	ldd	r24, Z+4	; 0x04
     ae2:	88 0f       	add	r24, r24
     ae4:	88 0f       	add	r24, r24
     ae6:	88 0f       	add	r24, r24
     ae8:	89 0f       	add	r24, r25
     aea:	80 93 f2 00 	sts	0x00F2, r24
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	98 2f       	mov	r25, r24
     af2:	92 95       	swap	r25
     af4:	96 95       	lsr	r25
     af6:	97 70       	andi	r25, 0x07	; 7
     af8:	83 81       	ldd	r24, Z+3	; 0x03
     afa:	88 0f       	add	r24, r24
     afc:	88 0f       	add	r24, r24
     afe:	88 0f       	add	r24, r24
     b00:	89 0f       	add	r24, r25
     b02:	80 93 f1 00 	sts	0x00F1, r24
     b06:	82 81       	ldd	r24, Z+2	; 0x02
     b08:	88 0f       	add	r24, r24
     b0a:	88 0f       	add	r24, r24
     b0c:	88 0f       	add	r24, r24
     b0e:	80 93 f0 00 	sts	0x00F0, r24
     b12:	ef ee       	ldi	r30, 0xEF	; 239
     b14:	f0 e0       	ldi	r31, 0x00	; 0
     b16:	80 81       	ld	r24, Z
     b18:	80 61       	ori	r24, 0x10	; 16
     b1a:	80 83       	st	Z, r24
     b1c:	17 c0       	rjmp	.+46     	; 0xb4c <can_cmd+0x7e6>
          else              { Can_set_std_id(cmd->id.std);}
     b1e:	82 81       	ldd	r24, Z+2	; 0x02
     b20:	86 95       	lsr	r24
     b22:	86 95       	lsr	r24
     b24:	86 95       	lsr	r24
     b26:	93 81       	ldd	r25, Z+3	; 0x03
     b28:	b0 e2       	ldi	r27, 0x20	; 32
     b2a:	9b 9f       	mul	r25, r27
     b2c:	80 0d       	add	r24, r0
     b2e:	11 24       	eor	r1, r1
     b30:	80 93 f3 00 	sts	0x00F3, r24
     b34:	f8 01       	movw	r30, r16
     b36:	82 81       	ldd	r24, Z+2	; 0x02
     b38:	82 95       	swap	r24
     b3a:	88 0f       	add	r24, r24
     b3c:	80 7e       	andi	r24, 0xE0	; 224
     b3e:	80 93 f2 00 	sts	0x00F2, r24
     b42:	ef ee       	ldi	r30, 0xEF	; 239
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	80 81       	ld	r24, Z
     b48:	8f 7e       	andi	r24, 0xEF	; 239
     b4a:	80 83       	st	Z, r24
          u32_temp=~0; Can_set_ext_msk(u32_temp);
     b4c:	8f ef       	ldi	r24, 0xFF	; 255
     b4e:	9f ef       	ldi	r25, 0xFF	; 255
     b50:	dc 01       	movw	r26, r24
     b52:	89 83       	std	Y+1, r24	; 0x01
     b54:	9a 83       	std	Y+2, r25	; 0x02
     b56:	ab 83       	std	Y+3, r26	; 0x03
     b58:	bc 83       	std	Y+4, r27	; 0x04
     b5a:	80 93 f7 00 	sts	0x00F7, r24
     b5e:	8a 81       	ldd	r24, Y+2	; 0x02
     b60:	98 2f       	mov	r25, r24
     b62:	92 95       	swap	r25
     b64:	96 95       	lsr	r25
     b66:	97 70       	andi	r25, 0x07	; 7
     b68:	8b 81       	ldd	r24, Y+3	; 0x03
     b6a:	88 0f       	add	r24, r24
     b6c:	88 0f       	add	r24, r24
     b6e:	88 0f       	add	r24, r24
     b70:	89 0f       	add	r24, r25
     b72:	80 93 f6 00 	sts	0x00F6, r24
     b76:	89 81       	ldd	r24, Y+1	; 0x01
     b78:	98 2f       	mov	r25, r24
     b7a:	92 95       	swap	r25
     b7c:	96 95       	lsr	r25
     b7e:	97 70       	andi	r25, 0x07	; 7
     b80:	8a 81       	ldd	r24, Y+2	; 0x02
     b82:	88 0f       	add	r24, r24
     b84:	88 0f       	add	r24, r24
     b86:	88 0f       	add	r24, r24
     b88:	89 0f       	add	r24, r25
     b8a:	80 93 f5 00 	sts	0x00F5, r24
     b8e:	89 81       	ldd	r24, Y+1	; 0x01
     b90:	88 0f       	add	r24, r24
     b92:	88 0f       	add	r24, r24
     b94:	88 0f       	add	r24, r24
     b96:	44 ef       	ldi	r20, 0xF4	; 244
     b98:	50 e0       	ldi	r21, 0x00	; 0
     b9a:	da 01       	movw	r26, r20
     b9c:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
     b9e:	ef ee       	ldi	r30, 0xEF	; 239
     ba0:	f0 e0       	ldi	r31, 0x00	; 0
     ba2:	90 81       	ld	r25, Z
     ba4:	d8 01       	movw	r26, r16
     ba6:	16 96       	adiw	r26, 0x06	; 6
     ba8:	8c 91       	ld	r24, X
     baa:	16 97       	sbiw	r26, 0x06	; 6
     bac:	89 2b       	or	r24, r25
     bae:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
     bb0:	81 e0       	ldi	r24, 0x01	; 1
     bb2:	1a 96       	adiw	r26, 0x0a	; 10
     bb4:	8c 93       	st	X, r24
     bb6:	da 01       	movw	r26, r20
     bb8:	8c 91       	ld	r24, X
     bba:	84 60       	ori	r24, 0x04	; 4
     bbc:	8c 93       	st	X, r24
     bbe:	20 ef       	ldi	r18, 0xF0	; 240
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	d9 01       	movw	r26, r18
     bc4:	8c 91       	ld	r24, X
     bc6:	84 60       	ori	r24, 0x04	; 4
     bc8:	8c 93       	st	X, r24
          Can_clear_rplv();
     bca:	80 81       	ld	r24, Z
     bcc:	8f 7d       	andi	r24, 0xDF	; 223
     bce:	80 83       	st	Z, r24
          Can_set_idemsk();
     bd0:	da 01       	movw	r26, r20
     bd2:	8c 91       	ld	r24, X
     bd4:	81 60       	ori	r24, 0x01	; 1
     bd6:	8c 93       	st	X, r24
          Can_config_rx();       
     bd8:	80 81       	ld	r24, Z
     bda:	8f 73       	andi	r24, 0x3F	; 63
     bdc:	80 83       	st	Z, r24
     bde:	80 81       	ld	r24, Z
     be0:	80 68       	ori	r24, 0x80	; 128
     be2:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     be4:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_clear_rplv();
          Can_set_idemsk();
          Can_config_rx();       
          break;
     be6:	16 c1       	rjmp	.+556    	; 0xe14 <can_cmd+0xaae>
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     be8:	80 e0       	ldi	r24, 0x00	; 0
     bea:	2a ef       	ldi	r18, 0xFA	; 250
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	d8 01       	movw	r26, r16
     bf0:	17 96       	adiw	r26, 0x07	; 7
     bf2:	ed 91       	ld	r30, X+
     bf4:	fc 91       	ld	r31, X
     bf6:	18 97       	sbiw	r26, 0x08	; 8
     bf8:	e8 0f       	add	r30, r24
     bfa:	f1 1d       	adc	r31, r1
     bfc:	90 81       	ld	r25, Z
     bfe:	f9 01       	movw	r30, r18
     c00:	90 83       	st	Z, r25
     c02:	8f 5f       	subi	r24, 0xFF	; 255
     c04:	16 96       	adiw	r26, 0x06	; 6
     c06:	9c 91       	ld	r25, X
     c08:	89 17       	cp	r24, r25
     c0a:	88 f3       	brcs	.-30     	; 0xbee <can_cmd+0x888>
          u32_temp=0; Can_set_ext_msk(u32_temp);
     c0c:	19 82       	std	Y+1, r1	; 0x01
     c0e:	1a 82       	std	Y+2, r1	; 0x02
     c10:	1b 82       	std	Y+3, r1	; 0x03
     c12:	1c 82       	std	Y+4, r1	; 0x04
     c14:	10 92 f7 00 	sts	0x00F7, r1
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	98 2f       	mov	r25, r24
     c1c:	92 95       	swap	r25
     c1e:	96 95       	lsr	r25
     c20:	97 70       	andi	r25, 0x07	; 7
     c22:	8b 81       	ldd	r24, Y+3	; 0x03
     c24:	88 0f       	add	r24, r24
     c26:	88 0f       	add	r24, r24
     c28:	88 0f       	add	r24, r24
     c2a:	89 0f       	add	r24, r25
     c2c:	80 93 f6 00 	sts	0x00F6, r24
     c30:	89 81       	ldd	r24, Y+1	; 0x01
     c32:	98 2f       	mov	r25, r24
     c34:	92 95       	swap	r25
     c36:	96 95       	lsr	r25
     c38:	97 70       	andi	r25, 0x07	; 7
     c3a:	8a 81       	ldd	r24, Y+2	; 0x02
     c3c:	88 0f       	add	r24, r24
     c3e:	88 0f       	add	r24, r24
     c40:	88 0f       	add	r24, r24
     c42:	89 0f       	add	r24, r25
     c44:	80 93 f5 00 	sts	0x00F5, r24
     c48:	89 81       	ldd	r24, Y+1	; 0x01
     c4a:	88 0f       	add	r24, r24
     c4c:	88 0f       	add	r24, r24
     c4e:	88 0f       	add	r24, r24
     c50:	44 ef       	ldi	r20, 0xF4	; 244
     c52:	50 e0       	ldi	r21, 0x00	; 0
     c54:	da 01       	movw	r26, r20
     c56:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
     c58:	ef ee       	ldi	r30, 0xEF	; 239
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	90 81       	ld	r25, Z
     c5e:	d8 01       	movw	r26, r16
     c60:	16 96       	adiw	r26, 0x06	; 6
     c62:	8c 91       	ld	r24, X
     c64:	16 97       	sbiw	r26, 0x06	; 6
     c66:	89 2b       	or	r24, r25
     c68:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
     c6a:	81 e0       	ldi	r24, 0x01	; 1
     c6c:	1a 96       	adiw	r26, 0x0a	; 10
     c6e:	8c 93       	st	X, r24
     c70:	da 01       	movw	r26, r20
     c72:	8c 91       	ld	r24, X
     c74:	84 60       	ori	r24, 0x04	; 4
     c76:	8c 93       	st	X, r24
     c78:	20 ef       	ldi	r18, 0xF0	; 240
     c7a:	30 e0       	ldi	r19, 0x00	; 0
     c7c:	d9 01       	movw	r26, r18
     c7e:	8c 91       	ld	r24, X
     c80:	84 60       	ori	r24, 0x04	; 4
     c82:	8c 93       	st	X, r24
          Can_set_rplv();
     c84:	80 81       	ld	r24, Z
     c86:	80 62       	ori	r24, 0x20	; 32
     c88:	80 83       	st	Z, r24
          Can_clear_idemsk();
     c8a:	da 01       	movw	r26, r20
     c8c:	8c 91       	ld	r24, X
     c8e:	8e 7f       	andi	r24, 0xFE	; 254
     c90:	8c 93       	st	X, r24
          Can_config_rx();       
     c92:	80 81       	ld	r24, Z
     c94:	8f 73       	andi	r24, 0x3F	; 63
     c96:	80 83       	st	Z, r24
     c98:	80 81       	ld	r24, Z
     c9a:	80 68       	ori	r24, 0x80	; 128
     c9c:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     c9e:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_set_rplv();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     ca0:	b9 c0       	rjmp	.+370    	; 0xe14 <can_cmd+0xaae>
        //------------      
        case CMD_REPLY_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     ca2:	f8 01       	movw	r30, r16
     ca4:	83 85       	ldd	r24, Z+11	; 0x0b
     ca6:	88 23       	and	r24, r24
     ca8:	81 f1       	breq	.+96     	; 0xd0a <can_cmd+0x9a4>
     caa:	84 81       	ldd	r24, Z+4	; 0x04
     cac:	98 2f       	mov	r25, r24
     cae:	92 95       	swap	r25
     cb0:	96 95       	lsr	r25
     cb2:	97 70       	andi	r25, 0x07	; 7
     cb4:	85 81       	ldd	r24, Z+5	; 0x05
     cb6:	88 0f       	add	r24, r24
     cb8:	88 0f       	add	r24, r24
     cba:	88 0f       	add	r24, r24
     cbc:	89 0f       	add	r24, r25
     cbe:	80 93 f3 00 	sts	0x00F3, r24
     cc2:	83 81       	ldd	r24, Z+3	; 0x03
     cc4:	98 2f       	mov	r25, r24
     cc6:	92 95       	swap	r25
     cc8:	96 95       	lsr	r25
     cca:	97 70       	andi	r25, 0x07	; 7
     ccc:	84 81       	ldd	r24, Z+4	; 0x04
     cce:	88 0f       	add	r24, r24
     cd0:	88 0f       	add	r24, r24
     cd2:	88 0f       	add	r24, r24
     cd4:	89 0f       	add	r24, r25
     cd6:	80 93 f2 00 	sts	0x00F2, r24
     cda:	82 81       	ldd	r24, Z+2	; 0x02
     cdc:	98 2f       	mov	r25, r24
     cde:	92 95       	swap	r25
     ce0:	96 95       	lsr	r25
     ce2:	97 70       	andi	r25, 0x07	; 7
     ce4:	83 81       	ldd	r24, Z+3	; 0x03
     ce6:	88 0f       	add	r24, r24
     ce8:	88 0f       	add	r24, r24
     cea:	88 0f       	add	r24, r24
     cec:	89 0f       	add	r24, r25
     cee:	80 93 f1 00 	sts	0x00F1, r24
     cf2:	82 81       	ldd	r24, Z+2	; 0x02
     cf4:	88 0f       	add	r24, r24
     cf6:	88 0f       	add	r24, r24
     cf8:	88 0f       	add	r24, r24
     cfa:	80 93 f0 00 	sts	0x00F0, r24
     cfe:	ef ee       	ldi	r30, 0xEF	; 239
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	80 61       	ori	r24, 0x10	; 16
     d06:	80 83       	st	Z, r24
     d08:	17 c0       	rjmp	.+46     	; 0xd38 <can_cmd+0x9d2>
          else              { Can_set_std_id(cmd->id.std);}
     d0a:	82 81       	ldd	r24, Z+2	; 0x02
     d0c:	86 95       	lsr	r24
     d0e:	86 95       	lsr	r24
     d10:	86 95       	lsr	r24
     d12:	93 81       	ldd	r25, Z+3	; 0x03
     d14:	b0 e2       	ldi	r27, 0x20	; 32
     d16:	9b 9f       	mul	r25, r27
     d18:	80 0d       	add	r24, r0
     d1a:	11 24       	eor	r1, r1
     d1c:	80 93 f3 00 	sts	0x00F3, r24
     d20:	f8 01       	movw	r30, r16
     d22:	82 81       	ldd	r24, Z+2	; 0x02
     d24:	82 95       	swap	r24
     d26:	88 0f       	add	r24, r24
     d28:	80 7e       	andi	r24, 0xE0	; 224
     d2a:	80 93 f2 00 	sts	0x00F2, r24
     d2e:	ef ee       	ldi	r30, 0xEF	; 239
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	8f 7e       	andi	r24, 0xEF	; 239
     d36:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     d38:	d8 01       	movw	r26, r16
     d3a:	16 96       	adiw	r26, 0x06	; 6
     d3c:	8c 91       	ld	r24, X
     d3e:	88 23       	and	r24, r24
     d40:	91 f0       	breq	.+36     	; 0xd66 <can_cmd+0xa00>
     d42:	80 e0       	ldi	r24, 0x00	; 0
     d44:	2a ef       	ldi	r18, 0xFA	; 250
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	d8 01       	movw	r26, r16
     d4a:	17 96       	adiw	r26, 0x07	; 7
     d4c:	ed 91       	ld	r30, X+
     d4e:	fc 91       	ld	r31, X
     d50:	18 97       	sbiw	r26, 0x08	; 8
     d52:	e8 0f       	add	r30, r24
     d54:	f1 1d       	adc	r31, r1
     d56:	90 81       	ld	r25, Z
     d58:	f9 01       	movw	r30, r18
     d5a:	90 83       	st	Z, r25
     d5c:	8f 5f       	subi	r24, 0xFF	; 255
     d5e:	16 96       	adiw	r26, 0x06	; 6
     d60:	9c 91       	ld	r25, X
     d62:	89 17       	cp	r24, r25
     d64:	88 f3       	brcs	.-30     	; 0xd48 <can_cmd+0x9e2>
          u32_temp=~0; Can_set_ext_msk(u32_temp);
     d66:	8f ef       	ldi	r24, 0xFF	; 255
     d68:	9f ef       	ldi	r25, 0xFF	; 255
     d6a:	dc 01       	movw	r26, r24
     d6c:	89 83       	std	Y+1, r24	; 0x01
     d6e:	9a 83       	std	Y+2, r25	; 0x02
     d70:	ab 83       	std	Y+3, r26	; 0x03
     d72:	bc 83       	std	Y+4, r27	; 0x04
     d74:	80 93 f7 00 	sts	0x00F7, r24
     d78:	8a 81       	ldd	r24, Y+2	; 0x02
     d7a:	98 2f       	mov	r25, r24
     d7c:	92 95       	swap	r25
     d7e:	96 95       	lsr	r25
     d80:	97 70       	andi	r25, 0x07	; 7
     d82:	8b 81       	ldd	r24, Y+3	; 0x03
     d84:	88 0f       	add	r24, r24
     d86:	88 0f       	add	r24, r24
     d88:	88 0f       	add	r24, r24
     d8a:	89 0f       	add	r24, r25
     d8c:	80 93 f6 00 	sts	0x00F6, r24
     d90:	89 81       	ldd	r24, Y+1	; 0x01
     d92:	98 2f       	mov	r25, r24
     d94:	92 95       	swap	r25
     d96:	96 95       	lsr	r25
     d98:	97 70       	andi	r25, 0x07	; 7
     d9a:	8a 81       	ldd	r24, Y+2	; 0x02
     d9c:	88 0f       	add	r24, r24
     d9e:	88 0f       	add	r24, r24
     da0:	88 0f       	add	r24, r24
     da2:	89 0f       	add	r24, r25
     da4:	80 93 f5 00 	sts	0x00F5, r24
     da8:	89 81       	ldd	r24, Y+1	; 0x01
     daa:	88 0f       	add	r24, r24
     dac:	88 0f       	add	r24, r24
     dae:	88 0f       	add	r24, r24
     db0:	44 ef       	ldi	r20, 0xF4	; 244
     db2:	50 e0       	ldi	r21, 0x00	; 0
     db4:	da 01       	movw	r26, r20
     db6:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
     db8:	ef ee       	ldi	r30, 0xEF	; 239
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	90 81       	ld	r25, Z
     dbe:	d8 01       	movw	r26, r16
     dc0:	16 96       	adiw	r26, 0x06	; 6
     dc2:	8c 91       	ld	r24, X
     dc4:	16 97       	sbiw	r26, 0x06	; 6
     dc6:	89 2b       	or	r24, r25
     dc8:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	1a 96       	adiw	r26, 0x0a	; 10
     dce:	8c 93       	st	X, r24
     dd0:	da 01       	movw	r26, r20
     dd2:	8c 91       	ld	r24, X
     dd4:	84 60       	ori	r24, 0x04	; 4
     dd6:	8c 93       	st	X, r24
     dd8:	20 ef       	ldi	r18, 0xF0	; 240
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	d9 01       	movw	r26, r18
     dde:	8c 91       	ld	r24, X
     de0:	84 60       	ori	r24, 0x04	; 4
     de2:	8c 93       	st	X, r24
          Can_set_rplv();
     de4:	80 81       	ld	r24, Z
     de6:	80 62       	ori	r24, 0x20	; 32
     de8:	80 83       	st	Z, r24
          Can_set_idemsk();
     dea:	da 01       	movw	r26, r20
     dec:	8c 91       	ld	r24, X
     dee:	81 60       	ori	r24, 0x01	; 1
     df0:	8c 93       	st	X, r24
          Can_config_rx();       
     df2:	80 81       	ld	r24, Z
     df4:	8f 73       	andi	r24, 0x3F	; 63
     df6:	80 83       	st	Z, r24
     df8:	80 81       	ld	r24, Z
     dfa:	80 68       	ori	r24, 0x80	; 128
     dfc:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     dfe:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_set_rplv();
          Can_set_idemsk();
          Can_config_rx();       
          break;
     e00:	09 c0       	rjmp	.+18     	; 0xe14 <can_cmd+0xaae>
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
     e02:	f8 01       	movw	r30, r16
     e04:	11 86       	std	Z+9, r1	; 0x09
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     e06:	80 e0       	ldi	r24, 0x00	; 0
          break;
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
          break;
     e08:	05 c0       	rjmp	.+10     	; 0xe14 <can_cmd+0xaae>
        //------------      
      } // switch (cmd ...
    } // if (mob_handle ...
    else
    {
      cmd->status = MOB_NOT_REACHED;
     e0a:	8f e1       	ldi	r24, 0x1F	; 31
     e0c:	d8 01       	movw	r26, r16
     e0e:	19 96       	adiw	r26, 0x09	; 9
     e10:	8c 93       	st	X, r24
      return CAN_CMD_REFUSED;
     e12:	8f ef       	ldi	r24, 0xFF	; 255
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
}
     e14:	0f 90       	pop	r0
     e16:	0f 90       	pop	r0
     e18:	0f 90       	pop	r0
     e1a:	0f 90       	pop	r0
     e1c:	df 91       	pop	r29
     e1e:	cf 91       	pop	r28
     e20:	1f 91       	pop	r17
     e22:	0f 91       	pop	r16
     e24:	08 95       	ret

00000e26 <can_get_status>:
//!         CAN_STATUS_ERROR         - Error in configuration or in the
//!                                    CAN communication
//!
//------------------------------------------------------------------------------
uint8_t can_get_status (st_cmd_t* cmd)
{
     e26:	ef 92       	push	r14
     e28:	ff 92       	push	r15
     e2a:	1f 93       	push	r17
     e2c:	cf 93       	push	r28
     e2e:	df 93       	push	r29
     e30:	fc 01       	movw	r30, r24
    uint8_t a_status, rtn_val;
     
    a_status = cmd->status;
     e32:	91 85       	ldd	r25, Z+9	; 0x09
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
     e34:	99 23       	and	r25, r25
     e36:	09 f4       	brne	.+2      	; 0xe3a <can_get_status+0x14>
     e38:	92 c0       	rjmp	.+292    	; 0xf5e <can_get_status+0x138>
     e3a:	9f 31       	cpi	r25, 0x1F	; 31
     e3c:	09 f4       	brne	.+2      	; 0xe40 <can_get_status+0x1a>
     e3e:	91 c0       	rjmp	.+290    	; 0xf62 <can_get_status+0x13c>
     e40:	9f 3f       	cpi	r25, 0xFF	; 255
     e42:	09 f4       	brne	.+2      	; 0xe46 <can_get_status+0x20>
     e44:	90 c0       	rjmp	.+288    	; 0xf66 <can_get_status+0x140>
     e46:	ef 01       	movw	r28, r30
    {
        return CAN_STATUS_ERROR;
    }

    Can_set_mob(cmd->handle);
     e48:	80 81       	ld	r24, Z
     e4a:	82 95       	swap	r24
     e4c:	80 7f       	andi	r24, 0xF0	; 240
     e4e:	80 93 ed 00 	sts	0x00ED, r24
    a_status = can_get_mob_status();
     e52:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <can_get_mob_status>
     e56:	18 2f       	mov	r17, r24
    
    switch (a_status)
     e58:	80 32       	cpi	r24, 0x20	; 32
     e5a:	59 f0       	breq	.+22     	; 0xe72 <can_get_status+0x4c>
     e5c:	20 f4       	brcc	.+8      	; 0xe66 <can_get_status+0x40>
     e5e:	88 23       	and	r24, r24
     e60:	09 f4       	brne	.+2      	; 0xe64 <can_get_status+0x3e>
     e62:	83 c0       	rjmp	.+262    	; 0xf6a <can_get_status+0x144>
     e64:	72 c0       	rjmp	.+228    	; 0xf4a <can_get_status+0x124>
     e66:	80 34       	cpi	r24, 0x40	; 64
     e68:	09 f4       	brne	.+2      	; 0xe6c <can_get_status+0x46>
     e6a:	64 c0       	rjmp	.+200    	; 0xf34 <can_get_status+0x10e>
     e6c:	80 3a       	cpi	r24, 0xA0	; 160
     e6e:	09 f0       	breq	.+2      	; 0xe72 <can_get_status+0x4c>
     e70:	6c c0       	rjmp	.+216    	; 0xf4a <can_get_status+0x124>
            rtn_val = CAN_STATUS_NOT_COMPLETED;
            break;
        //---------------      
        case MOB_RX_COMPLETED:     
        case MOB_RX_COMPLETED_DLCW:
            cmd->dlc = Can_get_dlc();
     e72:	0f 2e       	mov	r0, r31
     e74:	ff ee       	ldi	r31, 0xEF	; 239
     e76:	ef 2e       	mov	r14, r31
     e78:	f1 2c       	mov	r15, r1
     e7a:	f0 2d       	mov	r31, r0
     e7c:	f7 01       	movw	r30, r14
     e7e:	80 81       	ld	r24, Z
     e80:	8f 70       	andi	r24, 0x0F	; 15
     e82:	8e 83       	std	Y+6, r24	; 0x06
            can_get_data(cmd->pt_data);
     e84:	8f 81       	ldd	r24, Y+7	; 0x07
     e86:	98 85       	ldd	r25, Y+8	; 0x08
     e88:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <can_get_data>
            cmd->ctrl.rtr = Can_get_rtr();
     e8c:	80 91 f0 00 	lds	r24, 0x00F0
     e90:	82 fb       	bst	r24, 2
     e92:	88 27       	eor	r24, r24
     e94:	80 f9       	bld	r24, 0
     e96:	8a 87       	std	Y+10, r24	; 0x0a
            if (Can_get_ide()) // if extended frame
     e98:	f7 01       	movw	r30, r14
     e9a:	80 81       	ld	r24, Z
     e9c:	84 ff       	sbrs	r24, 4
     e9e:	2d c0       	rjmp	.+90     	; 0xefa <can_get_status+0xd4>
            {
                cmd->ctrl.ide = 1; // extended frame
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	8b 87       	std	Y+11, r24	; 0x0b
                Can_get_ext_id(cmd->id.ext);
     ea4:	e3 ef       	ldi	r30, 0xF3	; 243
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	80 81       	ld	r24, Z
     eaa:	86 95       	lsr	r24
     eac:	86 95       	lsr	r24
     eae:	86 95       	lsr	r24
     eb0:	8d 83       	std	Y+5, r24	; 0x05
     eb2:	a2 ef       	ldi	r26, 0xF2	; 242
     eb4:	b0 e0       	ldi	r27, 0x00	; 0
     eb6:	8c 91       	ld	r24, X
     eb8:	90 81       	ld	r25, Z
     eba:	86 95       	lsr	r24
     ebc:	86 95       	lsr	r24
     ebe:	86 95       	lsr	r24
     ec0:	f0 e2       	ldi	r31, 0x20	; 32
     ec2:	9f 9f       	mul	r25, r31
     ec4:	80 0d       	add	r24, r0
     ec6:	11 24       	eor	r1, r1
     ec8:	8c 83       	std	Y+4, r24	; 0x04
     eca:	e1 ef       	ldi	r30, 0xF1	; 241
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	9c 91       	ld	r25, X
     ed2:	86 95       	lsr	r24
     ed4:	86 95       	lsr	r24
     ed6:	86 95       	lsr	r24
     ed8:	20 e2       	ldi	r18, 0x20	; 32
     eda:	92 9f       	mul	r25, r18
     edc:	80 0d       	add	r24, r0
     ede:	11 24       	eor	r1, r1
     ee0:	8b 83       	std	Y+3, r24	; 0x03
     ee2:	80 91 f0 00 	lds	r24, 0x00F0
     ee6:	90 81       	ld	r25, Z
     ee8:	86 95       	lsr	r24
     eea:	86 95       	lsr	r24
     eec:	86 95       	lsr	r24
     eee:	e0 e2       	ldi	r30, 0x20	; 32
     ef0:	9e 9f       	mul	r25, r30
     ef2:	80 0d       	add	r24, r0
     ef4:	11 24       	eor	r1, r1
     ef6:	8a 83       	std	Y+2, r24	; 0x02
     ef8:	13 c0       	rjmp	.+38     	; 0xf20 <can_get_status+0xfa>
            }
            else // else standard frame
                {
                    cmd->ctrl.ide = 0;
     efa:	1b 86       	std	Y+11, r1	; 0x0b
                    Can_get_std_id(cmd->id.std);
     efc:	e3 ef       	ldi	r30, 0xF3	; 243
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	82 95       	swap	r24
     f04:	86 95       	lsr	r24
     f06:	87 70       	andi	r24, 0x07	; 7
     f08:	8b 83       	std	Y+3, r24	; 0x03
     f0a:	80 91 f2 00 	lds	r24, 0x00F2
     f0e:	90 81       	ld	r25, Z
     f10:	99 0f       	add	r25, r25
     f12:	99 0f       	add	r25, r25
     f14:	99 0f       	add	r25, r25
     f16:	82 95       	swap	r24
     f18:	86 95       	lsr	r24
     f1a:	87 70       	andi	r24, 0x07	; 7
     f1c:	89 0f       	add	r24, r25
     f1e:	8a 83       	std	Y+2, r24	; 0x02
                }
            // Status field of descriptor: 0x20 if Rx completed
            // Status field of descriptor: 0xA0 if Rx completed with DLCWarning    
            cmd->status = a_status;
     f20:	19 87       	std	Y+9, r17	; 0x09
            Can_mob_abort();        // Freed the MOB
     f22:	ef ee       	ldi	r30, 0xEF	; 239
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	8f 73       	andi	r24, 0x3F	; 63
     f2a:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
     f2c:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = CAN_STATUS_COMPLETED;
     f30:	80 e0       	ldi	r24, 0x00	; 0
            break;
     f32:	1c c0       	rjmp	.+56     	; 0xf6c <can_get_status+0x146>
        //---------------      
        case MOB_TX_COMPLETED:     
            // Status field of descriptor: 0x40 if Tx completed
            cmd->status = a_status;
     f34:	80 e4       	ldi	r24, 0x40	; 64
     f36:	89 87       	std	Y+9, r24	; 0x09
            Can_mob_abort();        // Freed the MOB
     f38:	ef ee       	ldi	r30, 0xEF	; 239
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 81       	ld	r24, Z
     f3e:	8f 73       	andi	r24, 0x3F	; 63
     f40:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
     f42:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = CAN_STATUS_COMPLETED;
     f46:	80 e0       	ldi	r24, 0x00	; 0
            break;
     f48:	11 c0       	rjmp	.+34     	; 0xf6c <can_get_status+0x146>
        //---------------      
        default:
            // Status field of descriptor: (bin)000b.scfa if MOb error
            cmd->status = a_status;
     f4a:	19 87       	std	Y+9, r17	; 0x09
            Can_mob_abort();        // Freed the MOB
     f4c:	ef ee       	ldi	r30, 0xEF	; 239
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	8f 73       	andi	r24, 0x3F	; 63
     f54:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
     f56:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = CAN_STATUS_ERROR;
     f5a:	82 e0       	ldi	r24, 0x02	; 2
            break;
     f5c:	07 c0       	rjmp	.+14     	; 0xf6c <can_get_status+0x146>
    uint8_t a_status, rtn_val;
     
    a_status = cmd->status;
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    {
        return CAN_STATUS_ERROR;
     f5e:	82 e0       	ldi	r24, 0x02	; 2
     f60:	05 c0       	rjmp	.+10     	; 0xf6c <can_get_status+0x146>
     f62:	82 e0       	ldi	r24, 0x02	; 2
     f64:	03 c0       	rjmp	.+6      	; 0xf6c <can_get_status+0x146>
     f66:	82 e0       	ldi	r24, 0x02	; 2
     f68:	01 c0       	rjmp	.+2      	; 0xf6c <can_get_status+0x146>
    
    switch (a_status)
    {
        case MOB_NOT_COMPLETED:
            // cmd->status not updated
            rtn_val = CAN_STATUS_NOT_COMPLETED;
     f6a:	81 e0       	ldi	r24, 0x01	; 1
            break;
             
    } // switch (a_status...
 
    return (rtn_val);
}
     f6c:	df 91       	pop	r29
     f6e:	cf 91       	pop	r28
     f70:	1f 91       	pop	r17
     f72:	ff 90       	pop	r15
     f74:	ef 90       	pop	r14
     f76:	08 95       	ret

00000f78 <adc_read>:
 */
uint8_t adc_read(uint8_t ch) {
	// Set which channel to read. Leave all ADMUX bits as is except MUX4-0
	
	// Clear MUX bits
	ADMUX &= 0xE0;
     f78:	ec e7       	ldi	r30, 0x7C	; 124
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	90 81       	ld	r25, Z
     f7e:	90 7e       	andi	r25, 0xE0	; 224
     f80:	90 83       	st	Z, r25
	// Guard against invalid channel
	if(ch > 12) ch = 18; // Read ground
     f82:	8d 30       	cpi	r24, 0x0D	; 13
     f84:	08 f0       	brcs	.+2      	; 0xf88 <adc_read+0x10>
     f86:	82 e1       	ldi	r24, 0x12	; 18
	// Set MUX to channel
	ADMUX |= ch;
     f88:	ec e7       	ldi	r30, 0x7C	; 124
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	90 81       	ld	r25, Z
     f8e:	89 2b       	or	r24, r25
     f90:	80 83       	st	Z, r24
	
	// Set ADC start conversion bit
	ADCSRA |= (1 << ADSC);
     f92:	ea e7       	ldi	r30, 0x7A	; 122
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	80 64       	ori	r24, 0x40	; 64
     f9a:	80 83       	st	Z, r24
	
	// Wait for ADCSRA bit ADSC to go low for data conversion to complete
	while(ADCSRA & (1 << ADSC));
     f9c:	80 81       	ld	r24, Z
     f9e:	86 fd       	sbrc	r24, 6
     fa0:	fd cf       	rjmp	.-6      	; 0xf9c <adc_read+0x24>
	
	// Return read channel
	return ADCH;
     fa2:	80 91 79 00 	lds	r24, 0x0079
}
     fa6:	08 95       	ret

00000fa8 <config_io_pin>:
 *  port_ch: the channel to set, 0-7
 *  dir: the direction, IO_DIR_INPUT or IO_DIR_OUTPUT
 * Returns: void
 */
void config_io_pin(uint8_t port, uint8_t port_ch, uint8_t dir){
	switch(port){
     fa8:	81 30       	cpi	r24, 0x01	; 1
     faa:	b9 f0       	breq	.+46     	; 0xfda <config_io_pin+0x32>
     fac:	18 f0       	brcs	.+6      	; 0xfb4 <config_io_pin+0xc>
     fae:	82 30       	cpi	r24, 0x02	; 2
     fb0:	39 f1       	breq	.+78     	; 0x1000 <config_io_pin+0x58>
     fb2:	08 95       	ret
		case IO_PORT_B:
			//Crazy bit trickery that sets the port_ch bit of DDRB to dir
			DDRB ^= ((-dir) ^ DDRB) & (1 << port_ch);
     fb4:	84 b1       	in	r24, 0x04	; 4
     fb6:	24 b1       	in	r18, 0x04	; 4
     fb8:	50 e0       	ldi	r21, 0x00	; 0
     fba:	51 95       	neg	r21
     fbc:	41 95       	neg	r20
     fbe:	51 09       	sbc	r21, r1
     fc0:	48 27       	eor	r20, r24
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	02 c0       	rjmp	.+4      	; 0xfcc <config_io_pin+0x24>
     fc8:	88 0f       	add	r24, r24
     fca:	99 1f       	adc	r25, r25
     fcc:	6a 95       	dec	r22
     fce:	e2 f7       	brpl	.-8      	; 0xfc8 <config_io_pin+0x20>
     fd0:	48 23       	and	r20, r24
     fd2:	59 23       	and	r21, r25
     fd4:	42 27       	eor	r20, r18
     fd6:	44 b9       	out	0x04, r20	; 4
			break;
     fd8:	08 95       	ret
		case IO_PORT_C:
			DDRC ^= ((-dir) ^ DDRC) & (1 << port_ch);
     fda:	87 b1       	in	r24, 0x07	; 7
     fdc:	27 b1       	in	r18, 0x07	; 7
     fde:	50 e0       	ldi	r21, 0x00	; 0
     fe0:	51 95       	neg	r21
     fe2:	41 95       	neg	r20
     fe4:	51 09       	sbc	r21, r1
     fe6:	48 27       	eor	r20, r24
     fe8:	81 e0       	ldi	r24, 0x01	; 1
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	02 c0       	rjmp	.+4      	; 0xff2 <config_io_pin+0x4a>
     fee:	88 0f       	add	r24, r24
     ff0:	99 1f       	adc	r25, r25
     ff2:	6a 95       	dec	r22
     ff4:	e2 f7       	brpl	.-8      	; 0xfee <config_io_pin+0x46>
     ff6:	48 23       	and	r20, r24
     ff8:	59 23       	and	r21, r25
     ffa:	42 27       	eor	r20, r18
     ffc:	47 b9       	out	0x07, r20	; 7
			break;
     ffe:	08 95       	ret
		case IO_PORT_D:
			DDRD ^= ((-dir) ^ DDRD) & (1 << port_ch);
    1000:	8a b1       	in	r24, 0x0a	; 10
    1002:	2a b1       	in	r18, 0x0a	; 10
    1004:	50 e0       	ldi	r21, 0x00	; 0
    1006:	51 95       	neg	r21
    1008:	41 95       	neg	r20
    100a:	51 09       	sbc	r21, r1
    100c:	48 27       	eor	r20, r24
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	02 c0       	rjmp	.+4      	; 0x1018 <config_io_pin+0x70>
    1014:	88 0f       	add	r24, r24
    1016:	99 1f       	adc	r25, r25
    1018:	6a 95       	dec	r22
    101a:	e2 f7       	brpl	.-8      	; 0x1014 <config_io_pin+0x6c>
    101c:	48 23       	and	r20, r24
    101e:	59 23       	and	r21, r25
    1020:	42 27       	eor	r20, r18
    1022:	4a b9       	out	0x0a, r20	; 10
    1024:	08 95       	ret

00001026 <set_io_pin>:
 *  port_ch: the channel to set, 0-7
 *  val: the value, HIGH or LOW
 * Returns: void
 */
void set_io_pin(uint8_t port, uint8_t port_ch, uint8_t val){
	switch(port){
    1026:	81 30       	cpi	r24, 0x01	; 1
    1028:	b9 f0       	breq	.+46     	; 0x1058 <set_io_pin+0x32>
    102a:	18 f0       	brcs	.+6      	; 0x1032 <set_io_pin+0xc>
    102c:	82 30       	cpi	r24, 0x02	; 2
    102e:	39 f1       	breq	.+78     	; 0x107e <set_io_pin+0x58>
    1030:	08 95       	ret
		case IO_PORT_B:
			PORTB ^= ((-val) ^ PORTB) & (1 << port_ch);
    1032:	85 b1       	in	r24, 0x05	; 5
    1034:	25 b1       	in	r18, 0x05	; 5
    1036:	50 e0       	ldi	r21, 0x00	; 0
    1038:	51 95       	neg	r21
    103a:	41 95       	neg	r20
    103c:	51 09       	sbc	r21, r1
    103e:	48 27       	eor	r20, r24
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	02 c0       	rjmp	.+4      	; 0x104a <set_io_pin+0x24>
    1046:	88 0f       	add	r24, r24
    1048:	99 1f       	adc	r25, r25
    104a:	6a 95       	dec	r22
    104c:	e2 f7       	brpl	.-8      	; 0x1046 <set_io_pin+0x20>
    104e:	48 23       	and	r20, r24
    1050:	59 23       	and	r21, r25
    1052:	42 27       	eor	r20, r18
    1054:	45 b9       	out	0x05, r20	; 5
			break;
    1056:	08 95       	ret
		case IO_PORT_C:
			PORTC ^= ((-val) ^ PORTC) & (1 << port_ch);
    1058:	88 b1       	in	r24, 0x08	; 8
    105a:	28 b1       	in	r18, 0x08	; 8
    105c:	50 e0       	ldi	r21, 0x00	; 0
    105e:	51 95       	neg	r21
    1060:	41 95       	neg	r20
    1062:	51 09       	sbc	r21, r1
    1064:	48 27       	eor	r20, r24
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	02 c0       	rjmp	.+4      	; 0x1070 <set_io_pin+0x4a>
    106c:	88 0f       	add	r24, r24
    106e:	99 1f       	adc	r25, r25
    1070:	6a 95       	dec	r22
    1072:	e2 f7       	brpl	.-8      	; 0x106c <set_io_pin+0x46>
    1074:	48 23       	and	r20, r24
    1076:	59 23       	and	r21, r25
    1078:	42 27       	eor	r20, r18
    107a:	48 b9       	out	0x08, r20	; 8
			break;
    107c:	08 95       	ret
		case IO_PORT_D:
			PORTD ^= ((-val) ^ PORTD) & (1 << port_ch);
    107e:	8b b1       	in	r24, 0x0b	; 11
    1080:	2b b1       	in	r18, 0x0b	; 11
    1082:	50 e0       	ldi	r21, 0x00	; 0
    1084:	51 95       	neg	r21
    1086:	41 95       	neg	r20
    1088:	51 09       	sbc	r21, r1
    108a:	48 27       	eor	r20, r24
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	02 c0       	rjmp	.+4      	; 0x1096 <set_io_pin+0x70>
    1092:	88 0f       	add	r24, r24
    1094:	99 1f       	adc	r25, r25
    1096:	6a 95       	dec	r22
    1098:	e2 f7       	brpl	.-8      	; 0x1092 <set_io_pin+0x6c>
    109a:	48 23       	and	r20, r24
    109c:	59 23       	and	r21, r25
    109e:	42 27       	eor	r20, r18
    10a0:	4b b9       	out	0x0b, r20	; 11
    10a2:	08 95       	ret

000010a4 <can_tx_sync>:
 *		buf_size, the size of the buffer
 * 
 * Returns:
 *		void	
 */
void can_tx_sync(uint16_t id, uint8_t *buffer, uint8_t buf_size) {
    10a4:	cf 93       	push	r28
    10a6:	df 93       	push	r29
    10a8:	cd b7       	in	r28, 0x3d	; 61
    10aa:	de b7       	in	r29, 0x3e	; 62
    10ac:	2c 97       	sbiw	r28, 0x0c	; 12
    10ae:	0f b6       	in	r0, 0x3f	; 63
    10b0:	f8 94       	cli
    10b2:	de bf       	out	0x3e, r29	; 62
    10b4:	0f be       	out	0x3f, r0	; 63
    10b6:	cd bf       	out	0x3d, r28	; 61
	// Message command object
	st_cmd_t can_msg;
	
	// Configure TX mailbox
	can_msg.pt_data = buffer;	// point message object to the data buffer
    10b8:	79 87       	std	Y+9, r23	; 0x09
    10ba:	68 87       	std	Y+8, r22	; 0x08
	can_msg.ctrl.ide = 0;		// CAN 2.0A
    10bc:	1c 86       	std	Y+12, r1	; 0x0c
	can_msg.dlc = buf_size;		// Number of data bytes (8 max) requested from remote node
    10be:	4f 83       	std	Y+7, r20	; 0x07
	can_msg.id.std = id;		// Message ID
    10c0:	9c 83       	std	Y+4, r25	; 0x04
    10c2:	8b 83       	std	Y+3, r24	; 0x03
	can_msg.cmd = CMD_TX_DATA;	// Transmit data command object
    10c4:	82 e0       	ldi	r24, 0x02	; 2
    10c6:	8a 83       	std	Y+2, r24	; 0x02

	// Wait for MOb to configure (Must re-configure MOb for every transaction) and send request
	while(can_cmd(&can_msg) != CAN_CMD_ACCEPTED);
    10c8:	ce 01       	movw	r24, r28
    10ca:	01 96       	adiw	r24, 0x01	; 1
    10cc:	0e 94 b3 01 	call	0x366	; 0x366 <can_cmd>
    10d0:	81 11       	cpse	r24, r1
    10d2:	fa cf       	rjmp	.-12     	; 0x10c8 <can_tx_sync+0x24>
	// Wait for Tx to complete
	while(can_get_status(&can_msg) == CAN_STATUS_NOT_COMPLETED);
    10d4:	ce 01       	movw	r24, r28
    10d6:	01 96       	adiw	r24, 0x01	; 1
    10d8:	0e 94 13 07 	call	0xe26	; 0xe26 <can_get_status>
    10dc:	81 30       	cpi	r24, 0x01	; 1
    10de:	d1 f3       	breq	.-12     	; 0x10d4 <can_tx_sync+0x30>
}
    10e0:	2c 96       	adiw	r28, 0x0c	; 12
    10e2:	0f b6       	in	r0, 0x3f	; 63
    10e4:	f8 94       	cli
    10e6:	de bf       	out	0x3e, r29	; 62
    10e8:	0f be       	out	0x3f, r0	; 63
    10ea:	cd bf       	out	0x3d, r28	; 61
    10ec:	df 91       	pop	r29
    10ee:	cf 91       	pop	r28
    10f0:	08 95       	ret

000010f2 <setup_can_rcv>:
 * Arguments:
 *  can_receive_msg: pointer to can cmd msg struct
 *  can_receive_buffer: pointer to buffer to receive msg_id into
 *  buffer_len: length of the buffer to receive
 */
void setup_can_rcv(st_cmd_t *can_receive_msg, uint8_t *can_receive_buffer, uint8_t buffer_len, uint16_t msg_id) {
    10f2:	cf 93       	push	r28
    10f4:	df 93       	push	r29
    10f6:	ec 01       	movw	r28, r24
	// Populate message object
	can_receive_msg->pt_data = &can_receive_buffer[0];			// Point to receive buffer
    10f8:	78 87       	std	Y+8, r23	; 0x08
    10fa:	6f 83       	std	Y+7, r22	; 0x07
	can_receive_msg->ctrl.ide = 0;								// CAN 2.0A
    10fc:	1b 86       	std	Y+11, r1	; 0x0b
	can_receive_msg->dlc	= buffer_len;							// Data buffer length
    10fe:	4e 83       	std	Y+6, r20	; 0x06
	can_receive_msg->id.std = msg_id;							// Set the receive ID to be the state ID
    1100:	3b 83       	std	Y+3, r19	; 0x03
    1102:	2a 83       	std	Y+2, r18	; 0x02
	can_receive_msg->cmd = CMD_RX_DATA_MASKED;					// Receive data
    1104:	88 e0       	ldi	r24, 0x08	; 8
    1106:	89 83       	std	Y+1, r24	; 0x01
	
	/* Wait for an open mailbox and bind msg_id to the mailbox when available*/
	
	while(can_cmd(can_receive_msg) != CAN_CMD_ACCEPTED);
    1108:	ce 01       	movw	r24, r28
    110a:	0e 94 b3 01 	call	0x366	; 0x366 <can_cmd>
    110e:	81 11       	cpse	r24, r1
    1110:	fb cf       	rjmp	.-10     	; 0x1108 <__stack+0x9>
}
    1112:	df 91       	pop	r29
    1114:	cf 91       	pop	r28
    1116:	08 95       	ret

00001118 <setup_can_send>:
 * Arguments:
 *  can_send_msg: pointer to can cmd msg struct
 *  can_send_buffer: pointer to buffer to send msg_id from
 *  buffer_len: length of the buffer to send
 */
void setup_can_send(st_cmd_t *can_send_msg, uint8_t *can_send_buffer, uint8_t buffer_len, uint16_t msg_id) {
    1118:	cf 93       	push	r28
    111a:	df 93       	push	r29
    111c:	ec 01       	movw	r28, r24
	// Populate message object
	can_send_msg->pt_data = &can_send_buffer[0];				// Point to send buffer
    111e:	78 87       	std	Y+8, r23	; 0x08
    1120:	6f 83       	std	Y+7, r22	; 0x07
	can_send_msg->ctrl.ide = 0;									// CAN 2.0A
    1122:	1b 86       	std	Y+11, r1	; 0x0b
	can_send_msg->dlc	= buffer_len;							// Data buffer length
    1124:	4e 83       	std	Y+6, r20	; 0x06
	can_send_msg->id.std = msg_id;								// Set the receive ID to be the state ID
    1126:	3b 83       	std	Y+3, r19	; 0x03
    1128:	2a 83       	std	Y+2, r18	; 0x02
	can_send_msg->cmd = CMD_TX_DATA;							// Send data
    112a:	82 e0       	ldi	r24, 0x02	; 2
    112c:	89 83       	std	Y+1, r24	; 0x01
	
	/* Wait for an open mailbox and bind msg_id to the mailbox when available*/
	while(can_cmd(can_send_msg) != CAN_CMD_ACCEPTED);
    112e:	ce 01       	movw	r24, r28
    1130:	0e 94 b3 01 	call	0x366	; 0x366 <can_cmd>
    1134:	81 11       	cpse	r24, r1
    1136:	fb cf       	rjmp	.-10     	; 0x112e <setup_can_send+0x16>
    1138:	df 91       	pop	r29
    113a:	cf 91       	pop	r28
    113c:	08 95       	ret

0000113e <can_clear_all_mob>:
uint8_t  mob_number;
/*
    uint8_t  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    113e:	80 e0       	ldi	r24, 0x00	; 0
    {
        CANPAGE = (mob_number << 4);    //! Page index
    1140:	ad ee       	ldi	r26, 0xED	; 237
    1142:	b0 e0       	ldi	r27, 0x00	; 0
        Can_clear_mob();                //! All MOb Registers=0
    1144:	3e ee       	ldi	r19, 0xEE	; 238
    1146:	20 e0       	ldi	r18, 0x00	; 0
    uint8_t  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    {
        CANPAGE = (mob_number << 4);    //! Page index
    1148:	98 2f       	mov	r25, r24
    114a:	92 95       	swap	r25
    114c:	90 7f       	andi	r25, 0xF0	; 240
    114e:	9c 93       	st	X, r25
        Can_clear_mob();                //! All MOb Registers=0
    1150:	e3 2f       	mov	r30, r19
    1152:	f2 2f       	mov	r31, r18
    1154:	11 92       	st	Z+, r1
    1156:	e8 3f       	cpi	r30, 0xF8	; 248
    1158:	f1 05       	cpc	r31, r1
    115a:	e1 f7       	brne	.-8      	; 0x1154 <can_clear_all_mob+0x16>
uint8_t  mob_number;
/*
    uint8_t  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    115c:	8f 5f       	subi	r24, 0xFF	; 255
    115e:	86 30       	cpi	r24, 0x06	; 6
    1160:	99 f7       	brne	.-26     	; 0x1148 <can_clear_all_mob+0xa>
        {
            CANMSG = 0;                 //! MOb data FIFO
        }
*/
    }
}
    1162:	08 95       	ret

00001164 <can_get_mob_free>:
//------------------------------------------------------------------------------
uint8_t can_get_mob_free(void)
{
    uint8_t mob_number, page_saved;

    page_saved = CANPAGE;
    1164:	ed ee       	ldi	r30, 0xED	; 237
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	20 81       	ld	r18, Z
    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    {
        Can_set_mob(mob_number);
    116a:	10 82       	st	Z, r1
        if ((CANCDMOB & 0xC0) == 0x00) //! Disable configuration
    116c:	80 91 ef 00 	lds	r24, 0x00EF
    1170:	80 7c       	andi	r24, 0xC0	; 192
    1172:	69 f0       	breq	.+26     	; 0x118e <can_get_mob_free+0x2a>
    1174:	81 e0       	ldi	r24, 0x01	; 1
    uint8_t mob_number, page_saved;

    page_saved = CANPAGE;
    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    {
        Can_set_mob(mob_number);
    1176:	ad ee       	ldi	r26, 0xED	; 237
    1178:	b0 e0       	ldi	r27, 0x00	; 0
        if ((CANCDMOB & 0xC0) == 0x00) //! Disable configuration
    117a:	ef ee       	ldi	r30, 0xEF	; 239
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    uint8_t mob_number, page_saved;

    page_saved = CANPAGE;
    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    {
        Can_set_mob(mob_number);
    117e:	98 2f       	mov	r25, r24
    1180:	92 95       	swap	r25
    1182:	90 7f       	andi	r25, 0xF0	; 240
    1184:	9c 93       	st	X, r25
        if ((CANCDMOB & 0xC0) == 0x00) //! Disable configuration
    1186:	90 81       	ld	r25, Z
    1188:	90 7c       	andi	r25, 0xC0	; 192
    118a:	29 f4       	brne	.+10     	; 0x1196 <can_get_mob_free+0x32>
    118c:	01 c0       	rjmp	.+2      	; 0x1190 <can_get_mob_free+0x2c>
uint8_t can_get_mob_free(void)
{
    uint8_t mob_number, page_saved;

    page_saved = CANPAGE;
    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    118e:	80 e0       	ldi	r24, 0x00	; 0
    {
        Can_set_mob(mob_number);
        if ((CANCDMOB & 0xC0) == 0x00) //! Disable configuration
        {
            CANPAGE = page_saved;
    1190:	20 93 ed 00 	sts	0x00ED, r18
            return (mob_number);
    1194:	08 95       	ret
uint8_t can_get_mob_free(void)
{
    uint8_t mob_number, page_saved;

    page_saved = CANPAGE;
    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    1196:	8f 5f       	subi	r24, 0xFF	; 255
    1198:	86 30       	cpi	r24, 0x06	; 6
    119a:	89 f7       	brne	.-30     	; 0x117e <can_get_mob_free+0x1a>
        {
            CANPAGE = page_saved;
            return (mob_number);
        }
    }
    CANPAGE = page_saved;
    119c:	20 93 ed 00 	sts	0x00ED, r18
    return (NO_MOB);
    11a0:	8f ef       	ldi	r24, 0xFF	; 255
}
    11a2:	08 95       	ret

000011a4 <can_get_mob_status>:
uint8_t can_get_mob_status(void)
{
    uint8_t mob_status, canstmob_copy;

    // Test if MOb ENABLE or DISABLE
    if ((CANCDMOB & 0xC0) == 0x00) {return(MOB_DISABLE);}
    11a4:	80 91 ef 00 	lds	r24, 0x00EF
    11a8:	80 7c       	andi	r24, 0xC0	; 192
    11aa:	61 f0       	breq	.+24     	; 0x11c4 <can_get_mob_status+0x20>

    canstmob_copy = CANSTMOB; // Copy for test integrity
    11ac:	80 91 ee 00 	lds	r24, 0x00EE

    // If MOb is ENABLE, test if MOb is COMPLETED
    // - MOb Status = 0x20 then MOB_RX_COMPLETED
    // - MOb Status = 0x40 then MOB_TX_COMPLETED
    // - MOb Status = 0xA0 then MOB_RX_COMPLETED_DLCW
    mob_status = canstmob_copy & ((1<<DLCW)|(1<<TXOK)|(1<<RXOK));
    11b0:	98 2f       	mov	r25, r24
    11b2:	90 7e       	andi	r25, 0xE0	; 224
    if ( (mob_status==MOB_RX_COMPLETED) ||   \
    11b4:	90 32       	cpi	r25, 0x20	; 32
    11b6:	41 f0       	breq	.+16     	; 0x11c8 <can_get_mob_status+0x24>
    11b8:	90 34       	cpi	r25, 0x40	; 64
    11ba:	41 f0       	breq	.+16     	; 0x11cc <can_get_mob_status+0x28>
         (mob_status==MOB_TX_COMPLETED) ||   \
    11bc:	90 3a       	cpi	r25, 0xA0	; 160
    11be:	41 f0       	breq	.+16     	; 0x11d0 <can_get_mob_status+0x2c>
    // - MOb Status bit_0 = MOB_ACK_ERROR
    // - MOb Status bit_1 = MOB_FORM_ERROR
    // - MOb Status bit_2 = MOB_CRC_ERROR
    // - MOb Status bit_3 = MOB_STUFF_ERROR
    // - MOb Status bit_4 = MOB_BIT_ERROR
    mob_status = canstmob_copy & ERR_MOB_MSK;
    11c0:	8f 71       	andi	r24, 0x1F	; 31
    11c2:	08 95       	ret
uint8_t can_get_mob_status(void)
{
    uint8_t mob_status, canstmob_copy;

    // Test if MOb ENABLE or DISABLE
    if ((CANCDMOB & 0xC0) == 0x00) {return(MOB_DISABLE);}
    11c4:	8f ef       	ldi	r24, 0xFF	; 255
    11c6:	08 95       	ret
    // - MOb Status = 0x40 then MOB_TX_COMPLETED
    // - MOb Status = 0xA0 then MOB_RX_COMPLETED_DLCW
    mob_status = canstmob_copy & ((1<<DLCW)|(1<<TXOK)|(1<<RXOK));
    if ( (mob_status==MOB_RX_COMPLETED) ||   \
         (mob_status==MOB_TX_COMPLETED) ||   \
         (mob_status==MOB_RX_COMPLETED_DLCW) ) { return(mob_status); }
    11c8:	80 e2       	ldi	r24, 0x20	; 32
    11ca:	08 95       	ret
    11cc:	80 e4       	ldi	r24, 0x40	; 64
    11ce:	08 95       	ret
    11d0:	80 ea       	ldi	r24, 0xA0	; 160
    mob_status = canstmob_copy & ERR_MOB_MSK;
    if (mob_status != 0) { return(mob_status); }

    // If CANSTMOB = 0 then MOB_NOT_COMPLETED
    return(MOB_NOT_COMPLETED);
}
    11d2:	08 95       	ret

000011d4 <can_get_data>:
//! @param CAN message data address.
//!
//! @return none.
//------------------------------------------------------------------------------
void can_get_data(uint8_t* p_can_message_data)
{
    11d4:	cf 93       	push	r28
    11d6:	df 93       	push	r29
    11d8:	bc 01       	movw	r22, r24
    uint8_t data_index;

    for (data_index = 0; data_index < (Can_get_dlc()); data_index++)
    11da:	80 91 ef 00 	lds	r24, 0x00EF
    11de:	8f 70       	andi	r24, 0x0F	; 15
    11e0:	99 f0       	breq	.+38     	; 0x1208 <can_get_data+0x34>
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    {
        *(p_can_message_data + data_index) = CANMSG;
    11e4:	ca ef       	ldi	r28, 0xFA	; 250
    11e6:	d0 e0       	ldi	r29, 0x00	; 0
//------------------------------------------------------------------------------
void can_get_data(uint8_t* p_can_message_data)
{
    uint8_t data_index;

    for (data_index = 0; data_index < (Can_get_dlc()); data_index++)
    11e8:	af ee       	ldi	r26, 0xEF	; 239
    11ea:	b0 e0       	ldi	r27, 0x00	; 0
    {
        *(p_can_message_data + data_index) = CANMSG;
    11ec:	28 81       	ld	r18, Y
    11ee:	fb 01       	movw	r30, r22
    11f0:	e9 0f       	add	r30, r25
    11f2:	f1 1d       	adc	r31, r1
    11f4:	20 83       	st	Z, r18
//------------------------------------------------------------------------------
void can_get_data(uint8_t* p_can_message_data)
{
    uint8_t data_index;

    for (data_index = 0; data_index < (Can_get_dlc()); data_index++)
    11f6:	9f 5f       	subi	r25, 0xFF	; 255
    11f8:	2c 91       	ld	r18, X
    11fa:	49 2f       	mov	r20, r25
    11fc:	50 e0       	ldi	r21, 0x00	; 0
    11fe:	2f 70       	andi	r18, 0x0F	; 15
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	42 17       	cp	r20, r18
    1204:	53 07       	cpc	r21, r19
    1206:	94 f3       	brlt	.-28     	; 0x11ec <can_get_data+0x18>
    {
        *(p_can_message_data + data_index) = CANMSG;
    }
}
    1208:	df 91       	pop	r29
    120a:	cf 91       	pop	r28
    120c:	08 95       	ret

0000120e <can_fixed_baudrate>:
//! @return Baudrate Status
//!         fixed = 1: baudrate performed
//------------------------------------------------------------------------------
uint8_t can_fixed_baudrate(uint8_t mode)
{
    Can_reset();
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	80 93 d8 00 	sts	0x00D8, r24
    Can_conf_bt();
    1214:	86 e0       	ldi	r24, 0x06	; 6
    1216:	80 93 e2 00 	sts	0x00E2, r24
    121a:	84 e0       	ldi	r24, 0x04	; 4
    121c:	80 93 e3 00 	sts	0x00E3, r24
    1220:	83 e1       	ldi	r24, 0x13	; 19
    1222:	80 93 e4 00 	sts	0x00E4, r24
    return 1;
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	08 95       	ret

0000122a <__udivmodhi4>:
    122a:	aa 1b       	sub	r26, r26
    122c:	bb 1b       	sub	r27, r27
    122e:	51 e1       	ldi	r21, 0x11	; 17
    1230:	07 c0       	rjmp	.+14     	; 0x1240 <__udivmodhi4_ep>

00001232 <__udivmodhi4_loop>:
    1232:	aa 1f       	adc	r26, r26
    1234:	bb 1f       	adc	r27, r27
    1236:	a6 17       	cp	r26, r22
    1238:	b7 07       	cpc	r27, r23
    123a:	10 f0       	brcs	.+4      	; 0x1240 <__udivmodhi4_ep>
    123c:	a6 1b       	sub	r26, r22
    123e:	b7 0b       	sbc	r27, r23

00001240 <__udivmodhi4_ep>:
    1240:	88 1f       	adc	r24, r24
    1242:	99 1f       	adc	r25, r25
    1244:	5a 95       	dec	r21
    1246:	a9 f7       	brne	.-22     	; 0x1232 <__udivmodhi4_loop>
    1248:	80 95       	com	r24
    124a:	90 95       	com	r25
    124c:	bc 01       	movw	r22, r24
    124e:	cd 01       	movw	r24, r26
    1250:	08 95       	ret

00001252 <__tablejump2__>:
    1252:	ee 0f       	add	r30, r30
    1254:	ff 1f       	adc	r31, r31
    1256:	05 90       	lpm	r0, Z+
    1258:	f4 91       	lpm	r31, Z
    125a:	e0 2d       	mov	r30, r0
    125c:	09 94       	ijmp

0000125e <_exit>:
    125e:	f8 94       	cli

00001260 <__stop_program>:
    1260:	ff cf       	rjmp	.-2      	; 0x1260 <__stop_program>
