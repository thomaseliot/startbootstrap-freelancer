
Front Sensor Node.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000011f4  00001288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008d  00800100  00800100  00001288  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00001288  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00001954  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000019eb  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000158  00000000  00000000  00001a1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001621  00000000  00000000  00001b72  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000848  00000000  00000000  00003193  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000b1b  00000000  00000000  000039db  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000003b4  00000000  00000000  000044f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000066f  00000000  00000000  000048ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000013c9  00000000  00000000  00004f1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000108  00000000  00000000  000062e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
       8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
       c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      30:	0c 94 91 00 	jmp	0x122	; 0x122 <__vector_12>
      34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__vector_13>
      38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d0 e1       	ldi	r29, 0x10	; 16
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
      88:	21 e0       	ldi	r18, 0x01	; 1
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
      90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
      92:	ad 38       	cpi	r26, 0x8D	; 141
      94:	b2 07       	cpc	r27, r18
      96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
      98:	0e 94 2d 01 	call	0x25a	; 0x25a <main>
      9c:	0c 94 f8 08 	jmp	0x11f0	; 0x11f0 <_exit>

000000a0 <__bad_interrupt>:
      a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <__vector_13>:
// Global array to store ADC sample values
uint8_t adc_values[14];

// ADC and SPI sampling interrupt handler, fires at 2ms, 12ms, 22ms, etc
// Use this interrupt for anything you need to do before the main interrupt, i.e. sample things
ISR(TIMER1_COMPB_vect) {
      a4:	1f 92       	push	r1
      a6:	0f 92       	push	r0
      a8:	0f b6       	in	r0, 0x3f	; 63
      aa:	0f 92       	push	r0
      ac:	11 24       	eor	r1, r1
      ae:	ef 92       	push	r14
      b0:	ff 92       	push	r15
      b2:	0f 93       	push	r16
      b4:	1f 93       	push	r17
      b6:	2f 93       	push	r18
      b8:	3f 93       	push	r19
      ba:	4f 93       	push	r20
      bc:	5f 93       	push	r21
      be:	6f 93       	push	r22
      c0:	7f 93       	push	r23
      c2:	8f 93       	push	r24
      c4:	9f 93       	push	r25
      c6:	af 93       	push	r26
      c8:	bf 93       	push	r27
      ca:	cf 93       	push	r28
      cc:	df 93       	push	r29
      ce:	ef 93       	push	r30
      d0:	ff 93       	push	r31
      d2:	0f 2e       	mov	r0, r31
      d4:	f3 e0       	ldi	r31, 0x03	; 3
      d6:	ef 2e       	mov	r14, r31
      d8:	f1 e0       	ldi	r31, 0x01	; 1
      da:	ff 2e       	mov	r15, r31
      dc:	f0 2d       	mov	r31, r0
      de:	01 e1       	ldi	r16, 0x11	; 17
      e0:	11 e0       	ldi	r17, 0x01	; 1
      e2:	e7 01       	movw	r28, r14
	// Current sampled channel
	int ch = 0;
	
	// Sample all ADC channels
	for(ch = 0; ch < 14; ch++) {
		adc_values[ch] = adc_read(ch);
      e4:	8c 2f       	mov	r24, r28
      e6:	8e 19       	sub	r24, r14
      e8:	0e 94 9e 07 	call	0xf3c	; 0xf3c <adc_read>
      ec:	89 93       	st	Y+, r24
ISR(TIMER1_COMPB_vect) {
	// Current sampled channel
	int ch = 0;
	
	// Sample all ADC channels
	for(ch = 0; ch < 14; ch++) {
      ee:	c0 17       	cp	r28, r16
      f0:	d1 07       	cpc	r29, r17
      f2:	c1 f7       	brne	.-16     	; 0xe4 <__vector_13+0x40>
		adc_values[ch] = adc_read(ch);
	}
}
      f4:	ff 91       	pop	r31
      f6:	ef 91       	pop	r30
      f8:	df 91       	pop	r29
      fa:	cf 91       	pop	r28
      fc:	bf 91       	pop	r27
      fe:	af 91       	pop	r26
     100:	9f 91       	pop	r25
     102:	8f 91       	pop	r24
     104:	7f 91       	pop	r23
     106:	6f 91       	pop	r22
     108:	5f 91       	pop	r21
     10a:	4f 91       	pop	r20
     10c:	3f 91       	pop	r19
     10e:	2f 91       	pop	r18
     110:	1f 91       	pop	r17
     112:	0f 91       	pop	r16
     114:	ff 90       	pop	r15
     116:	ef 90       	pop	r14
     118:	0f 90       	pop	r0
     11a:	0f be       	out	0x3f, r0	; 63
     11c:	0f 90       	pop	r0
     11e:	1f 90       	pop	r1
     120:	18 95       	reti

00000122 <__vector_12>:

// Main 100Hz interrupt handler, fires at 10ms, 20ms, 30ms, etc
// Use this interrupt for any main things you need to do at 100Hz
ISR(TIMER1_COMPA_vect) { 
     122:	1f 92       	push	r1
     124:	0f 92       	push	r0
     126:	0f b6       	in	r0, 0x3f	; 63
     128:	0f 92       	push	r0
     12a:	11 24       	eor	r1, r1
     12c:	2f 93       	push	r18
     12e:	3f 93       	push	r19
     130:	4f 93       	push	r20
     132:	5f 93       	push	r21
     134:	6f 93       	push	r22
     136:	7f 93       	push	r23
     138:	8f 93       	push	r24
     13a:	9f 93       	push	r25
     13c:	af 93       	push	r26
     13e:	bf 93       	push	r27
     140:	ef 93       	push	r30
     142:	ff 93       	push	r31
	// Function Variables
	uint16_t tps_percent_diff;
	
	// Reset the watchdog timer
	wdt_reset();
     144:	a8 95       	wdr
	
	// Reset counter
	TCNT1 = 0x0000;
     146:	10 92 85 00 	sts	0x0085, r1
     14a:	10 92 84 00 	sts	0x0084, r1
	
	// Turn on MCU status pin, brightness indicates utilization level (PWM)
	// 15e_todo: comment this out if you don't have an MCU status LED
	set_io_pin(MCU_STATUS_PORT, MCU_STATUS_PIN, HIGH);
     14e:	41 e0       	ldi	r20, 0x01	; 1
     150:	67 e0       	ldi	r22, 0x07	; 7
     152:	82 e0       	ldi	r24, 0x02	; 2
     154:	0e 94 ef 07 	call	0xfde	; 0xfde <set_io_pin>
	can_tx_sync(THROTTLE_POSITION_L_ID, can_send_buffer, 1);
	can_send_buffer[0] = adc_values[THROTTLE_POSITION_R];
	can_tx_sync(THROTTLE_POSITION_R_ID, can_send_buffer, 1);*/
	
	// Clear error flag
	error_flag = 0;
     158:	10 92 00 01 	sts	0x0100, r1
	
	// Switch on the current state
	switch(state) {
     15c:	80 91 02 01 	lds	r24, 0x0102
     160:	81 30       	cpi	r24, 0x01	; 1
     162:	49 f0       	breq	.+18     	; 0x176 <__vector_12+0x54>
     164:	28 f0       	brcs	.+10     	; 0x170 <__vector_12+0x4e>
     166:	82 30       	cpi	r24, 0x02	; 2
     168:	49 f0       	breq	.+18     	; 0x17c <__vector_12+0x5a>
     16a:	83 30       	cpi	r24, 0x03	; 3
     16c:	c9 f5       	brne	.+114    	; 0x1e0 <__vector_12+0xbe>
     16e:	36 c0       	rjmp	.+108    	; 0x1dc <__vector_12+0xba>
		case GLV_ON:
			// Grounded low-voltage on
			// 15e_todo: Fill in code for GLV on here
			
			// Set throttle position to zero
			throttle_pos = 0;
     170:	10 92 01 01 	sts	0x0101, r1
			
			break;
     174:	35 c0       	rjmp	.+106    	; 0x1e0 <__vector_12+0xbe>
		case HV_EN:
			// High-voltage enable
			// 15e_todo: Fill in code for HV_EN here
			
			// Set throttle position to zero
			throttle_pos = 0;
     176:	10 92 01 01 	sts	0x0101, r1
			
			break;
     17a:	32 c0       	rjmp	.+100    	; 0x1e0 <__vector_12+0xbe>
		case RTD:
			// Ready to drive
			// 15e_todo: Fill in code for RTD here
			
			// Calculate % diff of TPS1 and TPS2
			if(adc_values[THROTTLE_POSITION_L] > adc_values[THROTTLE_POSITION_R]) {
     17c:	e0 91 0c 01 	lds	r30, 0x010C
     180:	60 91 05 01 	lds	r22, 0x0105
     184:	6e 17       	cp	r22, r30
     186:	88 f4       	brcc	.+34     	; 0x1aa <__vector_12+0x88>
				// Percent diff = (difference / average) * 100
				tps_percent_diff = (uint16_t)adc_values[THROTTLE_POSITION_L] 
     188:	2e 2f       	mov	r18, r30
     18a:	30 e0       	ldi	r19, 0x00	; 0
					- (uint16_t)adc_values[THROTTLE_POSITION_R];	// Difference
     18c:	70 e0       	ldi	r23, 0x00	; 0
			// 15e_todo: Fill in code for RTD here
			
			// Calculate % diff of TPS1 and TPS2
			if(adc_values[THROTTLE_POSITION_L] > adc_values[THROTTLE_POSITION_R]) {
				// Percent diff = (difference / average) * 100
				tps_percent_diff = (uint16_t)adc_values[THROTTLE_POSITION_L] 
     18e:	a9 01       	movw	r20, r18
     190:	46 1b       	sub	r20, r22
     192:	57 0b       	sbc	r21, r23
					- (uint16_t)adc_values[THROTTLE_POSITION_R];	// Difference
				tps_percent_diff = tps_percent_diff * 200;			// Multiply by 200 (move two from average to top)
     194:	f8 ec       	ldi	r31, 0xC8	; 200
     196:	f4 9f       	mul	r31, r20
     198:	c0 01       	movw	r24, r0
     19a:	f5 9f       	mul	r31, r21
     19c:	90 0d       	add	r25, r0
     19e:	11 24       	eor	r1, r1
				tps_percent_diff = tps_percent_diff
					/ (adc_values[THROTTLE_POSITION_L] + adc_values[THROTTLE_POSITION_R]);	// Divide by sum
     1a0:	62 0f       	add	r22, r18
     1a2:	73 1f       	adc	r23, r19
			if(adc_values[THROTTLE_POSITION_L] > adc_values[THROTTLE_POSITION_R]) {
				// Percent diff = (difference / average) * 100
				tps_percent_diff = (uint16_t)adc_values[THROTTLE_POSITION_L] 
					- (uint16_t)adc_values[THROTTLE_POSITION_R];	// Difference
				tps_percent_diff = tps_percent_diff * 200;			// Multiply by 200 (move two from average to top)
				tps_percent_diff = tps_percent_diff
     1a4:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <__udivmodhi4>
     1a8:	10 c0       	rjmp	.+32     	; 0x1ca <__vector_12+0xa8>
					/ (adc_values[THROTTLE_POSITION_L] + adc_values[THROTTLE_POSITION_R]);	// Divide by sum
				
			} else {
				// Percent diff = (difference / average) * 100
				tps_percent_diff = (uint16_t)adc_values[THROTTLE_POSITION_R]
     1aa:	70 e0       	ldi	r23, 0x00	; 0
				- (uint16_t)adc_values[THROTTLE_POSITION_L];	// Difference
     1ac:	2e 2f       	mov	r18, r30
     1ae:	30 e0       	ldi	r19, 0x00	; 0
				tps_percent_diff = tps_percent_diff
					/ (adc_values[THROTTLE_POSITION_L] + adc_values[THROTTLE_POSITION_R]);	// Divide by sum
				
			} else {
				// Percent diff = (difference / average) * 100
				tps_percent_diff = (uint16_t)adc_values[THROTTLE_POSITION_R]
     1b0:	ab 01       	movw	r20, r22
     1b2:	42 1b       	sub	r20, r18
     1b4:	53 0b       	sbc	r21, r19
				- (uint16_t)adc_values[THROTTLE_POSITION_L];	// Difference
				tps_percent_diff = tps_percent_diff * 200;			// Multiply by 200 (move two from average to top)
     1b6:	f8 ec       	ldi	r31, 0xC8	; 200
     1b8:	f4 9f       	mul	r31, r20
     1ba:	c0 01       	movw	r24, r0
     1bc:	f5 9f       	mul	r31, r21
     1be:	90 0d       	add	r25, r0
     1c0:	11 24       	eor	r1, r1
				tps_percent_diff = tps_percent_diff
				/ (adc_values[THROTTLE_POSITION_R] + adc_values[THROTTLE_POSITION_L]);	// Divide by sum
     1c2:	62 0f       	add	r22, r18
     1c4:	73 1f       	adc	r23, r19
			} else {
				// Percent diff = (difference / average) * 100
				tps_percent_diff = (uint16_t)adc_values[THROTTLE_POSITION_R]
				- (uint16_t)adc_values[THROTTLE_POSITION_L];	// Difference
				tps_percent_diff = tps_percent_diff * 200;			// Multiply by 200 (move two from average to top)
				tps_percent_diff = tps_percent_diff
     1c6:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <__udivmodhi4>
				/ (adc_values[THROTTLE_POSITION_R] + adc_values[THROTTLE_POSITION_L]);	// Divide by sum
			}
			
			// See if within 10%
			if(tps_percent_diff <= 10) {
     1ca:	6b 30       	cpi	r22, 0x0B	; 11
     1cc:	71 05       	cpc	r23, r1
     1ce:	18 f4       	brcc	.+6      	; 0x1d6 <__vector_12+0xb4>
				// If so, set to throttle_position_l
				throttle_pos = adc_values[THROTTLE_POSITION_L];
     1d0:	e0 93 01 01 	sts	0x0101, r30
     1d4:	05 c0       	rjmp	.+10     	; 0x1e0 <__vector_12+0xbe>
			} else {
				// Otherwise, zero throttle position
				throttle_pos = 0;
     1d6:	10 92 01 01 	sts	0x0101, r1
     1da:	02 c0       	rjmp	.+4      	; 0x1e0 <__vector_12+0xbe>
		case ERROR:
			// Error state
			// 15e_todo: Fill in code for ERROR here
			
			// Set throttle position to zero
			throttle_pos = 0;
     1dc:	10 92 01 01 	sts	0x0101, r1
	}
	
	/* Check mailboxes for Main Board Heartbeat message
	 *	and transition states if necessary
	 */
	if(can_get_status(&rcv_cmd_st[0]) != CAN_STATUS_NOT_COMPLETED) {
     1e0:	81 e5       	ldi	r24, 0x51	; 81
     1e2:	91 e0       	ldi	r25, 0x01	; 1
     1e4:	0e 94 f6 06 	call	0xdec	; 0xdec <can_get_status>
     1e8:	81 30       	cpi	r24, 0x01	; 1
     1ea:	51 f0       	breq	.+20     	; 0x200 <__vector_12+0xde>
		// There is, update the state
		state = ((struct main_heartbeat_st *)(&can_rcv_buffer[0]))->state;
     1ec:	80 91 1d 01 	lds	r24, 0x011D
     1f0:	80 93 02 01 	sts	0x0102, r24
		/* Setup mailbox to receive Main board state again
		 *		Necessary since the mailbox is cleared after a message is received
		 */
		while(can_cmd(&rcv_cmd_st[0]) != CAN_CMD_ACCEPTED);
     1f4:	81 e5       	ldi	r24, 0x51	; 81
     1f6:	91 e0       	ldi	r25, 0x01	; 1
     1f8:	0e 94 aa 01 	call	0x354	; 0x354 <can_cmd>
     1fc:	81 11       	cpse	r24, r1
     1fe:	fa cf       	rjmp	.-12     	; 0x1f4 <__vector_12+0xd2>
	}
	
	// Transmit heartbeat
	// Fill in heartbeat data, current state
	// Pack FSN heartbeat struct
	fsn_heartbeat.state = state;
     200:	80 91 02 01 	lds	r24, 0x0102
     204:	80 93 19 01 	sts	0x0119, r24
	fsn_heartbeat.bps = adc_values[BRAKE_PRESSURE];
     208:	80 91 0d 01 	lds	r24, 0x010D
     20c:	80 93 1b 01 	sts	0x011B, r24
	fsn_heartbeat.tps = throttle_pos;
     210:	80 91 01 01 	lds	r24, 0x0101
     214:	80 93 1a 01 	sts	0x011A, r24
	fsn_heartbeat.error = error_flag;
     218:	80 91 00 01 	lds	r24, 0x0100
     21c:	80 93 1c 01 	sts	0x011C, r24
	
	// Transmit over CAN
	can_tx_sync(FSN_HEARTBEAT_ID, (uint8_t *)(&fsn_heartbeat), sizeof(fsn_heartbeat));
     220:	44 e0       	ldi	r20, 0x04	; 4
     222:	69 e1       	ldi	r22, 0x19	; 25
     224:	71 e0       	ldi	r23, 0x01	; 1
     226:	81 e0       	ldi	r24, 0x01	; 1
     228:	92 e0       	ldi	r25, 0x02	; 2
     22a:	0e 94 28 08 	call	0x1050	; 0x1050 <can_tx_sync>
	
	// Turn off MCU Status LED
	// 15e_todo: comment this out if you don't have an MCU status LED
	set_io_pin(MCU_STATUS_PORT, MCU_STATUS_PIN, LOW);
     22e:	40 e0       	ldi	r20, 0x00	; 0
     230:	67 e0       	ldi	r22, 0x07	; 7
     232:	82 e0       	ldi	r24, 0x02	; 2
     234:	0e 94 ef 07 	call	0xfde	; 0xfde <set_io_pin>
}
     238:	ff 91       	pop	r31
     23a:	ef 91       	pop	r30
     23c:	bf 91       	pop	r27
     23e:	af 91       	pop	r26
     240:	9f 91       	pop	r25
     242:	8f 91       	pop	r24
     244:	7f 91       	pop	r23
     246:	6f 91       	pop	r22
     248:	5f 91       	pop	r21
     24a:	4f 91       	pop	r20
     24c:	3f 91       	pop	r19
     24e:	2f 91       	pop	r18
     250:	0f 90       	pop	r0
     252:	0f be       	out	0x3f, r0	; 63
     254:	0f 90       	pop	r0
     256:	1f 90       	pop	r1
     258:	18 95       	reti

0000025a <main>:
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     25a:	90 e0       	ldi	r25, 0x00	; 0
     25c:	80 e8       	ldi	r24, 0x80	; 128
     25e:	0f b6       	in	r0, 0x3f	; 63
     260:	f8 94       	cli
     262:	80 93 61 00 	sts	0x0061, r24
     266:	90 93 61 00 	sts	0x0061, r25
     26a:	0f be       	out	0x3f, r0	; 63
{
	// Set the clock prescaler to be 1 (full clock rate)
	clock_prescale_set(clock_div_1);
	
	// Initialize all board I/O
	init_io();
     26c:	0e 94 61 01 	call	0x2c2	; 0x2c2 <init_io>
	
	// Initialize CAN, fixed baudrate defined in config.h (passing 0 does autobaud)
	can_init(1);	// Fixed baud rate
     270:	81 e0       	ldi	r24, 0x01	; 1
     272:	0e 94 9b 01 	call	0x336	; 0x336 <can_init>
	
	// Initialize state mailbox
	init_can_mailboxes();
     276:	0e 94 88 01 	call	0x310	; 0x310 <init_can_mailboxes>
	
	// Initialize ADC and 100Hz ADC sampling interrupt.
	// 15e_todo: Comment this out if you do not use ADC. This should be called before init_interrupts
	// if you use ADC
	init_adc();
     27a:	0e 94 67 01 	call	0x2ce	; 0x2ce <init_adc>
	
	// Initialize watchdog timer
	// init_watchdog();
	
	// Initialize main timer output compare interrupt (100Hz) and enable interrupts
	init_interrupts();
     27e:	0e 94 42 01 	call	0x284	; 0x284 <init_interrupts>
     282:	ff cf       	rjmp	.-2      	; 0x282 <main+0x28>

00000284 <init_interrupts>:
 * Returns: void
 */
void init_interrupts(void) {
	
	//Enable output compare A interrupt for Timer 1 (enables interrupt)
	TIMSK1 |= _BV(OCIE1A);
     284:	ef e6       	ldi	r30, 0x6F	; 111
     286:	f0 e0       	ldi	r31, 0x00	; 0
     288:	80 81       	ld	r24, Z
     28a:	82 60       	ori	r24, 0x02	; 2
     28c:	80 83       	st	Z, r24
	
	// Set timer1_clk prescaler to clk/256 = 62.5kHz with 16MHz system clock
	TCCR1A = _BV(WGM12);
     28e:	a0 e8       	ldi	r26, 0x80	; 128
     290:	b0 e0       	ldi	r27, 0x00	; 0
     292:	88 e0       	ldi	r24, 0x08	; 8
     294:	8c 93       	st	X, r24
	TCCR1B = _BV(CS12) | _BV(CS11);
     296:	e1 e8       	ldi	r30, 0x81	; 129
     298:	f0 e0       	ldi	r31, 0x00	; 0
     29a:	86 e0       	ldi	r24, 0x06	; 6
     29c:	80 83       	st	Z, r24
	
	// Reset timer 1
	TCNT1 = 0;
     29e:	10 92 85 00 	sts	0x0085, r1
     2a2:	10 92 84 00 	sts	0x0084, r1

	// Set timer1_clk prescaler to clk/256 = 62.5kHz with 16MHz system clock
	TCCR1A = 0;
     2a6:	1c 92       	st	X, r1
	TCCR1B &= (1 << CS12) | (0 << CS11) | (0 << CS10); 
     2a8:	80 81       	ld	r24, Z
     2aa:	84 70       	andi	r24, 0x04	; 4
     2ac:	80 83       	st	Z, r24
	
	/*Set output compare register 1A to 0x271=625
		This sets the timer to count to 625, making a
		100Hz interrupt
	*/
	OCR1A = 0x0271;
     2ae:	81 e7       	ldi	r24, 0x71	; 113
     2b0:	92 e0       	ldi	r25, 0x02	; 2
     2b2:	90 93 89 00 	sts	0x0089, r25
     2b6:	80 93 88 00 	sts	0x0088, r24
	
	// Clear interrupts
	TIFR1 = (1 << OCF1A) || (1 << OCF1B);
     2ba:	81 e0       	ldi	r24, 0x01	; 1
     2bc:	86 bb       	out	0x16, r24	; 22

	// enable interrupts
	sei();
     2be:	78 94       	sei
     2c0:	08 95       	ret

000002c2 <init_io>:
 * Initialize digital I/O pins.
 * Arguments: void
 * Returns: void
 */
void init_io(void) {
	config_io_pin(MCU_STATUS_PIN, MCU_STATUS_PORT, IO_DIR_OUTPUT);
     2c2:	41 e0       	ldi	r20, 0x01	; 1
     2c4:	62 e0       	ldi	r22, 0x02	; 2
     2c6:	87 e0       	ldi	r24, 0x07	; 7
     2c8:	0e 94 b6 07 	call	0xf6c	; 0xf6c <config_io_pin>
     2cc:	08 95       	ret

000002ce <init_adc>:
 * Arguments: void
 * Returns: void
 */
void init_adc(void){

	ADCSRA |= (1 << ADPS2) | (0 << ADPS1) | (0 << ADPS0); // Set ADC prescaler to 16 - 1MHz sample rate @ 16MHz
     2ce:	ea e7       	ldi	r30, 0x7A	; 122
     2d0:	f0 e0       	ldi	r31, 0x00	; 0
     2d2:	80 81       	ld	r24, Z
     2d4:	84 60       	ori	r24, 0x04	; 4
     2d6:	80 83       	st	Z, r24

	ADMUX  |= (1 << ADLAR); // Left adjust ADC result to allow easy 8 bit reading
     2d8:	ac e7       	ldi	r26, 0x7C	; 124
     2da:	b0 e0       	ldi	r27, 0x00	; 0
     2dc:	8c 91       	ld	r24, X
     2de:	80 62       	ori	r24, 0x20	; 32
     2e0:	8c 93       	st	X, r24
	ADCSRB |= (1 << ADHSM);	// Set ADC high speed mode
     2e2:	ab e7       	ldi	r26, 0x7B	; 123
     2e4:	b0 e0       	ldi	r27, 0x00	; 0
     2e6:	8c 91       	ld	r24, X
     2e8:	80 68       	ori	r24, 0x80	; 128
     2ea:	8c 93       	st	X, r24

	// No MUX values needed to be changed for initialization
	
	ADCSRB |= (1 << AREFEN); // Set ADC reference to AREF (AREFEN = 1, ISRCEN = 0, REFS1 = 0, REFS0 = 0)
     2ec:	8c 91       	ld	r24, X
     2ee:	80 62       	ori	r24, 0x20	; 32
     2f0:	8c 93       	st	X, r24
	
	ADCSRA |= (1 << ADEN);  // Enable ADC
     2f2:	80 81       	ld	r24, Z
     2f4:	80 68       	ori	r24, 0x80	; 128
     2f6:	80 83       	st	Z, r24
	
	// Enable timer 1 output compare B interrupt to sample ADCs
	// 62.5KHz timer clock * 2.5ms compare time = 156 = 0x9C
	OCR1B = 0x009C;
     2f8:	8c e9       	ldi	r24, 0x9C	; 156
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	90 93 8b 00 	sts	0x008B, r25
     300:	80 93 8a 00 	sts	0x008A, r24
	// Enable output compare B interrupt
	TIMSK1 |= _BV(OCIE1B);
     304:	ef e6       	ldi	r30, 0x6F	; 111
     306:	f0 e0       	ldi	r31, 0x00	; 0
     308:	80 81       	ld	r24, Z
     30a:	84 60       	ori	r24, 0x04	; 4
     30c:	80 83       	st	Z, r24
     30e:	08 95       	ret

00000310 <init_can_mailboxes>:
 * sets up mailboxes for all critical CAN messages that this board receives
 *
 */
void init_can_mailboxes(void) {
	// Initialize heartbeat send mailbox for RSN
	setup_can_send(&heartbeat_cmd_st, ((uint8_t *)(&can_send_buffer)), sizeof(struct fsn_heartbeat_st), RSN_HEARTBEAT_ID);
     310:	22 e0       	ldi	r18, 0x02	; 2
     312:	32 e0       	ldi	r19, 0x02	; 2
     314:	44 e0       	ldi	r20, 0x04	; 4
     316:	61 e1       	ldi	r22, 0x11	; 17
     318:	71 e0       	ldi	r23, 0x01	; 1
     31a:	85 e4       	ldi	r24, 0x45	; 69
     31c:	91 e0       	ldi	r25, 0x01	; 1
     31e:	0e 94 62 08 	call	0x10c4	; 0x10c4 <setup_can_send>
	
	/* Initialize receive mailboxes    */
	//Receive main heartbeat for state transitions
	setup_can_rcv(&rcv_cmd_st[0], ((uint8_t *)(&can_rcv_buffer[0])), sizeof(struct main_heartbeat_st), MAIN_HEARTBEAT_ID);
     322:	20 e0       	ldi	r18, 0x00	; 0
     324:	32 e0       	ldi	r19, 0x02	; 2
     326:	41 e0       	ldi	r20, 0x01	; 1
     328:	6d e1       	ldi	r22, 0x1D	; 29
     32a:	71 e0       	ldi	r23, 0x01	; 1
     32c:	81 e5       	ldi	r24, 0x51	; 81
     32e:	91 e0       	ldi	r25, 0x01	; 1
     330:	0e 94 4f 08 	call	0x109e	; 0x109e <setup_can_rcv>
     334:	08 95       	ret

00000336 <can_init>:
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
     336:	0e 94 d6 08 	call	0x11ac	; 0x11ac <can_fixed_baudrate>
     33a:	88 23       	and	r24, r24
     33c:	49 f0       	breq	.+18     	; 0x350 <can_init+0x1a>
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
     33e:	0e 94 75 08 	call	0x10ea	; 0x10ea <can_clear_all_mob>
    Can_enable();                               // c.f. macro in "can_drv.h" 
     342:	e8 ed       	ldi	r30, 0xD8	; 216
     344:	f0 e0       	ldi	r31, 0x00	; 0
     346:	80 81       	ld	r24, Z
     348:	82 60       	ori	r24, 0x02	; 2
     34a:	80 83       	st	Z, r24
    return (1);
     34c:	81 e0       	ldi	r24, 0x01	; 1
     34e:	08 95       	ret
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
     350:	80 e0       	ldi	r24, 0x00	; 0
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
    Can_enable();                               // c.f. macro in "can_drv.h" 
    return (1);
}
     352:	08 95       	ret

00000354 <can_cmd>:
//! @return CAN_CMD_ACCEPTED - command is accepted
//!         CAN_CMD_REFUSED  - command is refused
//!
//------------------------------------------------------------------------------
uint8_t can_cmd(st_cmd_t* cmd)
{
     354:	0f 93       	push	r16
     356:	1f 93       	push	r17
     358:	cf 93       	push	r28
     35a:	df 93       	push	r29
     35c:	00 d0       	rcall	.+0      	; 0x35e <can_cmd+0xa>
     35e:	00 d0       	rcall	.+0      	; 0x360 <can_cmd+0xc>
     360:	cd b7       	in	r28, 0x3d	; 61
     362:	de b7       	in	r29, 0x3e	; 62
     364:	8c 01       	movw	r16, r24
  uint8_t mob_handle, cpt;
  uint32_t u32_temp;
  
  if (cmd->cmd == CMD_ABORT)
     366:	dc 01       	movw	r26, r24
     368:	11 96       	adiw	r26, 0x01	; 1
     36a:	8c 91       	ld	r24, X
     36c:	11 97       	sbiw	r26, 0x01	; 1
     36e:	8c 30       	cpi	r24, 0x0C	; 12
     370:	b1 f4       	brne	.+44     	; 0x39e <can_cmd+0x4a>
  {
    if (cmd->status == MOB_PENDING)
     372:	19 96       	adiw	r26, 0x09	; 9
     374:	8c 91       	ld	r24, X
     376:	19 97       	sbiw	r26, 0x09	; 9
     378:	80 36       	cpi	r24, 0x60	; 96
     37a:	69 f4       	brne	.+26     	; 0x396 <can_cmd+0x42>
    {
      // Rx or Tx not yet performed
      Can_set_mob(cmd->handle);
     37c:	8c 91       	ld	r24, X
     37e:	82 95       	swap	r24
     380:	80 7f       	andi	r24, 0xF0	; 240
     382:	80 93 ed 00 	sts	0x00ED, r24
      Can_mob_abort();
     386:	ef ee       	ldi	r30, 0xEF	; 239
     388:	f0 e0       	ldi	r31, 0x00	; 0
     38a:	80 81       	ld	r24, Z
     38c:	8f 73       	andi	r24, 0x3F	; 63
     38e:	80 83       	st	Z, r24
      Can_clear_status_mob();       // To be sure !
     390:	10 92 ee 00 	sts	0x00EE, r1
      cmd->handle = 0;
     394:	1c 92       	st	X, r1
    }
    cmd->status = STATUS_CLEARED; 
     396:	f8 01       	movw	r30, r16
     398:	11 86       	std	Z+9, r1	; 0x09
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     39a:	80 e0       	ldi	r24, 0x00	; 0
     39c:	1e c5       	rjmp	.+2620   	; 0xdda <can_cmd+0xa86>
    }
    cmd->status = STATUS_CLEARED; 
  }
  else
  {
    mob_handle = can_get_mob_free();
     39e:	0e 94 87 08 	call	0x110e	; 0x110e <can_get_mob_free>
    if (mob_handle!= NO_MOB)
     3a2:	8f 3f       	cpi	r24, 0xFF	; 255
     3a4:	09 f4       	brne	.+2      	; 0x3a8 <can_cmd+0x54>
     3a6:	14 c5       	rjmp	.+2600   	; 0xdd0 <can_cmd+0xa7c>
    {
      cmd->status = MOB_PENDING; 
     3a8:	90 e6       	ldi	r25, 0x60	; 96
     3aa:	d8 01       	movw	r26, r16
     3ac:	19 96       	adiw	r26, 0x09	; 9
     3ae:	9c 93       	st	X, r25
     3b0:	19 97       	sbiw	r26, 0x09	; 9
      cmd->handle = mob_handle;
     3b2:	8c 93       	st	X, r24
      Can_set_mob(mob_handle);
     3b4:	82 95       	swap	r24
     3b6:	80 7f       	andi	r24, 0xF0	; 240
     3b8:	80 93 ed 00 	sts	0x00ED, r24
      Can_clear_mob();
     3bc:	ee ee       	ldi	r30, 0xEE	; 238
     3be:	f0 e0       	ldi	r31, 0x00	; 0
     3c0:	11 92       	st	Z+, r1
     3c2:	e8 3f       	cpi	r30, 0xF8	; 248
     3c4:	f1 05       	cpc	r31, r1
     3c6:	e1 f7       	brne	.-8      	; 0x3c0 <can_cmd+0x6c>
          
      switch (cmd->cmd)
     3c8:	f8 01       	movw	r30, r16
     3ca:	81 81       	ldd	r24, Z+1	; 0x01
     3cc:	86 30       	cpi	r24, 0x06	; 6
     3ce:	09 f4       	brne	.+2      	; 0x3d2 <can_cmd+0x7e>
     3d0:	fe c1       	rjmp	.+1020   	; 0x7ce <can_cmd+0x47a>
     3d2:	88 f4       	brcc	.+34     	; 0x3f6 <can_cmd+0xa2>
     3d4:	83 30       	cpi	r24, 0x03	; 3
     3d6:	09 f4       	brne	.+2      	; 0x3da <can_cmd+0x86>
     3d8:	19 c1       	rjmp	.+562    	; 0x60c <can_cmd+0x2b8>
     3da:	30 f4       	brcc	.+12     	; 0x3e8 <can_cmd+0x94>
     3dc:	81 30       	cpi	r24, 0x01	; 1
     3de:	01 f1       	breq	.+64     	; 0x420 <can_cmd+0xcc>
     3e0:	82 30       	cpi	r24, 0x02	; 2
     3e2:	09 f0       	breq	.+2      	; 0x3e6 <can_cmd+0x92>
     3e4:	f1 c4       	rjmp	.+2530   	; 0xdc8 <can_cmd+0xa74>
     3e6:	9b c0       	rjmp	.+310    	; 0x51e <can_cmd+0x1ca>
     3e8:	84 30       	cpi	r24, 0x04	; 4
     3ea:	09 f4       	brne	.+2      	; 0x3ee <can_cmd+0x9a>
     3ec:	70 c1       	rjmp	.+736    	; 0x6ce <can_cmd+0x37a>
     3ee:	85 30       	cpi	r24, 0x05	; 5
     3f0:	09 f0       	breq	.+2      	; 0x3f4 <can_cmd+0xa0>
     3f2:	ea c4       	rjmp	.+2516   	; 0xdc8 <can_cmd+0xa74>
     3f4:	a7 c1       	rjmp	.+846    	; 0x744 <can_cmd+0x3f0>
     3f6:	89 30       	cpi	r24, 0x09	; 9
     3f8:	09 f4       	brne	.+2      	; 0x3fc <can_cmd+0xa8>
     3fa:	4a c3       	rjmp	.+1684   	; 0xa90 <can_cmd+0x73c>
     3fc:	38 f4       	brcc	.+14     	; 0x40c <can_cmd+0xb8>
     3fe:	87 30       	cpi	r24, 0x07	; 7
     400:	09 f4       	brne	.+2      	; 0x404 <can_cmd+0xb0>
     402:	2e c2       	rjmp	.+1116   	; 0x860 <can_cmd+0x50c>
     404:	88 30       	cpi	r24, 0x08	; 8
     406:	09 f0       	breq	.+2      	; 0x40a <can_cmd+0xb6>
     408:	df c4       	rjmp	.+2494   	; 0xdc8 <can_cmd+0xa74>
     40a:	b1 c2       	rjmp	.+1378   	; 0x96e <can_cmd+0x61a>
     40c:	8a 30       	cpi	r24, 0x0A	; 10
     40e:	21 f0       	breq	.+8      	; 0x418 <can_cmd+0xc4>
     410:	8b 30       	cpi	r24, 0x0B	; 11
     412:	09 f0       	breq	.+2      	; 0x416 <can_cmd+0xc2>
     414:	d9 c4       	rjmp	.+2482   	; 0xdc8 <can_cmd+0xa74>
     416:	2c c4       	rjmp	.+2136   	; 0xc70 <can_cmd+0x91c>
          Can_set_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     418:	86 81       	ldd	r24, Z+6	; 0x06
     41a:	81 11       	cpse	r24, r1
     41c:	ce c3       	rjmp	.+1948   	; 0xbba <can_cmd+0x866>
     41e:	df c3       	rjmp	.+1982   	; 0xbde <can_cmd+0x88a>
          
      switch (cmd->cmd)
      {
        //------------      
        case CMD_TX:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     420:	f8 01       	movw	r30, r16
     422:	83 85       	ldd	r24, Z+11	; 0x0b
     424:	88 23       	and	r24, r24
     426:	69 f1       	breq	.+90     	; 0x482 <can_cmd+0x12e>
     428:	94 81       	ldd	r25, Z+4	; 0x04
     42a:	92 95       	swap	r25
     42c:	96 95       	lsr	r25
     42e:	97 70       	andi	r25, 0x07	; 7
     430:	85 81       	ldd	r24, Z+5	; 0x05
     432:	88 0f       	add	r24, r24
     434:	88 0f       	add	r24, r24
     436:	88 0f       	add	r24, r24
     438:	89 0f       	add	r24, r25
     43a:	80 93 f3 00 	sts	0x00F3, r24
     43e:	93 81       	ldd	r25, Z+3	; 0x03
     440:	92 95       	swap	r25
     442:	96 95       	lsr	r25
     444:	97 70       	andi	r25, 0x07	; 7
     446:	84 81       	ldd	r24, Z+4	; 0x04
     448:	88 0f       	add	r24, r24
     44a:	88 0f       	add	r24, r24
     44c:	88 0f       	add	r24, r24
     44e:	89 0f       	add	r24, r25
     450:	80 93 f2 00 	sts	0x00F2, r24
     454:	92 81       	ldd	r25, Z+2	; 0x02
     456:	92 95       	swap	r25
     458:	96 95       	lsr	r25
     45a:	97 70       	andi	r25, 0x07	; 7
     45c:	83 81       	ldd	r24, Z+3	; 0x03
     45e:	88 0f       	add	r24, r24
     460:	88 0f       	add	r24, r24
     462:	88 0f       	add	r24, r24
     464:	89 0f       	add	r24, r25
     466:	80 93 f1 00 	sts	0x00F1, r24
     46a:	82 81       	ldd	r24, Z+2	; 0x02
     46c:	88 0f       	add	r24, r24
     46e:	88 0f       	add	r24, r24
     470:	88 0f       	add	r24, r24
     472:	80 93 f0 00 	sts	0x00F0, r24
     476:	ef ee       	ldi	r30, 0xEF	; 239
     478:	f0 e0       	ldi	r31, 0x00	; 0
     47a:	80 81       	ld	r24, Z
     47c:	80 61       	ori	r24, 0x10	; 16
     47e:	80 83       	st	Z, r24
     480:	17 c0       	rjmp	.+46     	; 0x4b0 <can_cmd+0x15c>
          else              { Can_set_std_id(cmd->id.std);}
     482:	82 81       	ldd	r24, Z+2	; 0x02
     484:	86 95       	lsr	r24
     486:	86 95       	lsr	r24
     488:	86 95       	lsr	r24
     48a:	93 81       	ldd	r25, Z+3	; 0x03
     48c:	b0 e2       	ldi	r27, 0x20	; 32
     48e:	9b 9f       	mul	r25, r27
     490:	80 0d       	add	r24, r0
     492:	11 24       	eor	r1, r1
     494:	80 93 f3 00 	sts	0x00F3, r24
     498:	f8 01       	movw	r30, r16
     49a:	82 81       	ldd	r24, Z+2	; 0x02
     49c:	82 95       	swap	r24
     49e:	88 0f       	add	r24, r24
     4a0:	80 7e       	andi	r24, 0xE0	; 224
     4a2:	80 93 f2 00 	sts	0x00F2, r24
     4a6:	ef ee       	ldi	r30, 0xEF	; 239
     4a8:	f0 e0       	ldi	r31, 0x00	; 0
     4aa:	80 81       	ld	r24, Z
     4ac:	8f 7e       	andi	r24, 0xEF	; 239
     4ae:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     4b0:	d8 01       	movw	r26, r16
     4b2:	16 96       	adiw	r26, 0x06	; 6
     4b4:	8c 91       	ld	r24, X
     4b6:	88 23       	and	r24, r24
     4b8:	91 f0       	breq	.+36     	; 0x4de <can_cmd+0x18a>
     4ba:	80 e0       	ldi	r24, 0x00	; 0
     4bc:	2a ef       	ldi	r18, 0xFA	; 250
     4be:	30 e0       	ldi	r19, 0x00	; 0
     4c0:	d8 01       	movw	r26, r16
     4c2:	17 96       	adiw	r26, 0x07	; 7
     4c4:	ed 91       	ld	r30, X+
     4c6:	fc 91       	ld	r31, X
     4c8:	18 97       	sbiw	r26, 0x08	; 8
     4ca:	e8 0f       	add	r30, r24
     4cc:	f1 1d       	adc	r31, r1
     4ce:	90 81       	ld	r25, Z
     4d0:	f9 01       	movw	r30, r18
     4d2:	90 83       	st	Z, r25
     4d4:	8f 5f       	subi	r24, 0xFF	; 255
     4d6:	16 96       	adiw	r26, 0x06	; 6
     4d8:	9c 91       	ld	r25, X
     4da:	89 17       	cp	r24, r25
     4dc:	88 f3       	brcs	.-30     	; 0x4c0 <can_cmd+0x16c>
          if (cmd->ctrl.rtr) Can_set_rtr(); 
     4de:	d8 01       	movw	r26, r16
     4e0:	1a 96       	adiw	r26, 0x0a	; 10
     4e2:	8c 91       	ld	r24, X
     4e4:	88 23       	and	r24, r24
     4e6:	31 f0       	breq	.+12     	; 0x4f4 <can_cmd+0x1a0>
     4e8:	e0 ef       	ldi	r30, 0xF0	; 240
     4ea:	f0 e0       	ldi	r31, 0x00	; 0
     4ec:	80 81       	ld	r24, Z
     4ee:	84 60       	ori	r24, 0x04	; 4
     4f0:	80 83       	st	Z, r24
     4f2:	05 c0       	rjmp	.+10     	; 0x4fe <can_cmd+0x1aa>
            else Can_clear_rtr();    
     4f4:	e0 ef       	ldi	r30, 0xF0	; 240
     4f6:	f0 e0       	ldi	r31, 0x00	; 0
     4f8:	80 81       	ld	r24, Z
     4fa:	8b 7f       	andi	r24, 0xFB	; 251
     4fc:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     4fe:	ef ee       	ldi	r30, 0xEF	; 239
     500:	f0 e0       	ldi	r31, 0x00	; 0
     502:	90 81       	ld	r25, Z
     504:	d8 01       	movw	r26, r16
     506:	16 96       	adiw	r26, 0x06	; 6
     508:	8c 91       	ld	r24, X
     50a:	89 2b       	or	r24, r25
     50c:	80 83       	st	Z, r24
          Can_config_tx();
     50e:	80 81       	ld	r24, Z
     510:	8f 73       	andi	r24, 0x3F	; 63
     512:	80 83       	st	Z, r24
     514:	80 81       	ld	r24, Z
     516:	80 64       	ori	r24, 0x40	; 64
     518:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     51a:	80 e0       	ldi	r24, 0x00	; 0
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          if (cmd->ctrl.rtr) Can_set_rtr(); 
            else Can_clear_rtr();    
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     51c:	5e c4       	rjmp	.+2236   	; 0xdda <can_cmd+0xa86>
        //------------      
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     51e:	f8 01       	movw	r30, r16
     520:	83 85       	ldd	r24, Z+11	; 0x0b
     522:	88 23       	and	r24, r24
     524:	69 f1       	breq	.+90     	; 0x580 <can_cmd+0x22c>
     526:	94 81       	ldd	r25, Z+4	; 0x04
     528:	92 95       	swap	r25
     52a:	96 95       	lsr	r25
     52c:	97 70       	andi	r25, 0x07	; 7
     52e:	85 81       	ldd	r24, Z+5	; 0x05
     530:	88 0f       	add	r24, r24
     532:	88 0f       	add	r24, r24
     534:	88 0f       	add	r24, r24
     536:	89 0f       	add	r24, r25
     538:	80 93 f3 00 	sts	0x00F3, r24
     53c:	93 81       	ldd	r25, Z+3	; 0x03
     53e:	92 95       	swap	r25
     540:	96 95       	lsr	r25
     542:	97 70       	andi	r25, 0x07	; 7
     544:	84 81       	ldd	r24, Z+4	; 0x04
     546:	88 0f       	add	r24, r24
     548:	88 0f       	add	r24, r24
     54a:	88 0f       	add	r24, r24
     54c:	89 0f       	add	r24, r25
     54e:	80 93 f2 00 	sts	0x00F2, r24
     552:	92 81       	ldd	r25, Z+2	; 0x02
     554:	92 95       	swap	r25
     556:	96 95       	lsr	r25
     558:	97 70       	andi	r25, 0x07	; 7
     55a:	83 81       	ldd	r24, Z+3	; 0x03
     55c:	88 0f       	add	r24, r24
     55e:	88 0f       	add	r24, r24
     560:	88 0f       	add	r24, r24
     562:	89 0f       	add	r24, r25
     564:	80 93 f1 00 	sts	0x00F1, r24
     568:	82 81       	ldd	r24, Z+2	; 0x02
     56a:	88 0f       	add	r24, r24
     56c:	88 0f       	add	r24, r24
     56e:	88 0f       	add	r24, r24
     570:	80 93 f0 00 	sts	0x00F0, r24
     574:	ef ee       	ldi	r30, 0xEF	; 239
     576:	f0 e0       	ldi	r31, 0x00	; 0
     578:	80 81       	ld	r24, Z
     57a:	80 61       	ori	r24, 0x10	; 16
     57c:	80 83       	st	Z, r24
     57e:	17 c0       	rjmp	.+46     	; 0x5ae <can_cmd+0x25a>
          else              { Can_set_std_id(cmd->id.std);}
     580:	82 81       	ldd	r24, Z+2	; 0x02
     582:	86 95       	lsr	r24
     584:	86 95       	lsr	r24
     586:	86 95       	lsr	r24
     588:	93 81       	ldd	r25, Z+3	; 0x03
     58a:	b0 e2       	ldi	r27, 0x20	; 32
     58c:	9b 9f       	mul	r25, r27
     58e:	80 0d       	add	r24, r0
     590:	11 24       	eor	r1, r1
     592:	80 93 f3 00 	sts	0x00F3, r24
     596:	f8 01       	movw	r30, r16
     598:	82 81       	ldd	r24, Z+2	; 0x02
     59a:	82 95       	swap	r24
     59c:	88 0f       	add	r24, r24
     59e:	80 7e       	andi	r24, 0xE0	; 224
     5a0:	80 93 f2 00 	sts	0x00F2, r24
     5a4:	ef ee       	ldi	r30, 0xEF	; 239
     5a6:	f0 e0       	ldi	r31, 0x00	; 0
     5a8:	80 81       	ld	r24, Z
     5aa:	8f 7e       	andi	r24, 0xEF	; 239
     5ac:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     5ae:	d8 01       	movw	r26, r16
     5b0:	16 96       	adiw	r26, 0x06	; 6
     5b2:	8c 91       	ld	r24, X
     5b4:	88 23       	and	r24, r24
     5b6:	91 f0       	breq	.+36     	; 0x5dc <can_cmd+0x288>
     5b8:	80 e0       	ldi	r24, 0x00	; 0
     5ba:	2a ef       	ldi	r18, 0xFA	; 250
     5bc:	30 e0       	ldi	r19, 0x00	; 0
     5be:	d8 01       	movw	r26, r16
     5c0:	17 96       	adiw	r26, 0x07	; 7
     5c2:	ed 91       	ld	r30, X+
     5c4:	fc 91       	ld	r31, X
     5c6:	18 97       	sbiw	r26, 0x08	; 8
     5c8:	e8 0f       	add	r30, r24
     5ca:	f1 1d       	adc	r31, r1
     5cc:	90 81       	ld	r25, Z
     5ce:	f9 01       	movw	r30, r18
     5d0:	90 83       	st	Z, r25
     5d2:	8f 5f       	subi	r24, 0xFF	; 255
     5d4:	16 96       	adiw	r26, 0x06	; 6
     5d6:	9c 91       	ld	r25, X
     5d8:	89 17       	cp	r24, r25
     5da:	88 f3       	brcs	.-30     	; 0x5be <can_cmd+0x26a>
          cmd->ctrl.rtr=0; Can_clear_rtr();
     5dc:	d8 01       	movw	r26, r16
     5de:	1a 96       	adiw	r26, 0x0a	; 10
     5e0:	1c 92       	st	X, r1
     5e2:	1a 97       	sbiw	r26, 0x0a	; 10
     5e4:	e0 ef       	ldi	r30, 0xF0	; 240
     5e6:	f0 e0       	ldi	r31, 0x00	; 0
     5e8:	80 81       	ld	r24, Z
     5ea:	8b 7f       	andi	r24, 0xFB	; 251
     5ec:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     5ee:	ef ee       	ldi	r30, 0xEF	; 239
     5f0:	f0 e0       	ldi	r31, 0x00	; 0
     5f2:	90 81       	ld	r25, Z
     5f4:	16 96       	adiw	r26, 0x06	; 6
     5f6:	8c 91       	ld	r24, X
     5f8:	89 2b       	or	r24, r25
     5fa:	80 83       	st	Z, r24
          Can_config_tx();
     5fc:	80 81       	ld	r24, Z
     5fe:	8f 73       	andi	r24, 0x3F	; 63
     600:	80 83       	st	Z, r24
     602:	80 81       	ld	r24, Z
     604:	80 64       	ori	r24, 0x40	; 64
     606:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     608:	80 e0       	ldi	r24, 0x00	; 0
          else              { Can_set_std_id(cmd->id.std);}
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          cmd->ctrl.rtr=0; Can_clear_rtr();
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     60a:	e7 c3       	rjmp	.+1998   	; 0xdda <can_cmd+0xa86>
        //------------      
        case CMD_TX_REMOTE:       
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     60c:	f8 01       	movw	r30, r16
     60e:	83 85       	ldd	r24, Z+11	; 0x0b
     610:	88 23       	and	r24, r24
     612:	69 f1       	breq	.+90     	; 0x66e <can_cmd+0x31a>
     614:	94 81       	ldd	r25, Z+4	; 0x04
     616:	92 95       	swap	r25
     618:	96 95       	lsr	r25
     61a:	97 70       	andi	r25, 0x07	; 7
     61c:	85 81       	ldd	r24, Z+5	; 0x05
     61e:	88 0f       	add	r24, r24
     620:	88 0f       	add	r24, r24
     622:	88 0f       	add	r24, r24
     624:	89 0f       	add	r24, r25
     626:	80 93 f3 00 	sts	0x00F3, r24
     62a:	93 81       	ldd	r25, Z+3	; 0x03
     62c:	92 95       	swap	r25
     62e:	96 95       	lsr	r25
     630:	97 70       	andi	r25, 0x07	; 7
     632:	84 81       	ldd	r24, Z+4	; 0x04
     634:	88 0f       	add	r24, r24
     636:	88 0f       	add	r24, r24
     638:	88 0f       	add	r24, r24
     63a:	89 0f       	add	r24, r25
     63c:	80 93 f2 00 	sts	0x00F2, r24
     640:	92 81       	ldd	r25, Z+2	; 0x02
     642:	92 95       	swap	r25
     644:	96 95       	lsr	r25
     646:	97 70       	andi	r25, 0x07	; 7
     648:	83 81       	ldd	r24, Z+3	; 0x03
     64a:	88 0f       	add	r24, r24
     64c:	88 0f       	add	r24, r24
     64e:	88 0f       	add	r24, r24
     650:	89 0f       	add	r24, r25
     652:	80 93 f1 00 	sts	0x00F1, r24
     656:	82 81       	ldd	r24, Z+2	; 0x02
     658:	88 0f       	add	r24, r24
     65a:	88 0f       	add	r24, r24
     65c:	88 0f       	add	r24, r24
     65e:	80 93 f0 00 	sts	0x00F0, r24
     662:	ef ee       	ldi	r30, 0xEF	; 239
     664:	f0 e0       	ldi	r31, 0x00	; 0
     666:	80 81       	ld	r24, Z
     668:	80 61       	ori	r24, 0x10	; 16
     66a:	80 83       	st	Z, r24
     66c:	17 c0       	rjmp	.+46     	; 0x69c <can_cmd+0x348>
          else              { Can_set_std_id(cmd->id.std);}
     66e:	82 81       	ldd	r24, Z+2	; 0x02
     670:	86 95       	lsr	r24
     672:	86 95       	lsr	r24
     674:	86 95       	lsr	r24
     676:	93 81       	ldd	r25, Z+3	; 0x03
     678:	b0 e2       	ldi	r27, 0x20	; 32
     67a:	9b 9f       	mul	r25, r27
     67c:	80 0d       	add	r24, r0
     67e:	11 24       	eor	r1, r1
     680:	80 93 f3 00 	sts	0x00F3, r24
     684:	f8 01       	movw	r30, r16
     686:	82 81       	ldd	r24, Z+2	; 0x02
     688:	82 95       	swap	r24
     68a:	88 0f       	add	r24, r24
     68c:	80 7e       	andi	r24, 0xE0	; 224
     68e:	80 93 f2 00 	sts	0x00F2, r24
     692:	ef ee       	ldi	r30, 0xEF	; 239
     694:	f0 e0       	ldi	r31, 0x00	; 0
     696:	80 81       	ld	r24, Z
     698:	8f 7e       	andi	r24, 0xEF	; 239
     69a:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtr();
     69c:	81 e0       	ldi	r24, 0x01	; 1
     69e:	d8 01       	movw	r26, r16
     6a0:	1a 96       	adiw	r26, 0x0a	; 10
     6a2:	8c 93       	st	X, r24
     6a4:	1a 97       	sbiw	r26, 0x0a	; 10
     6a6:	e0 ef       	ldi	r30, 0xF0	; 240
     6a8:	f0 e0       	ldi	r31, 0x00	; 0
     6aa:	80 81       	ld	r24, Z
     6ac:	84 60       	ori	r24, 0x04	; 4
     6ae:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     6b0:	ef ee       	ldi	r30, 0xEF	; 239
     6b2:	f0 e0       	ldi	r31, 0x00	; 0
     6b4:	90 81       	ld	r25, Z
     6b6:	16 96       	adiw	r26, 0x06	; 6
     6b8:	8c 91       	ld	r24, X
     6ba:	89 2b       	or	r24, r25
     6bc:	80 83       	st	Z, r24
          Can_config_tx();
     6be:	80 81       	ld	r24, Z
     6c0:	8f 73       	andi	r24, 0x3F	; 63
     6c2:	80 83       	st	Z, r24
     6c4:	80 81       	ld	r24, Z
     6c6:	80 64       	ori	r24, 0x40	; 64
     6c8:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     6ca:	80 e0       	ldi	r24, 0x00	; 0
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
          cmd->ctrl.rtr=1; Can_set_rtr();
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     6cc:	86 c3       	rjmp	.+1804   	; 0xdda <can_cmd+0xa86>
        //------------      
        case CMD_RX:
          u32_temp=0; Can_set_ext_msk(u32_temp);
     6ce:	19 82       	std	Y+1, r1	; 0x01
     6d0:	1a 82       	std	Y+2, r1	; 0x02
     6d2:	1b 82       	std	Y+3, r1	; 0x03
     6d4:	1c 82       	std	Y+4, r1	; 0x04
     6d6:	10 92 f7 00 	sts	0x00F7, r1
     6da:	9a 81       	ldd	r25, Y+2	; 0x02
     6dc:	92 95       	swap	r25
     6de:	96 95       	lsr	r25
     6e0:	97 70       	andi	r25, 0x07	; 7
     6e2:	8b 81       	ldd	r24, Y+3	; 0x03
     6e4:	88 0f       	add	r24, r24
     6e6:	88 0f       	add	r24, r24
     6e8:	88 0f       	add	r24, r24
     6ea:	89 0f       	add	r24, r25
     6ec:	80 93 f6 00 	sts	0x00F6, r24
     6f0:	99 81       	ldd	r25, Y+1	; 0x01
     6f2:	92 95       	swap	r25
     6f4:	96 95       	lsr	r25
     6f6:	97 70       	andi	r25, 0x07	; 7
     6f8:	8a 81       	ldd	r24, Y+2	; 0x02
     6fa:	88 0f       	add	r24, r24
     6fc:	88 0f       	add	r24, r24
     6fe:	88 0f       	add	r24, r24
     700:	89 0f       	add	r24, r25
     702:	80 93 f5 00 	sts	0x00F5, r24
     706:	89 81       	ldd	r24, Y+1	; 0x01
     708:	88 0f       	add	r24, r24
     70a:	88 0f       	add	r24, r24
     70c:	88 0f       	add	r24, r24
     70e:	24 ef       	ldi	r18, 0xF4	; 244
     710:	30 e0       	ldi	r19, 0x00	; 0
     712:	f9 01       	movw	r30, r18
     714:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     716:	ef ee       	ldi	r30, 0xEF	; 239
     718:	f0 e0       	ldi	r31, 0x00	; 0
     71a:	90 81       	ld	r25, Z
     71c:	d8 01       	movw	r26, r16
     71e:	16 96       	adiw	r26, 0x06	; 6
     720:	8c 91       	ld	r24, X
     722:	89 2b       	or	r24, r25
     724:	80 83       	st	Z, r24
          Can_clear_rtrmsk();
     726:	d9 01       	movw	r26, r18
     728:	8c 91       	ld	r24, X
     72a:	8b 7f       	andi	r24, 0xFB	; 251
     72c:	8c 93       	st	X, r24
          Can_clear_idemsk();
     72e:	8c 91       	ld	r24, X
     730:	8e 7f       	andi	r24, 0xFE	; 254
     732:	8c 93       	st	X, r24
          Can_config_rx();       
     734:	80 81       	ld	r24, Z
     736:	8f 73       	andi	r24, 0x3F	; 63
     738:	80 83       	st	Z, r24
     73a:	80 81       	ld	r24, Z
     73c:	80 68       	ori	r24, 0x80	; 128
     73e:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     740:	80 e0       	ldi	r24, 0x00	; 0
          u32_temp=0; Can_set_ext_msk(u32_temp);
          Can_set_dlc(cmd->dlc);
          Can_clear_rtrmsk();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     742:	4b c3       	rjmp	.+1686   	; 0xdda <can_cmd+0xa86>
        //------------      
        case CMD_RX_DATA:
          u32_temp=0; Can_set_ext_msk(u32_temp);
     744:	19 82       	std	Y+1, r1	; 0x01
     746:	1a 82       	std	Y+2, r1	; 0x02
     748:	1b 82       	std	Y+3, r1	; 0x03
     74a:	1c 82       	std	Y+4, r1	; 0x04
     74c:	10 92 f7 00 	sts	0x00F7, r1
     750:	9a 81       	ldd	r25, Y+2	; 0x02
     752:	92 95       	swap	r25
     754:	96 95       	lsr	r25
     756:	97 70       	andi	r25, 0x07	; 7
     758:	8b 81       	ldd	r24, Y+3	; 0x03
     75a:	88 0f       	add	r24, r24
     75c:	88 0f       	add	r24, r24
     75e:	88 0f       	add	r24, r24
     760:	89 0f       	add	r24, r25
     762:	80 93 f6 00 	sts	0x00F6, r24
     766:	99 81       	ldd	r25, Y+1	; 0x01
     768:	92 95       	swap	r25
     76a:	96 95       	lsr	r25
     76c:	97 70       	andi	r25, 0x07	; 7
     76e:	8a 81       	ldd	r24, Y+2	; 0x02
     770:	88 0f       	add	r24, r24
     772:	88 0f       	add	r24, r24
     774:	88 0f       	add	r24, r24
     776:	89 0f       	add	r24, r25
     778:	80 93 f5 00 	sts	0x00F5, r24
     77c:	89 81       	ldd	r24, Y+1	; 0x01
     77e:	88 0f       	add	r24, r24
     780:	88 0f       	add	r24, r24
     782:	88 0f       	add	r24, r24
     784:	44 ef       	ldi	r20, 0xF4	; 244
     786:	50 e0       	ldi	r21, 0x00	; 0
     788:	fa 01       	movw	r30, r20
     78a:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     78c:	ef ee       	ldi	r30, 0xEF	; 239
     78e:	f0 e0       	ldi	r31, 0x00	; 0
     790:	90 81       	ld	r25, Z
     792:	d8 01       	movw	r26, r16
     794:	16 96       	adiw	r26, 0x06	; 6
     796:	8c 91       	ld	r24, X
     798:	16 97       	sbiw	r26, 0x06	; 6
     79a:	89 2b       	or	r24, r25
     79c:	80 83       	st	Z, r24
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
     79e:	1a 96       	adiw	r26, 0x0a	; 10
     7a0:	1c 92       	st	X, r1
     7a2:	da 01       	movw	r26, r20
     7a4:	8c 91       	ld	r24, X
     7a6:	84 60       	ori	r24, 0x04	; 4
     7a8:	8c 93       	st	X, r24
     7aa:	80 ef       	ldi	r24, 0xF0	; 240
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	dc 01       	movw	r26, r24
     7b0:	2c 91       	ld	r18, X
     7b2:	2b 7f       	andi	r18, 0xFB	; 251
     7b4:	2c 93       	st	X, r18
          Can_clear_idemsk();
     7b6:	da 01       	movw	r26, r20
     7b8:	8c 91       	ld	r24, X
     7ba:	8e 7f       	andi	r24, 0xFE	; 254
     7bc:	8c 93       	st	X, r24
          Can_config_rx();       
     7be:	80 81       	ld	r24, Z
     7c0:	8f 73       	andi	r24, 0x3F	; 63
     7c2:	80 83       	st	Z, r24
     7c4:	80 81       	ld	r24, Z
     7c6:	80 68       	ori	r24, 0x80	; 128
     7c8:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     7ca:	80 e0       	ldi	r24, 0x00	; 0
          u32_temp=0; Can_set_ext_msk(u32_temp);
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     7cc:	06 c3       	rjmp	.+1548   	; 0xdda <can_cmd+0xa86>
        //------------      
        case CMD_RX_REMOTE:
          u32_temp=0; Can_set_ext_msk(u32_temp);
     7ce:	19 82       	std	Y+1, r1	; 0x01
     7d0:	1a 82       	std	Y+2, r1	; 0x02
     7d2:	1b 82       	std	Y+3, r1	; 0x03
     7d4:	1c 82       	std	Y+4, r1	; 0x04
     7d6:	10 92 f7 00 	sts	0x00F7, r1
     7da:	9a 81       	ldd	r25, Y+2	; 0x02
     7dc:	92 95       	swap	r25
     7de:	96 95       	lsr	r25
     7e0:	97 70       	andi	r25, 0x07	; 7
     7e2:	8b 81       	ldd	r24, Y+3	; 0x03
     7e4:	88 0f       	add	r24, r24
     7e6:	88 0f       	add	r24, r24
     7e8:	88 0f       	add	r24, r24
     7ea:	89 0f       	add	r24, r25
     7ec:	80 93 f6 00 	sts	0x00F6, r24
     7f0:	99 81       	ldd	r25, Y+1	; 0x01
     7f2:	92 95       	swap	r25
     7f4:	96 95       	lsr	r25
     7f6:	97 70       	andi	r25, 0x07	; 7
     7f8:	8a 81       	ldd	r24, Y+2	; 0x02
     7fa:	88 0f       	add	r24, r24
     7fc:	88 0f       	add	r24, r24
     7fe:	88 0f       	add	r24, r24
     800:	89 0f       	add	r24, r25
     802:	80 93 f5 00 	sts	0x00F5, r24
     806:	89 81       	ldd	r24, Y+1	; 0x01
     808:	88 0f       	add	r24, r24
     80a:	88 0f       	add	r24, r24
     80c:	88 0f       	add	r24, r24
     80e:	44 ef       	ldi	r20, 0xF4	; 244
     810:	50 e0       	ldi	r21, 0x00	; 0
     812:	fa 01       	movw	r30, r20
     814:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     816:	ef ee       	ldi	r30, 0xEF	; 239
     818:	f0 e0       	ldi	r31, 0x00	; 0
     81a:	90 81       	ld	r25, Z
     81c:	d8 01       	movw	r26, r16
     81e:	16 96       	adiw	r26, 0x06	; 6
     820:	8c 91       	ld	r24, X
     822:	16 97       	sbiw	r26, 0x06	; 6
     824:	89 2b       	or	r24, r25
     826:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
     828:	81 e0       	ldi	r24, 0x01	; 1
     82a:	1a 96       	adiw	r26, 0x0a	; 10
     82c:	8c 93       	st	X, r24
     82e:	da 01       	movw	r26, r20
     830:	8c 91       	ld	r24, X
     832:	84 60       	ori	r24, 0x04	; 4
     834:	8c 93       	st	X, r24
     836:	80 ef       	ldi	r24, 0xF0	; 240
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	dc 01       	movw	r26, r24
     83c:	2c 91       	ld	r18, X
     83e:	24 60       	ori	r18, 0x04	; 4
     840:	2c 93       	st	X, r18
          Can_clear_rplv();
     842:	80 81       	ld	r24, Z
     844:	8f 7d       	andi	r24, 0xDF	; 223
     846:	80 83       	st	Z, r24
          Can_clear_idemsk();
     848:	da 01       	movw	r26, r20
     84a:	8c 91       	ld	r24, X
     84c:	8e 7f       	andi	r24, 0xFE	; 254
     84e:	8c 93       	st	X, r24
          Can_config_rx();       
     850:	80 81       	ld	r24, Z
     852:	8f 73       	andi	r24, 0x3F	; 63
     854:	80 83       	st	Z, r24
     856:	80 81       	ld	r24, Z
     858:	80 68       	ori	r24, 0x80	; 128
     85a:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     85c:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_clear_rplv();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     85e:	bd c2       	rjmp	.+1402   	; 0xdda <can_cmd+0xa86>
        //------------      
        case CMD_RX_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     860:	f8 01       	movw	r30, r16
     862:	83 85       	ldd	r24, Z+11	; 0x0b
     864:	88 23       	and	r24, r24
     866:	69 f1       	breq	.+90     	; 0x8c2 <can_cmd+0x56e>
     868:	94 81       	ldd	r25, Z+4	; 0x04
     86a:	92 95       	swap	r25
     86c:	96 95       	lsr	r25
     86e:	97 70       	andi	r25, 0x07	; 7
     870:	85 81       	ldd	r24, Z+5	; 0x05
     872:	88 0f       	add	r24, r24
     874:	88 0f       	add	r24, r24
     876:	88 0f       	add	r24, r24
     878:	89 0f       	add	r24, r25
     87a:	80 93 f3 00 	sts	0x00F3, r24
     87e:	93 81       	ldd	r25, Z+3	; 0x03
     880:	92 95       	swap	r25
     882:	96 95       	lsr	r25
     884:	97 70       	andi	r25, 0x07	; 7
     886:	84 81       	ldd	r24, Z+4	; 0x04
     888:	88 0f       	add	r24, r24
     88a:	88 0f       	add	r24, r24
     88c:	88 0f       	add	r24, r24
     88e:	89 0f       	add	r24, r25
     890:	80 93 f2 00 	sts	0x00F2, r24
     894:	92 81       	ldd	r25, Z+2	; 0x02
     896:	92 95       	swap	r25
     898:	96 95       	lsr	r25
     89a:	97 70       	andi	r25, 0x07	; 7
     89c:	83 81       	ldd	r24, Z+3	; 0x03
     89e:	88 0f       	add	r24, r24
     8a0:	88 0f       	add	r24, r24
     8a2:	88 0f       	add	r24, r24
     8a4:	89 0f       	add	r24, r25
     8a6:	80 93 f1 00 	sts	0x00F1, r24
     8aa:	82 81       	ldd	r24, Z+2	; 0x02
     8ac:	88 0f       	add	r24, r24
     8ae:	88 0f       	add	r24, r24
     8b0:	88 0f       	add	r24, r24
     8b2:	80 93 f0 00 	sts	0x00F0, r24
     8b6:	ef ee       	ldi	r30, 0xEF	; 239
     8b8:	f0 e0       	ldi	r31, 0x00	; 0
     8ba:	80 81       	ld	r24, Z
     8bc:	80 61       	ori	r24, 0x10	; 16
     8be:	80 83       	st	Z, r24
     8c0:	17 c0       	rjmp	.+46     	; 0x8f0 <can_cmd+0x59c>
          else              { Can_set_std_id(cmd->id.std);}
     8c2:	82 81       	ldd	r24, Z+2	; 0x02
     8c4:	86 95       	lsr	r24
     8c6:	86 95       	lsr	r24
     8c8:	86 95       	lsr	r24
     8ca:	93 81       	ldd	r25, Z+3	; 0x03
     8cc:	b0 e2       	ldi	r27, 0x20	; 32
     8ce:	9b 9f       	mul	r25, r27
     8d0:	80 0d       	add	r24, r0
     8d2:	11 24       	eor	r1, r1
     8d4:	80 93 f3 00 	sts	0x00F3, r24
     8d8:	f8 01       	movw	r30, r16
     8da:	82 81       	ldd	r24, Z+2	; 0x02
     8dc:	82 95       	swap	r24
     8de:	88 0f       	add	r24, r24
     8e0:	80 7e       	andi	r24, 0xE0	; 224
     8e2:	80 93 f2 00 	sts	0x00F2, r24
     8e6:	ef ee       	ldi	r30, 0xEF	; 239
     8e8:	f0 e0       	ldi	r31, 0x00	; 0
     8ea:	80 81       	ld	r24, Z
     8ec:	8f 7e       	andi	r24, 0xEF	; 239
     8ee:	80 83       	st	Z, r24
          u32_temp=~0; Can_set_ext_msk(u32_temp);
     8f0:	8f ef       	ldi	r24, 0xFF	; 255
     8f2:	9f ef       	ldi	r25, 0xFF	; 255
     8f4:	dc 01       	movw	r26, r24
     8f6:	89 83       	std	Y+1, r24	; 0x01
     8f8:	9a 83       	std	Y+2, r25	; 0x02
     8fa:	ab 83       	std	Y+3, r26	; 0x03
     8fc:	bc 83       	std	Y+4, r27	; 0x04
     8fe:	8f ef       	ldi	r24, 0xFF	; 255
     900:	80 93 f7 00 	sts	0x00F7, r24
     904:	9a 81       	ldd	r25, Y+2	; 0x02
     906:	92 95       	swap	r25
     908:	96 95       	lsr	r25
     90a:	97 70       	andi	r25, 0x07	; 7
     90c:	8b 81       	ldd	r24, Y+3	; 0x03
     90e:	88 0f       	add	r24, r24
     910:	88 0f       	add	r24, r24
     912:	88 0f       	add	r24, r24
     914:	89 0f       	add	r24, r25
     916:	80 93 f6 00 	sts	0x00F6, r24
     91a:	99 81       	ldd	r25, Y+1	; 0x01
     91c:	92 95       	swap	r25
     91e:	96 95       	lsr	r25
     920:	97 70       	andi	r25, 0x07	; 7
     922:	8a 81       	ldd	r24, Y+2	; 0x02
     924:	88 0f       	add	r24, r24
     926:	88 0f       	add	r24, r24
     928:	88 0f       	add	r24, r24
     92a:	89 0f       	add	r24, r25
     92c:	80 93 f5 00 	sts	0x00F5, r24
     930:	89 81       	ldd	r24, Y+1	; 0x01
     932:	88 0f       	add	r24, r24
     934:	88 0f       	add	r24, r24
     936:	88 0f       	add	r24, r24
     938:	24 ef       	ldi	r18, 0xF4	; 244
     93a:	30 e0       	ldi	r19, 0x00	; 0
     93c:	d9 01       	movw	r26, r18
     93e:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
     940:	ef ee       	ldi	r30, 0xEF	; 239
     942:	f0 e0       	ldi	r31, 0x00	; 0
     944:	90 81       	ld	r25, Z
     946:	d8 01       	movw	r26, r16
     948:	16 96       	adiw	r26, 0x06	; 6
     94a:	8c 91       	ld	r24, X
     94c:	89 2b       	or	r24, r25
     94e:	80 83       	st	Z, r24
          Can_clear_rtrmsk();
     950:	d9 01       	movw	r26, r18
     952:	8c 91       	ld	r24, X
     954:	8b 7f       	andi	r24, 0xFB	; 251
     956:	8c 93       	st	X, r24
          Can_set_idemsk();
     958:	8c 91       	ld	r24, X
     95a:	81 60       	ori	r24, 0x01	; 1
     95c:	8c 93       	st	X, r24
          Can_config_rx();       
     95e:	80 81       	ld	r24, Z
     960:	8f 73       	andi	r24, 0x3F	; 63
     962:	80 83       	st	Z, r24
     964:	80 81       	ld	r24, Z
     966:	80 68       	ori	r24, 0x80	; 128
     968:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     96a:	80 e0       	ldi	r24, 0x00	; 0
          u32_temp=~0; Can_set_ext_msk(u32_temp);
          Can_set_dlc(cmd->dlc);
          Can_clear_rtrmsk();
          Can_set_idemsk();
          Can_config_rx();       
          break;
     96c:	36 c2       	rjmp	.+1132   	; 0xdda <can_cmd+0xa86>
        //------------      
        case CMD_RX_DATA_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     96e:	f8 01       	movw	r30, r16
     970:	83 85       	ldd	r24, Z+11	; 0x0b
     972:	88 23       	and	r24, r24
     974:	69 f1       	breq	.+90     	; 0x9d0 <can_cmd+0x67c>
     976:	94 81       	ldd	r25, Z+4	; 0x04
     978:	92 95       	swap	r25
     97a:	96 95       	lsr	r25
     97c:	97 70       	andi	r25, 0x07	; 7
     97e:	85 81       	ldd	r24, Z+5	; 0x05
     980:	88 0f       	add	r24, r24
     982:	88 0f       	add	r24, r24
     984:	88 0f       	add	r24, r24
     986:	89 0f       	add	r24, r25
     988:	80 93 f3 00 	sts	0x00F3, r24
     98c:	93 81       	ldd	r25, Z+3	; 0x03
     98e:	92 95       	swap	r25
     990:	96 95       	lsr	r25
     992:	97 70       	andi	r25, 0x07	; 7
     994:	84 81       	ldd	r24, Z+4	; 0x04
     996:	88 0f       	add	r24, r24
     998:	88 0f       	add	r24, r24
     99a:	88 0f       	add	r24, r24
     99c:	89 0f       	add	r24, r25
     99e:	80 93 f2 00 	sts	0x00F2, r24
     9a2:	92 81       	ldd	r25, Z+2	; 0x02
     9a4:	92 95       	swap	r25
     9a6:	96 95       	lsr	r25
     9a8:	97 70       	andi	r25, 0x07	; 7
     9aa:	83 81       	ldd	r24, Z+3	; 0x03
     9ac:	88 0f       	add	r24, r24
     9ae:	88 0f       	add	r24, r24
     9b0:	88 0f       	add	r24, r24
     9b2:	89 0f       	add	r24, r25
     9b4:	80 93 f1 00 	sts	0x00F1, r24
     9b8:	82 81       	ldd	r24, Z+2	; 0x02
     9ba:	88 0f       	add	r24, r24
     9bc:	88 0f       	add	r24, r24
     9be:	88 0f       	add	r24, r24
     9c0:	80 93 f0 00 	sts	0x00F0, r24
     9c4:	ef ee       	ldi	r30, 0xEF	; 239
     9c6:	f0 e0       	ldi	r31, 0x00	; 0
     9c8:	80 81       	ld	r24, Z
     9ca:	80 61       	ori	r24, 0x10	; 16
     9cc:	80 83       	st	Z, r24
     9ce:	17 c0       	rjmp	.+46     	; 0x9fe <can_cmd+0x6aa>
          else              { Can_set_std_id(cmd->id.std);}
     9d0:	82 81       	ldd	r24, Z+2	; 0x02
     9d2:	86 95       	lsr	r24
     9d4:	86 95       	lsr	r24
     9d6:	86 95       	lsr	r24
     9d8:	93 81       	ldd	r25, Z+3	; 0x03
     9da:	b0 e2       	ldi	r27, 0x20	; 32
     9dc:	9b 9f       	mul	r25, r27
     9de:	80 0d       	add	r24, r0
     9e0:	11 24       	eor	r1, r1
     9e2:	80 93 f3 00 	sts	0x00F3, r24
     9e6:	f8 01       	movw	r30, r16
     9e8:	82 81       	ldd	r24, Z+2	; 0x02
     9ea:	82 95       	swap	r24
     9ec:	88 0f       	add	r24, r24
     9ee:	80 7e       	andi	r24, 0xE0	; 224
     9f0:	80 93 f2 00 	sts	0x00F2, r24
     9f4:	ef ee       	ldi	r30, 0xEF	; 239
     9f6:	f0 e0       	ldi	r31, 0x00	; 0
     9f8:	80 81       	ld	r24, Z
     9fa:	8f 7e       	andi	r24, 0xEF	; 239
     9fc:	80 83       	st	Z, r24
          u32_temp=~0; Can_set_ext_msk(u32_temp);
     9fe:	8f ef       	ldi	r24, 0xFF	; 255
     a00:	9f ef       	ldi	r25, 0xFF	; 255
     a02:	dc 01       	movw	r26, r24
     a04:	89 83       	std	Y+1, r24	; 0x01
     a06:	9a 83       	std	Y+2, r25	; 0x02
     a08:	ab 83       	std	Y+3, r26	; 0x03
     a0a:	bc 83       	std	Y+4, r27	; 0x04
     a0c:	8f ef       	ldi	r24, 0xFF	; 255
     a0e:	80 93 f7 00 	sts	0x00F7, r24
     a12:	9a 81       	ldd	r25, Y+2	; 0x02
     a14:	92 95       	swap	r25
     a16:	96 95       	lsr	r25
     a18:	97 70       	andi	r25, 0x07	; 7
     a1a:	8b 81       	ldd	r24, Y+3	; 0x03
     a1c:	88 0f       	add	r24, r24
     a1e:	88 0f       	add	r24, r24
     a20:	88 0f       	add	r24, r24
     a22:	89 0f       	add	r24, r25
     a24:	80 93 f6 00 	sts	0x00F6, r24
     a28:	99 81       	ldd	r25, Y+1	; 0x01
     a2a:	92 95       	swap	r25
     a2c:	96 95       	lsr	r25
     a2e:	97 70       	andi	r25, 0x07	; 7
     a30:	8a 81       	ldd	r24, Y+2	; 0x02
     a32:	88 0f       	add	r24, r24
     a34:	88 0f       	add	r24, r24
     a36:	88 0f       	add	r24, r24
     a38:	89 0f       	add	r24, r25
     a3a:	80 93 f5 00 	sts	0x00F5, r24
     a3e:	89 81       	ldd	r24, Y+1	; 0x01
     a40:	88 0f       	add	r24, r24
     a42:	88 0f       	add	r24, r24
     a44:	88 0f       	add	r24, r24
     a46:	44 ef       	ldi	r20, 0xF4	; 244
     a48:	50 e0       	ldi	r21, 0x00	; 0
     a4a:	da 01       	movw	r26, r20
     a4c:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
     a4e:	ef ee       	ldi	r30, 0xEF	; 239
     a50:	f0 e0       	ldi	r31, 0x00	; 0
     a52:	90 81       	ld	r25, Z
     a54:	d8 01       	movw	r26, r16
     a56:	16 96       	adiw	r26, 0x06	; 6
     a58:	8c 91       	ld	r24, X
     a5a:	16 97       	sbiw	r26, 0x06	; 6
     a5c:	89 2b       	or	r24, r25
     a5e:	80 83       	st	Z, r24
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
     a60:	1a 96       	adiw	r26, 0x0a	; 10
     a62:	1c 92       	st	X, r1
     a64:	da 01       	movw	r26, r20
     a66:	8c 91       	ld	r24, X
     a68:	84 60       	ori	r24, 0x04	; 4
     a6a:	8c 93       	st	X, r24
     a6c:	80 ef       	ldi	r24, 0xF0	; 240
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	dc 01       	movw	r26, r24
     a72:	2c 91       	ld	r18, X
     a74:	2b 7f       	andi	r18, 0xFB	; 251
     a76:	2c 93       	st	X, r18
          Can_set_idemsk();
     a78:	da 01       	movw	r26, r20
     a7a:	8c 91       	ld	r24, X
     a7c:	81 60       	ori	r24, 0x01	; 1
     a7e:	8c 93       	st	X, r24
          Can_config_rx();       
     a80:	80 81       	ld	r24, Z
     a82:	8f 73       	andi	r24, 0x3F	; 63
     a84:	80 83       	st	Z, r24
     a86:	80 81       	ld	r24, Z
     a88:	80 68       	ori	r24, 0x80	; 128
     a8a:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     a8c:	80 e0       	ldi	r24, 0x00	; 0
          u32_temp=~0; Can_set_ext_msk(u32_temp);
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
          Can_set_idemsk();
          Can_config_rx();       
          break;
     a8e:	a5 c1       	rjmp	.+842    	; 0xdda <can_cmd+0xa86>
        //------------      
        case CMD_RX_REMOTE_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     a90:	f8 01       	movw	r30, r16
     a92:	83 85       	ldd	r24, Z+11	; 0x0b
     a94:	88 23       	and	r24, r24
     a96:	69 f1       	breq	.+90     	; 0xaf2 <can_cmd+0x79e>
     a98:	94 81       	ldd	r25, Z+4	; 0x04
     a9a:	92 95       	swap	r25
     a9c:	96 95       	lsr	r25
     a9e:	97 70       	andi	r25, 0x07	; 7
     aa0:	85 81       	ldd	r24, Z+5	; 0x05
     aa2:	88 0f       	add	r24, r24
     aa4:	88 0f       	add	r24, r24
     aa6:	88 0f       	add	r24, r24
     aa8:	89 0f       	add	r24, r25
     aaa:	80 93 f3 00 	sts	0x00F3, r24
     aae:	93 81       	ldd	r25, Z+3	; 0x03
     ab0:	92 95       	swap	r25
     ab2:	96 95       	lsr	r25
     ab4:	97 70       	andi	r25, 0x07	; 7
     ab6:	84 81       	ldd	r24, Z+4	; 0x04
     ab8:	88 0f       	add	r24, r24
     aba:	88 0f       	add	r24, r24
     abc:	88 0f       	add	r24, r24
     abe:	89 0f       	add	r24, r25
     ac0:	80 93 f2 00 	sts	0x00F2, r24
     ac4:	92 81       	ldd	r25, Z+2	; 0x02
     ac6:	92 95       	swap	r25
     ac8:	96 95       	lsr	r25
     aca:	97 70       	andi	r25, 0x07	; 7
     acc:	83 81       	ldd	r24, Z+3	; 0x03
     ace:	88 0f       	add	r24, r24
     ad0:	88 0f       	add	r24, r24
     ad2:	88 0f       	add	r24, r24
     ad4:	89 0f       	add	r24, r25
     ad6:	80 93 f1 00 	sts	0x00F1, r24
     ada:	82 81       	ldd	r24, Z+2	; 0x02
     adc:	88 0f       	add	r24, r24
     ade:	88 0f       	add	r24, r24
     ae0:	88 0f       	add	r24, r24
     ae2:	80 93 f0 00 	sts	0x00F0, r24
     ae6:	ef ee       	ldi	r30, 0xEF	; 239
     ae8:	f0 e0       	ldi	r31, 0x00	; 0
     aea:	80 81       	ld	r24, Z
     aec:	80 61       	ori	r24, 0x10	; 16
     aee:	80 83       	st	Z, r24
     af0:	17 c0       	rjmp	.+46     	; 0xb20 <can_cmd+0x7cc>
          else              { Can_set_std_id(cmd->id.std);}
     af2:	82 81       	ldd	r24, Z+2	; 0x02
     af4:	86 95       	lsr	r24
     af6:	86 95       	lsr	r24
     af8:	86 95       	lsr	r24
     afa:	93 81       	ldd	r25, Z+3	; 0x03
     afc:	b0 e2       	ldi	r27, 0x20	; 32
     afe:	9b 9f       	mul	r25, r27
     b00:	80 0d       	add	r24, r0
     b02:	11 24       	eor	r1, r1
     b04:	80 93 f3 00 	sts	0x00F3, r24
     b08:	f8 01       	movw	r30, r16
     b0a:	82 81       	ldd	r24, Z+2	; 0x02
     b0c:	82 95       	swap	r24
     b0e:	88 0f       	add	r24, r24
     b10:	80 7e       	andi	r24, 0xE0	; 224
     b12:	80 93 f2 00 	sts	0x00F2, r24
     b16:	ef ee       	ldi	r30, 0xEF	; 239
     b18:	f0 e0       	ldi	r31, 0x00	; 0
     b1a:	80 81       	ld	r24, Z
     b1c:	8f 7e       	andi	r24, 0xEF	; 239
     b1e:	80 83       	st	Z, r24
          u32_temp=~0; Can_set_ext_msk(u32_temp);
     b20:	8f ef       	ldi	r24, 0xFF	; 255
     b22:	9f ef       	ldi	r25, 0xFF	; 255
     b24:	dc 01       	movw	r26, r24
     b26:	89 83       	std	Y+1, r24	; 0x01
     b28:	9a 83       	std	Y+2, r25	; 0x02
     b2a:	ab 83       	std	Y+3, r26	; 0x03
     b2c:	bc 83       	std	Y+4, r27	; 0x04
     b2e:	8f ef       	ldi	r24, 0xFF	; 255
     b30:	80 93 f7 00 	sts	0x00F7, r24
     b34:	9a 81       	ldd	r25, Y+2	; 0x02
     b36:	92 95       	swap	r25
     b38:	96 95       	lsr	r25
     b3a:	97 70       	andi	r25, 0x07	; 7
     b3c:	8b 81       	ldd	r24, Y+3	; 0x03
     b3e:	88 0f       	add	r24, r24
     b40:	88 0f       	add	r24, r24
     b42:	88 0f       	add	r24, r24
     b44:	89 0f       	add	r24, r25
     b46:	80 93 f6 00 	sts	0x00F6, r24
     b4a:	99 81       	ldd	r25, Y+1	; 0x01
     b4c:	92 95       	swap	r25
     b4e:	96 95       	lsr	r25
     b50:	97 70       	andi	r25, 0x07	; 7
     b52:	8a 81       	ldd	r24, Y+2	; 0x02
     b54:	88 0f       	add	r24, r24
     b56:	88 0f       	add	r24, r24
     b58:	88 0f       	add	r24, r24
     b5a:	89 0f       	add	r24, r25
     b5c:	80 93 f5 00 	sts	0x00F5, r24
     b60:	89 81       	ldd	r24, Y+1	; 0x01
     b62:	88 0f       	add	r24, r24
     b64:	88 0f       	add	r24, r24
     b66:	88 0f       	add	r24, r24
     b68:	44 ef       	ldi	r20, 0xF4	; 244
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	da 01       	movw	r26, r20
     b6e:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
     b70:	ef ee       	ldi	r30, 0xEF	; 239
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	90 81       	ld	r25, Z
     b76:	d8 01       	movw	r26, r16
     b78:	16 96       	adiw	r26, 0x06	; 6
     b7a:	8c 91       	ld	r24, X
     b7c:	16 97       	sbiw	r26, 0x06	; 6
     b7e:	89 2b       	or	r24, r25
     b80:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
     b82:	81 e0       	ldi	r24, 0x01	; 1
     b84:	1a 96       	adiw	r26, 0x0a	; 10
     b86:	8c 93       	st	X, r24
     b88:	da 01       	movw	r26, r20
     b8a:	8c 91       	ld	r24, X
     b8c:	84 60       	ori	r24, 0x04	; 4
     b8e:	8c 93       	st	X, r24
     b90:	80 ef       	ldi	r24, 0xF0	; 240
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	dc 01       	movw	r26, r24
     b96:	2c 91       	ld	r18, X
     b98:	24 60       	ori	r18, 0x04	; 4
     b9a:	2c 93       	st	X, r18
          Can_clear_rplv();
     b9c:	80 81       	ld	r24, Z
     b9e:	8f 7d       	andi	r24, 0xDF	; 223
     ba0:	80 83       	st	Z, r24
          Can_set_idemsk();
     ba2:	da 01       	movw	r26, r20
     ba4:	8c 91       	ld	r24, X
     ba6:	81 60       	ori	r24, 0x01	; 1
     ba8:	8c 93       	st	X, r24
          Can_config_rx();       
     baa:	80 81       	ld	r24, Z
     bac:	8f 73       	andi	r24, 0x3F	; 63
     bae:	80 83       	st	Z, r24
     bb0:	80 81       	ld	r24, Z
     bb2:	80 68       	ori	r24, 0x80	; 128
     bb4:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     bb6:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_clear_rplv();
          Can_set_idemsk();
          Can_config_rx();       
          break;
     bb8:	10 c1       	rjmp	.+544    	; 0xdda <can_cmd+0xa86>
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	2a ef       	ldi	r18, 0xFA	; 250
     bbe:	30 e0       	ldi	r19, 0x00	; 0
     bc0:	d8 01       	movw	r26, r16
     bc2:	17 96       	adiw	r26, 0x07	; 7
     bc4:	ed 91       	ld	r30, X+
     bc6:	fc 91       	ld	r31, X
     bc8:	18 97       	sbiw	r26, 0x08	; 8
     bca:	e8 0f       	add	r30, r24
     bcc:	f1 1d       	adc	r31, r1
     bce:	90 81       	ld	r25, Z
     bd0:	f9 01       	movw	r30, r18
     bd2:	90 83       	st	Z, r25
     bd4:	8f 5f       	subi	r24, 0xFF	; 255
     bd6:	16 96       	adiw	r26, 0x06	; 6
     bd8:	9c 91       	ld	r25, X
     bda:	89 17       	cp	r24, r25
     bdc:	88 f3       	brcs	.-30     	; 0xbc0 <can_cmd+0x86c>
          u32_temp=0; Can_set_ext_msk(u32_temp);
     bde:	19 82       	std	Y+1, r1	; 0x01
     be0:	1a 82       	std	Y+2, r1	; 0x02
     be2:	1b 82       	std	Y+3, r1	; 0x03
     be4:	1c 82       	std	Y+4, r1	; 0x04
     be6:	10 92 f7 00 	sts	0x00F7, r1
     bea:	9a 81       	ldd	r25, Y+2	; 0x02
     bec:	92 95       	swap	r25
     bee:	96 95       	lsr	r25
     bf0:	97 70       	andi	r25, 0x07	; 7
     bf2:	8b 81       	ldd	r24, Y+3	; 0x03
     bf4:	88 0f       	add	r24, r24
     bf6:	88 0f       	add	r24, r24
     bf8:	88 0f       	add	r24, r24
     bfa:	89 0f       	add	r24, r25
     bfc:	80 93 f6 00 	sts	0x00F6, r24
     c00:	99 81       	ldd	r25, Y+1	; 0x01
     c02:	92 95       	swap	r25
     c04:	96 95       	lsr	r25
     c06:	97 70       	andi	r25, 0x07	; 7
     c08:	8a 81       	ldd	r24, Y+2	; 0x02
     c0a:	88 0f       	add	r24, r24
     c0c:	88 0f       	add	r24, r24
     c0e:	88 0f       	add	r24, r24
     c10:	89 0f       	add	r24, r25
     c12:	80 93 f5 00 	sts	0x00F5, r24
     c16:	89 81       	ldd	r24, Y+1	; 0x01
     c18:	88 0f       	add	r24, r24
     c1a:	88 0f       	add	r24, r24
     c1c:	88 0f       	add	r24, r24
     c1e:	44 ef       	ldi	r20, 0xF4	; 244
     c20:	50 e0       	ldi	r21, 0x00	; 0
     c22:	da 01       	movw	r26, r20
     c24:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
     c26:	ef ee       	ldi	r30, 0xEF	; 239
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	90 81       	ld	r25, Z
     c2c:	d8 01       	movw	r26, r16
     c2e:	16 96       	adiw	r26, 0x06	; 6
     c30:	8c 91       	ld	r24, X
     c32:	16 97       	sbiw	r26, 0x06	; 6
     c34:	89 2b       	or	r24, r25
     c36:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	1a 96       	adiw	r26, 0x0a	; 10
     c3c:	8c 93       	st	X, r24
     c3e:	da 01       	movw	r26, r20
     c40:	8c 91       	ld	r24, X
     c42:	84 60       	ori	r24, 0x04	; 4
     c44:	8c 93       	st	X, r24
     c46:	80 ef       	ldi	r24, 0xF0	; 240
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	dc 01       	movw	r26, r24
     c4c:	2c 91       	ld	r18, X
     c4e:	24 60       	ori	r18, 0x04	; 4
     c50:	2c 93       	st	X, r18
          Can_set_rplv();
     c52:	80 81       	ld	r24, Z
     c54:	80 62       	ori	r24, 0x20	; 32
     c56:	80 83       	st	Z, r24
          Can_clear_idemsk();
     c58:	da 01       	movw	r26, r20
     c5a:	8c 91       	ld	r24, X
     c5c:	8e 7f       	andi	r24, 0xFE	; 254
     c5e:	8c 93       	st	X, r24
          Can_config_rx();       
     c60:	80 81       	ld	r24, Z
     c62:	8f 73       	andi	r24, 0x3F	; 63
     c64:	80 83       	st	Z, r24
     c66:	80 81       	ld	r24, Z
     c68:	80 68       	ori	r24, 0x80	; 128
     c6a:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     c6c:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_set_rplv();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     c6e:	b5 c0       	rjmp	.+362    	; 0xdda <can_cmd+0xa86>
        //------------      
        case CMD_REPLY_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     c70:	f8 01       	movw	r30, r16
     c72:	83 85       	ldd	r24, Z+11	; 0x0b
     c74:	88 23       	and	r24, r24
     c76:	69 f1       	breq	.+90     	; 0xcd2 <can_cmd+0x97e>
     c78:	94 81       	ldd	r25, Z+4	; 0x04
     c7a:	92 95       	swap	r25
     c7c:	96 95       	lsr	r25
     c7e:	97 70       	andi	r25, 0x07	; 7
     c80:	85 81       	ldd	r24, Z+5	; 0x05
     c82:	88 0f       	add	r24, r24
     c84:	88 0f       	add	r24, r24
     c86:	88 0f       	add	r24, r24
     c88:	89 0f       	add	r24, r25
     c8a:	80 93 f3 00 	sts	0x00F3, r24
     c8e:	93 81       	ldd	r25, Z+3	; 0x03
     c90:	92 95       	swap	r25
     c92:	96 95       	lsr	r25
     c94:	97 70       	andi	r25, 0x07	; 7
     c96:	84 81       	ldd	r24, Z+4	; 0x04
     c98:	88 0f       	add	r24, r24
     c9a:	88 0f       	add	r24, r24
     c9c:	88 0f       	add	r24, r24
     c9e:	89 0f       	add	r24, r25
     ca0:	80 93 f2 00 	sts	0x00F2, r24
     ca4:	92 81       	ldd	r25, Z+2	; 0x02
     ca6:	92 95       	swap	r25
     ca8:	96 95       	lsr	r25
     caa:	97 70       	andi	r25, 0x07	; 7
     cac:	83 81       	ldd	r24, Z+3	; 0x03
     cae:	88 0f       	add	r24, r24
     cb0:	88 0f       	add	r24, r24
     cb2:	88 0f       	add	r24, r24
     cb4:	89 0f       	add	r24, r25
     cb6:	80 93 f1 00 	sts	0x00F1, r24
     cba:	82 81       	ldd	r24, Z+2	; 0x02
     cbc:	88 0f       	add	r24, r24
     cbe:	88 0f       	add	r24, r24
     cc0:	88 0f       	add	r24, r24
     cc2:	80 93 f0 00 	sts	0x00F0, r24
     cc6:	ef ee       	ldi	r30, 0xEF	; 239
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	80 61       	ori	r24, 0x10	; 16
     cce:	80 83       	st	Z, r24
     cd0:	17 c0       	rjmp	.+46     	; 0xd00 <can_cmd+0x9ac>
          else              { Can_set_std_id(cmd->id.std);}
     cd2:	82 81       	ldd	r24, Z+2	; 0x02
     cd4:	86 95       	lsr	r24
     cd6:	86 95       	lsr	r24
     cd8:	86 95       	lsr	r24
     cda:	93 81       	ldd	r25, Z+3	; 0x03
     cdc:	b0 e2       	ldi	r27, 0x20	; 32
     cde:	9b 9f       	mul	r25, r27
     ce0:	80 0d       	add	r24, r0
     ce2:	11 24       	eor	r1, r1
     ce4:	80 93 f3 00 	sts	0x00F3, r24
     ce8:	f8 01       	movw	r30, r16
     cea:	82 81       	ldd	r24, Z+2	; 0x02
     cec:	82 95       	swap	r24
     cee:	88 0f       	add	r24, r24
     cf0:	80 7e       	andi	r24, 0xE0	; 224
     cf2:	80 93 f2 00 	sts	0x00F2, r24
     cf6:	ef ee       	ldi	r30, 0xEF	; 239
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 81       	ld	r24, Z
     cfc:	8f 7e       	andi	r24, 0xEF	; 239
     cfe:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     d00:	d8 01       	movw	r26, r16
     d02:	16 96       	adiw	r26, 0x06	; 6
     d04:	8c 91       	ld	r24, X
     d06:	88 23       	and	r24, r24
     d08:	91 f0       	breq	.+36     	; 0xd2e <can_cmd+0x9da>
     d0a:	80 e0       	ldi	r24, 0x00	; 0
     d0c:	2a ef       	ldi	r18, 0xFA	; 250
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	d8 01       	movw	r26, r16
     d12:	17 96       	adiw	r26, 0x07	; 7
     d14:	ed 91       	ld	r30, X+
     d16:	fc 91       	ld	r31, X
     d18:	18 97       	sbiw	r26, 0x08	; 8
     d1a:	e8 0f       	add	r30, r24
     d1c:	f1 1d       	adc	r31, r1
     d1e:	90 81       	ld	r25, Z
     d20:	f9 01       	movw	r30, r18
     d22:	90 83       	st	Z, r25
     d24:	8f 5f       	subi	r24, 0xFF	; 255
     d26:	16 96       	adiw	r26, 0x06	; 6
     d28:	9c 91       	ld	r25, X
     d2a:	89 17       	cp	r24, r25
     d2c:	88 f3       	brcs	.-30     	; 0xd10 <can_cmd+0x9bc>
          u32_temp=~0; Can_set_ext_msk(u32_temp);
     d2e:	4f ef       	ldi	r20, 0xFF	; 255
     d30:	5f ef       	ldi	r21, 0xFF	; 255
     d32:	ba 01       	movw	r22, r20
     d34:	49 83       	std	Y+1, r20	; 0x01
     d36:	5a 83       	std	Y+2, r21	; 0x02
     d38:	6b 83       	std	Y+3, r22	; 0x03
     d3a:	7c 83       	std	Y+4, r23	; 0x04
     d3c:	8f ef       	ldi	r24, 0xFF	; 255
     d3e:	80 93 f7 00 	sts	0x00F7, r24
     d42:	9a 81       	ldd	r25, Y+2	; 0x02
     d44:	92 95       	swap	r25
     d46:	96 95       	lsr	r25
     d48:	97 70       	andi	r25, 0x07	; 7
     d4a:	8b 81       	ldd	r24, Y+3	; 0x03
     d4c:	88 0f       	add	r24, r24
     d4e:	88 0f       	add	r24, r24
     d50:	88 0f       	add	r24, r24
     d52:	89 0f       	add	r24, r25
     d54:	80 93 f6 00 	sts	0x00F6, r24
     d58:	99 81       	ldd	r25, Y+1	; 0x01
     d5a:	92 95       	swap	r25
     d5c:	96 95       	lsr	r25
     d5e:	97 70       	andi	r25, 0x07	; 7
     d60:	8a 81       	ldd	r24, Y+2	; 0x02
     d62:	88 0f       	add	r24, r24
     d64:	88 0f       	add	r24, r24
     d66:	88 0f       	add	r24, r24
     d68:	89 0f       	add	r24, r25
     d6a:	80 93 f5 00 	sts	0x00F5, r24
     d6e:	89 81       	ldd	r24, Y+1	; 0x01
     d70:	88 0f       	add	r24, r24
     d72:	88 0f       	add	r24, r24
     d74:	88 0f       	add	r24, r24
     d76:	44 ef       	ldi	r20, 0xF4	; 244
     d78:	50 e0       	ldi	r21, 0x00	; 0
     d7a:	da 01       	movw	r26, r20
     d7c:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
     d7e:	ef ee       	ldi	r30, 0xEF	; 239
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	90 81       	ld	r25, Z
     d84:	d8 01       	movw	r26, r16
     d86:	16 96       	adiw	r26, 0x06	; 6
     d88:	8c 91       	ld	r24, X
     d8a:	16 97       	sbiw	r26, 0x06	; 6
     d8c:	89 2b       	or	r24, r25
     d8e:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	1a 96       	adiw	r26, 0x0a	; 10
     d94:	8c 93       	st	X, r24
     d96:	da 01       	movw	r26, r20
     d98:	8c 91       	ld	r24, X
     d9a:	84 60       	ori	r24, 0x04	; 4
     d9c:	8c 93       	st	X, r24
     d9e:	80 ef       	ldi	r24, 0xF0	; 240
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	dc 01       	movw	r26, r24
     da4:	2c 91       	ld	r18, X
     da6:	24 60       	ori	r18, 0x04	; 4
     da8:	2c 93       	st	X, r18
          Can_set_rplv();
     daa:	80 81       	ld	r24, Z
     dac:	80 62       	ori	r24, 0x20	; 32
     dae:	80 83       	st	Z, r24
          Can_set_idemsk();
     db0:	da 01       	movw	r26, r20
     db2:	8c 91       	ld	r24, X
     db4:	81 60       	ori	r24, 0x01	; 1
     db6:	8c 93       	st	X, r24
          Can_config_rx();       
     db8:	80 81       	ld	r24, Z
     dba:	8f 73       	andi	r24, 0x3F	; 63
     dbc:	80 83       	st	Z, r24
     dbe:	80 81       	ld	r24, Z
     dc0:	80 68       	ori	r24, 0x80	; 128
     dc2:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     dc4:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_set_rplv();
          Can_set_idemsk();
          Can_config_rx();       
          break;
     dc6:	09 c0       	rjmp	.+18     	; 0xdda <can_cmd+0xa86>
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
     dc8:	f8 01       	movw	r30, r16
     dca:	11 86       	std	Z+9, r1	; 0x09
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     dcc:	80 e0       	ldi	r24, 0x00	; 0
          break;
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
          break;
     dce:	05 c0       	rjmp	.+10     	; 0xdda <can_cmd+0xa86>
        //------------      
      } // switch (cmd ...
    } // if (mob_handle ...
    else
    {
      cmd->status = MOB_NOT_REACHED;
     dd0:	8f e1       	ldi	r24, 0x1F	; 31
     dd2:	d8 01       	movw	r26, r16
     dd4:	19 96       	adiw	r26, 0x09	; 9
     dd6:	8c 93       	st	X, r24
      return CAN_CMD_REFUSED;
     dd8:	8f ef       	ldi	r24, 0xFF	; 255
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
}
     dda:	0f 90       	pop	r0
     ddc:	0f 90       	pop	r0
     dde:	0f 90       	pop	r0
     de0:	0f 90       	pop	r0
     de2:	df 91       	pop	r29
     de4:	cf 91       	pop	r28
     de6:	1f 91       	pop	r17
     de8:	0f 91       	pop	r16
     dea:	08 95       	ret

00000dec <can_get_status>:
//!         CAN_STATUS_ERROR         - Error in configuration or in the
//!                                    CAN communication
//!
//------------------------------------------------------------------------------
uint8_t can_get_status (st_cmd_t* cmd)
{
     dec:	ef 92       	push	r14
     dee:	ff 92       	push	r15
     df0:	1f 93       	push	r17
     df2:	cf 93       	push	r28
     df4:	df 93       	push	r29
     df6:	ec 01       	movw	r28, r24
    uint8_t a_status, rtn_val;
     
    a_status = cmd->status;
     df8:	89 85       	ldd	r24, Y+9	; 0x09
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
     dfa:	88 23       	and	r24, r24
     dfc:	09 f4       	brne	.+2      	; 0xe00 <can_get_status+0x14>
     dfe:	91 c0       	rjmp	.+290    	; 0xf22 <can_get_status+0x136>
     e00:	8f 31       	cpi	r24, 0x1F	; 31
     e02:	09 f4       	brne	.+2      	; 0xe06 <can_get_status+0x1a>
     e04:	90 c0       	rjmp	.+288    	; 0xf26 <can_get_status+0x13a>
     e06:	8f 3f       	cpi	r24, 0xFF	; 255
     e08:	09 f4       	brne	.+2      	; 0xe0c <can_get_status+0x20>
     e0a:	8f c0       	rjmp	.+286    	; 0xf2a <can_get_status+0x13e>
    {
        return CAN_STATUS_ERROR;
    }

    Can_set_mob(cmd->handle);
     e0c:	88 81       	ld	r24, Y
     e0e:	82 95       	swap	r24
     e10:	80 7f       	andi	r24, 0xF0	; 240
     e12:	80 93 ed 00 	sts	0x00ED, r24
    a_status = can_get_mob_status();
     e16:	0e 94 a7 08 	call	0x114e	; 0x114e <can_get_mob_status>
     e1a:	18 2f       	mov	r17, r24
    
    switch (a_status)
     e1c:	80 32       	cpi	r24, 0x20	; 32
     e1e:	59 f0       	breq	.+22     	; 0xe36 <can_get_status+0x4a>
     e20:	20 f4       	brcc	.+8      	; 0xe2a <can_get_status+0x3e>
     e22:	88 23       	and	r24, r24
     e24:	09 f4       	brne	.+2      	; 0xe28 <can_get_status+0x3c>
     e26:	83 c0       	rjmp	.+262    	; 0xf2e <can_get_status+0x142>
     e28:	72 c0       	rjmp	.+228    	; 0xf0e <can_get_status+0x122>
     e2a:	80 34       	cpi	r24, 0x40	; 64
     e2c:	09 f4       	brne	.+2      	; 0xe30 <can_get_status+0x44>
     e2e:	64 c0       	rjmp	.+200    	; 0xef8 <can_get_status+0x10c>
     e30:	80 3a       	cpi	r24, 0xA0	; 160
     e32:	09 f0       	breq	.+2      	; 0xe36 <can_get_status+0x4a>
     e34:	6c c0       	rjmp	.+216    	; 0xf0e <can_get_status+0x122>
            rtn_val = CAN_STATUS_NOT_COMPLETED;
            break;
        //---------------      
        case MOB_RX_COMPLETED:     
        case MOB_RX_COMPLETED_DLCW:
            cmd->dlc = Can_get_dlc();
     e36:	0f 2e       	mov	r0, r31
     e38:	ff ee       	ldi	r31, 0xEF	; 239
     e3a:	ef 2e       	mov	r14, r31
     e3c:	f1 2c       	mov	r15, r1
     e3e:	f0 2d       	mov	r31, r0
     e40:	f7 01       	movw	r30, r14
     e42:	80 81       	ld	r24, Z
     e44:	8f 70       	andi	r24, 0x0F	; 15
     e46:	8e 83       	std	Y+6, r24	; 0x06
            can_get_data(cmd->pt_data);
     e48:	8f 81       	ldd	r24, Y+7	; 0x07
     e4a:	98 85       	ldd	r25, Y+8	; 0x08
     e4c:	0e 94 ba 08 	call	0x1174	; 0x1174 <can_get_data>
            cmd->ctrl.rtr = Can_get_rtr();
     e50:	80 91 f0 00 	lds	r24, 0x00F0
     e54:	82 fb       	bst	r24, 2
     e56:	88 27       	eor	r24, r24
     e58:	80 f9       	bld	r24, 0
     e5a:	8a 87       	std	Y+10, r24	; 0x0a
            if (Can_get_ide()) // if extended frame
     e5c:	f7 01       	movw	r30, r14
     e5e:	80 81       	ld	r24, Z
     e60:	84 ff       	sbrs	r24, 4
     e62:	2d c0       	rjmp	.+90     	; 0xebe <can_get_status+0xd2>
            {
                cmd->ctrl.ide = 1; // extended frame
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	8b 87       	std	Y+11, r24	; 0x0b
                Can_get_ext_id(cmd->id.ext);
     e68:	e3 ef       	ldi	r30, 0xF3	; 243
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	86 95       	lsr	r24
     e70:	86 95       	lsr	r24
     e72:	86 95       	lsr	r24
     e74:	8d 83       	std	Y+5, r24	; 0x05
     e76:	a2 ef       	ldi	r26, 0xF2	; 242
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	8c 91       	ld	r24, X
     e7c:	90 81       	ld	r25, Z
     e7e:	86 95       	lsr	r24
     e80:	86 95       	lsr	r24
     e82:	86 95       	lsr	r24
     e84:	f0 e2       	ldi	r31, 0x20	; 32
     e86:	9f 9f       	mul	r25, r31
     e88:	80 0d       	add	r24, r0
     e8a:	11 24       	eor	r1, r1
     e8c:	8c 83       	std	Y+4, r24	; 0x04
     e8e:	e1 ef       	ldi	r30, 0xF1	; 241
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	9c 91       	ld	r25, X
     e96:	86 95       	lsr	r24
     e98:	86 95       	lsr	r24
     e9a:	86 95       	lsr	r24
     e9c:	20 e2       	ldi	r18, 0x20	; 32
     e9e:	92 9f       	mul	r25, r18
     ea0:	80 0d       	add	r24, r0
     ea2:	11 24       	eor	r1, r1
     ea4:	8b 83       	std	Y+3, r24	; 0x03
     ea6:	80 91 f0 00 	lds	r24, 0x00F0
     eaa:	90 81       	ld	r25, Z
     eac:	86 95       	lsr	r24
     eae:	86 95       	lsr	r24
     eb0:	86 95       	lsr	r24
     eb2:	e0 e2       	ldi	r30, 0x20	; 32
     eb4:	9e 9f       	mul	r25, r30
     eb6:	80 0d       	add	r24, r0
     eb8:	11 24       	eor	r1, r1
     eba:	8a 83       	std	Y+2, r24	; 0x02
     ebc:	13 c0       	rjmp	.+38     	; 0xee4 <can_get_status+0xf8>
            }
            else // else standard frame
                {
                    cmd->ctrl.ide = 0;
     ebe:	1b 86       	std	Y+11, r1	; 0x0b
                    Can_get_std_id(cmd->id.std);
     ec0:	e3 ef       	ldi	r30, 0xF3	; 243
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	82 95       	swap	r24
     ec8:	86 95       	lsr	r24
     eca:	87 70       	andi	r24, 0x07	; 7
     ecc:	8b 83       	std	Y+3, r24	; 0x03
     ece:	80 91 f2 00 	lds	r24, 0x00F2
     ed2:	90 81       	ld	r25, Z
     ed4:	99 0f       	add	r25, r25
     ed6:	99 0f       	add	r25, r25
     ed8:	99 0f       	add	r25, r25
     eda:	82 95       	swap	r24
     edc:	86 95       	lsr	r24
     ede:	87 70       	andi	r24, 0x07	; 7
     ee0:	89 0f       	add	r24, r25
     ee2:	8a 83       	std	Y+2, r24	; 0x02
                }
            // Status field of descriptor: 0x20 if Rx completed
            // Status field of descriptor: 0xA0 if Rx completed with DLCWarning    
            cmd->status = a_status;
     ee4:	19 87       	std	Y+9, r17	; 0x09
            Can_mob_abort();        // Freed the MOB
     ee6:	ef ee       	ldi	r30, 0xEF	; 239
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	8f 73       	andi	r24, 0x3F	; 63
     eee:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
     ef0:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = CAN_STATUS_COMPLETED;
     ef4:	80 e0       	ldi	r24, 0x00	; 0
            break;
     ef6:	1c c0       	rjmp	.+56     	; 0xf30 <can_get_status+0x144>
        //---------------      
        case MOB_TX_COMPLETED:     
            // Status field of descriptor: 0x40 if Tx completed
            cmd->status = a_status;
     ef8:	80 e4       	ldi	r24, 0x40	; 64
     efa:	89 87       	std	Y+9, r24	; 0x09
            Can_mob_abort();        // Freed the MOB
     efc:	ef ee       	ldi	r30, 0xEF	; 239
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	8f 73       	andi	r24, 0x3F	; 63
     f04:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
     f06:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = CAN_STATUS_COMPLETED;
     f0a:	80 e0       	ldi	r24, 0x00	; 0
            break;
     f0c:	11 c0       	rjmp	.+34     	; 0xf30 <can_get_status+0x144>
        //---------------      
        default:
            // Status field of descriptor: (bin)000b.scfa if MOb error
            cmd->status = a_status;
     f0e:	19 87       	std	Y+9, r17	; 0x09
            Can_mob_abort();        // Freed the MOB
     f10:	ef ee       	ldi	r30, 0xEF	; 239
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	8f 73       	andi	r24, 0x3F	; 63
     f18:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
     f1a:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = CAN_STATUS_ERROR;
     f1e:	82 e0       	ldi	r24, 0x02	; 2
            break;
     f20:	07 c0       	rjmp	.+14     	; 0xf30 <can_get_status+0x144>
    uint8_t a_status, rtn_val;
     
    a_status = cmd->status;
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    {
        return CAN_STATUS_ERROR;
     f22:	82 e0       	ldi	r24, 0x02	; 2
     f24:	05 c0       	rjmp	.+10     	; 0xf30 <can_get_status+0x144>
     f26:	82 e0       	ldi	r24, 0x02	; 2
     f28:	03 c0       	rjmp	.+6      	; 0xf30 <can_get_status+0x144>
     f2a:	82 e0       	ldi	r24, 0x02	; 2
     f2c:	01 c0       	rjmp	.+2      	; 0xf30 <can_get_status+0x144>
    
    switch (a_status)
    {
        case MOB_NOT_COMPLETED:
            // cmd->status not updated
            rtn_val = CAN_STATUS_NOT_COMPLETED;
     f2e:	81 e0       	ldi	r24, 0x01	; 1
            break;
             
    } // switch (a_status...
 
    return (rtn_val);
}
     f30:	df 91       	pop	r29
     f32:	cf 91       	pop	r28
     f34:	1f 91       	pop	r17
     f36:	ff 90       	pop	r15
     f38:	ef 90       	pop	r14
     f3a:	08 95       	ret

00000f3c <adc_read>:
 */
uint8_t adc_read(uint8_t ch) {
	// Set which channel to read. Leave all ADMUX bits as is except MUX4-0
	
	// Clear MUX bits
	ADMUX &= 0xE0;
     f3c:	ec e7       	ldi	r30, 0x7C	; 124
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	90 81       	ld	r25, Z
     f42:	90 7e       	andi	r25, 0xE0	; 224
     f44:	90 83       	st	Z, r25
	// Guard against invalid channel
	if(ch > 12) ch = 18; // Read ground
     f46:	8d 30       	cpi	r24, 0x0D	; 13
     f48:	08 f0       	brcs	.+2      	; 0xf4c <adc_read+0x10>
     f4a:	82 e1       	ldi	r24, 0x12	; 18
	// Set MUX to channel
	ADMUX |= ch;
     f4c:	ec e7       	ldi	r30, 0x7C	; 124
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	90 81       	ld	r25, Z
     f52:	89 2b       	or	r24, r25
     f54:	80 83       	st	Z, r24
	
	// Set ADC start conversion bit
	ADCSRA |= (1 << ADSC);
     f56:	ea e7       	ldi	r30, 0x7A	; 122
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	80 64       	ori	r24, 0x40	; 64
     f5e:	80 83       	st	Z, r24
	
	// Wait for ADCSRA bit ADSC to go low for data conversion to complete
	while(ADCSRA & (1 << ADSC));
     f60:	80 81       	ld	r24, Z
     f62:	86 fd       	sbrc	r24, 6
     f64:	fd cf       	rjmp	.-6      	; 0xf60 <adc_read+0x24>
	
	// Return read channel
	return ADCH;
     f66:	80 91 79 00 	lds	r24, 0x0079
}
     f6a:	08 95       	ret

00000f6c <config_io_pin>:
 *  port_ch: the channel to set, 0-7
 *  dir: the direction, IO_DIR_INPUT or IO_DIR_OUTPUT
 * Returns: void
 */
void config_io_pin(uint8_t port, uint8_t port_ch, uint8_t dir){
	switch(port){
     f6c:	81 30       	cpi	r24, 0x01	; 1
     f6e:	a9 f0       	breq	.+42     	; 0xf9a <config_io_pin+0x2e>
     f70:	18 f0       	brcs	.+6      	; 0xf78 <config_io_pin+0xc>
     f72:	82 30       	cpi	r24, 0x02	; 2
     f74:	99 f5       	brne	.+102    	; 0xfdc <config_io_pin+0x70>
     f76:	22 c0       	rjmp	.+68     	; 0xfbc <config_io_pin+0x50>
		case IO_PORT_B:
			//Crazy bit trickery that sets the port_ch bit of DDRB to dir
			DDRB ^= ((-dir) ^ DDRB) & (1 << port_ch);
     f78:	24 b1       	in	r18, 0x04	; 4
     f7a:	84 b1       	in	r24, 0x04	; 4
     f7c:	41 95       	neg	r20
     f7e:	48 27       	eor	r20, r24
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	fc 01       	movw	r30, r24
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <config_io_pin+0x20>
     f88:	ee 0f       	add	r30, r30
     f8a:	ff 1f       	adc	r31, r31
     f8c:	6a 95       	dec	r22
     f8e:	e2 f7       	brpl	.-8      	; 0xf88 <config_io_pin+0x1c>
     f90:	bf 01       	movw	r22, r30
     f92:	64 23       	and	r22, r20
     f94:	62 27       	eor	r22, r18
     f96:	64 b9       	out	0x04, r22	; 4
			break;
     f98:	08 95       	ret
		case IO_PORT_C:
			DDRC ^= ((-dir) ^ DDRC) & (1 << port_ch);
     f9a:	27 b1       	in	r18, 0x07	; 7
     f9c:	87 b1       	in	r24, 0x07	; 7
     f9e:	41 95       	neg	r20
     fa0:	48 27       	eor	r20, r24
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	fc 01       	movw	r30, r24
     fa8:	02 c0       	rjmp	.+4      	; 0xfae <config_io_pin+0x42>
     faa:	ee 0f       	add	r30, r30
     fac:	ff 1f       	adc	r31, r31
     fae:	6a 95       	dec	r22
     fb0:	e2 f7       	brpl	.-8      	; 0xfaa <config_io_pin+0x3e>
     fb2:	bf 01       	movw	r22, r30
     fb4:	64 23       	and	r22, r20
     fb6:	62 27       	eor	r22, r18
     fb8:	67 b9       	out	0x07, r22	; 7
			break;
     fba:	08 95       	ret
		case IO_PORT_D:
			DDRD ^= ((-dir) ^ DDRD) & (1 << port_ch);
     fbc:	2a b1       	in	r18, 0x0a	; 10
     fbe:	8a b1       	in	r24, 0x0a	; 10
     fc0:	41 95       	neg	r20
     fc2:	48 27       	eor	r20, r24
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	fc 01       	movw	r30, r24
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <config_io_pin+0x64>
     fcc:	ee 0f       	add	r30, r30
     fce:	ff 1f       	adc	r31, r31
     fd0:	6a 95       	dec	r22
     fd2:	e2 f7       	brpl	.-8      	; 0xfcc <config_io_pin+0x60>
     fd4:	bf 01       	movw	r22, r30
     fd6:	64 23       	and	r22, r20
     fd8:	62 27       	eor	r22, r18
     fda:	6a b9       	out	0x0a, r22	; 10
     fdc:	08 95       	ret

00000fde <set_io_pin>:
 *  port_ch: the channel to set, 0-7
 *  val: the value, HIGH or LOW
 * Returns: void
 */
void set_io_pin(uint8_t port, uint8_t port_ch, uint8_t val){
	switch(port){
     fde:	81 30       	cpi	r24, 0x01	; 1
     fe0:	a9 f0       	breq	.+42     	; 0x100c <set_io_pin+0x2e>
     fe2:	18 f0       	brcs	.+6      	; 0xfea <set_io_pin+0xc>
     fe4:	82 30       	cpi	r24, 0x02	; 2
     fe6:	99 f5       	brne	.+102    	; 0x104e <set_io_pin+0x70>
     fe8:	22 c0       	rjmp	.+68     	; 0x102e <set_io_pin+0x50>
		case IO_PORT_B:
			PORTB ^= ((-val) ^ PORTB) & (1 << port_ch);
     fea:	25 b1       	in	r18, 0x05	; 5
     fec:	85 b1       	in	r24, 0x05	; 5
     fee:	41 95       	neg	r20
     ff0:	48 27       	eor	r20, r24
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	fc 01       	movw	r30, r24
     ff8:	02 c0       	rjmp	.+4      	; 0xffe <set_io_pin+0x20>
     ffa:	ee 0f       	add	r30, r30
     ffc:	ff 1f       	adc	r31, r31
     ffe:	6a 95       	dec	r22
    1000:	e2 f7       	brpl	.-8      	; 0xffa <set_io_pin+0x1c>
    1002:	bf 01       	movw	r22, r30
    1004:	64 23       	and	r22, r20
    1006:	62 27       	eor	r22, r18
    1008:	65 b9       	out	0x05, r22	; 5
			break;
    100a:	08 95       	ret
		case IO_PORT_C:
			PORTC ^= ((-val) ^ PORTC) & (1 << port_ch);
    100c:	28 b1       	in	r18, 0x08	; 8
    100e:	88 b1       	in	r24, 0x08	; 8
    1010:	41 95       	neg	r20
    1012:	48 27       	eor	r20, r24
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	fc 01       	movw	r30, r24
    101a:	02 c0       	rjmp	.+4      	; 0x1020 <set_io_pin+0x42>
    101c:	ee 0f       	add	r30, r30
    101e:	ff 1f       	adc	r31, r31
    1020:	6a 95       	dec	r22
    1022:	e2 f7       	brpl	.-8      	; 0x101c <set_io_pin+0x3e>
    1024:	bf 01       	movw	r22, r30
    1026:	64 23       	and	r22, r20
    1028:	62 27       	eor	r22, r18
    102a:	68 b9       	out	0x08, r22	; 8
			break;
    102c:	08 95       	ret
		case IO_PORT_D:
			PORTD ^= ((-val) ^ PORTD) & (1 << port_ch);
    102e:	2b b1       	in	r18, 0x0b	; 11
    1030:	8b b1       	in	r24, 0x0b	; 11
    1032:	41 95       	neg	r20
    1034:	48 27       	eor	r20, r24
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	fc 01       	movw	r30, r24
    103c:	02 c0       	rjmp	.+4      	; 0x1042 <set_io_pin+0x64>
    103e:	ee 0f       	add	r30, r30
    1040:	ff 1f       	adc	r31, r31
    1042:	6a 95       	dec	r22
    1044:	e2 f7       	brpl	.-8      	; 0x103e <set_io_pin+0x60>
    1046:	bf 01       	movw	r22, r30
    1048:	64 23       	and	r22, r20
    104a:	62 27       	eor	r22, r18
    104c:	6b b9       	out	0x0b, r22	; 11
    104e:	08 95       	ret

00001050 <can_tx_sync>:
 *		buf_size, the size of the buffer
 * 
 * Returns:
 *		void	
 */
void can_tx_sync(uint16_t id, uint8_t *buffer, uint8_t buf_size) {
    1050:	cf 93       	push	r28
    1052:	df 93       	push	r29
    1054:	cd b7       	in	r28, 0x3d	; 61
    1056:	de b7       	in	r29, 0x3e	; 62
    1058:	2c 97       	sbiw	r28, 0x0c	; 12
    105a:	0f b6       	in	r0, 0x3f	; 63
    105c:	f8 94       	cli
    105e:	de bf       	out	0x3e, r29	; 62
    1060:	0f be       	out	0x3f, r0	; 63
    1062:	cd bf       	out	0x3d, r28	; 61
	// Message command object
	st_cmd_t can_msg;
	
	// Configure TX mailbox
	can_msg.pt_data = buffer;	// point message object to the data buffer
    1064:	79 87       	std	Y+9, r23	; 0x09
    1066:	68 87       	std	Y+8, r22	; 0x08
	can_msg.ctrl.ide = 0;		// CAN 2.0A
    1068:	1c 86       	std	Y+12, r1	; 0x0c
	can_msg.dlc = buf_size;		// Number of data bytes (8 max) requested from remote node
    106a:	4f 83       	std	Y+7, r20	; 0x07
	can_msg.id.std = id;		// Message ID
    106c:	9c 83       	std	Y+4, r25	; 0x04
    106e:	8b 83       	std	Y+3, r24	; 0x03
	can_msg.cmd = CMD_TX_DATA;	// Transmit data command object
    1070:	82 e0       	ldi	r24, 0x02	; 2
    1072:	8a 83       	std	Y+2, r24	; 0x02

	// Wait for MOb to configure (Must re-configure MOb for every transaction) and send request
	while(can_cmd(&can_msg) != CAN_CMD_ACCEPTED);
    1074:	ce 01       	movw	r24, r28
    1076:	01 96       	adiw	r24, 0x01	; 1
    1078:	0e 94 aa 01 	call	0x354	; 0x354 <can_cmd>
    107c:	81 11       	cpse	r24, r1
    107e:	fa cf       	rjmp	.-12     	; 0x1074 <can_tx_sync+0x24>
	// Wait for Tx to complete
	while(can_get_status(&can_msg) == CAN_STATUS_NOT_COMPLETED);
    1080:	ce 01       	movw	r24, r28
    1082:	01 96       	adiw	r24, 0x01	; 1
    1084:	0e 94 f6 06 	call	0xdec	; 0xdec <can_get_status>
    1088:	81 30       	cpi	r24, 0x01	; 1
    108a:	d1 f3       	breq	.-12     	; 0x1080 <can_tx_sync+0x30>
}
    108c:	2c 96       	adiw	r28, 0x0c	; 12
    108e:	0f b6       	in	r0, 0x3f	; 63
    1090:	f8 94       	cli
    1092:	de bf       	out	0x3e, r29	; 62
    1094:	0f be       	out	0x3f, r0	; 63
    1096:	cd bf       	out	0x3d, r28	; 61
    1098:	df 91       	pop	r29
    109a:	cf 91       	pop	r28
    109c:	08 95       	ret

0000109e <setup_can_rcv>:
 * Arguments:
 *  can_receive_msg: pointer to can cmd msg struct
 *  can_receive_buffer: pointer to buffer to receive msg_id into
 *  buffer_len: length of the buffer to receive
 */
void setup_can_rcv(st_cmd_t *can_receive_msg, uint8_t *can_receive_buffer, uint8_t buffer_len, uint16_t msg_id) {
    109e:	cf 93       	push	r28
    10a0:	df 93       	push	r29
    10a2:	ec 01       	movw	r28, r24
	// Populate message object
	can_receive_msg->pt_data = &can_receive_buffer[0];			// Point to receive buffer
    10a4:	78 87       	std	Y+8, r23	; 0x08
    10a6:	6f 83       	std	Y+7, r22	; 0x07
	can_receive_msg->ctrl.ide = 0;								// CAN 2.0A
    10a8:	1b 86       	std	Y+11, r1	; 0x0b
	can_receive_msg->dlc	= buffer_len;							// Data buffer length
    10aa:	4e 83       	std	Y+6, r20	; 0x06
	can_receive_msg->id.std = msg_id;							// Set the receive ID to be the state ID
    10ac:	3b 83       	std	Y+3, r19	; 0x03
    10ae:	2a 83       	std	Y+2, r18	; 0x02
	can_receive_msg->cmd = CMD_RX_DATA_MASKED;					// Receive data
    10b0:	88 e0       	ldi	r24, 0x08	; 8
    10b2:	89 83       	std	Y+1, r24	; 0x01
	
	/* Wait for an open mailbox and bind msg_id to the mailbox when available*/
	
	while(can_cmd(can_receive_msg) != CAN_CMD_ACCEPTED);
    10b4:	ce 01       	movw	r24, r28
    10b6:	0e 94 aa 01 	call	0x354	; 0x354 <can_cmd>
    10ba:	81 11       	cpse	r24, r1
    10bc:	fb cf       	rjmp	.-10     	; 0x10b4 <setup_can_rcv+0x16>
}
    10be:	df 91       	pop	r29
    10c0:	cf 91       	pop	r28
    10c2:	08 95       	ret

000010c4 <setup_can_send>:
 * Arguments:
 *  can_send_msg: pointer to can cmd msg struct
 *  can_send_buffer: pointer to buffer to send msg_id from
 *  buffer_len: length of the buffer to send
 */
void setup_can_send(st_cmd_t *can_send_msg, uint8_t *can_send_buffer, uint8_t buffer_len, uint16_t msg_id) {
    10c4:	cf 93       	push	r28
    10c6:	df 93       	push	r29
    10c8:	ec 01       	movw	r28, r24
	// Populate message object
	can_send_msg->pt_data = &can_send_buffer[0];				// Point to send buffer
    10ca:	78 87       	std	Y+8, r23	; 0x08
    10cc:	6f 83       	std	Y+7, r22	; 0x07
	can_send_msg->ctrl.ide = 0;									// CAN 2.0A
    10ce:	1b 86       	std	Y+11, r1	; 0x0b
	can_send_msg->dlc	= buffer_len;							// Data buffer length
    10d0:	4e 83       	std	Y+6, r20	; 0x06
	can_send_msg->id.std = msg_id;								// Set the receive ID to be the state ID
    10d2:	3b 83       	std	Y+3, r19	; 0x03
    10d4:	2a 83       	std	Y+2, r18	; 0x02
	can_send_msg->cmd = CMD_TX_DATA;							// Send data
    10d6:	82 e0       	ldi	r24, 0x02	; 2
    10d8:	89 83       	std	Y+1, r24	; 0x01
	
	/* Wait for an open mailbox and bind msg_id to the mailbox when available*/
	while(can_cmd(can_send_msg) != CAN_CMD_ACCEPTED);
    10da:	ce 01       	movw	r24, r28
    10dc:	0e 94 aa 01 	call	0x354	; 0x354 <can_cmd>
    10e0:	81 11       	cpse	r24, r1
    10e2:	fb cf       	rjmp	.-10     	; 0x10da <setup_can_send+0x16>
    10e4:	df 91       	pop	r29
    10e6:	cf 91       	pop	r28
    10e8:	08 95       	ret

000010ea <can_clear_all_mob>:
uint8_t  mob_number;
/*
    uint8_t  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    10ea:	20 e0       	ldi	r18, 0x00	; 0
    {
        CANPAGE = (mob_number << 4);    //! Page index
    10ec:	ad ee       	ldi	r26, 0xED	; 237
    10ee:	b0 e0       	ldi	r27, 0x00	; 0
        Can_clear_mob();                //! All MOb Registers=0
    10f0:	8e ee       	ldi	r24, 0xEE	; 238
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    uint8_t  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    {
        CANPAGE = (mob_number << 4);    //! Page index
    10f4:	32 2f       	mov	r19, r18
    10f6:	32 95       	swap	r19
    10f8:	30 7f       	andi	r19, 0xF0	; 240
    10fa:	3c 93       	st	X, r19
        Can_clear_mob();                //! All MOb Registers=0
    10fc:	fc 01       	movw	r30, r24
    10fe:	11 92       	st	Z+, r1
    1100:	e8 3f       	cpi	r30, 0xF8	; 248
    1102:	f1 05       	cpc	r31, r1
    1104:	e1 f7       	brne	.-8      	; 0x10fe <can_clear_all_mob+0x14>
uint8_t  mob_number;
/*
    uint8_t  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    1106:	2f 5f       	subi	r18, 0xFF	; 255
    1108:	26 30       	cpi	r18, 0x06	; 6
    110a:	a1 f7       	brne	.-24     	; 0x10f4 <can_clear_all_mob+0xa>
        {
            CANMSG = 0;                 //! MOb data FIFO
        }
*/
    }
}
    110c:	08 95       	ret

0000110e <can_get_mob_free>:
//------------------------------------------------------------------------------
uint8_t can_get_mob_free(void)
{
    uint8_t mob_number, page_saved;

    page_saved = CANPAGE;
    110e:	ed ee       	ldi	r30, 0xED	; 237
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	20 81       	ld	r18, Z
    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    {
        Can_set_mob(mob_number);
    1114:	10 82       	st	Z, r1
        if ((CANCDMOB & 0xC0) == 0x00) //! Disable configuration
    1116:	80 91 ef 00 	lds	r24, 0x00EF
    111a:	80 7c       	andi	r24, 0xC0	; 192
    111c:	69 f0       	breq	.+26     	; 0x1138 <can_get_mob_free+0x2a>
uint8_t can_get_mob_free(void)
{
    uint8_t mob_number, page_saved;

    page_saved = CANPAGE;
    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    111e:	81 e0       	ldi	r24, 0x01	; 1
    {
        Can_set_mob(mob_number);
    1120:	ad ee       	ldi	r26, 0xED	; 237
    1122:	b0 e0       	ldi	r27, 0x00	; 0
        if ((CANCDMOB & 0xC0) == 0x00) //! Disable configuration
    1124:	ef ee       	ldi	r30, 0xEF	; 239
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    uint8_t mob_number, page_saved;

    page_saved = CANPAGE;
    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    {
        Can_set_mob(mob_number);
    1128:	98 2f       	mov	r25, r24
    112a:	92 95       	swap	r25
    112c:	90 7f       	andi	r25, 0xF0	; 240
    112e:	9c 93       	st	X, r25
        if ((CANCDMOB & 0xC0) == 0x00) //! Disable configuration
    1130:	90 81       	ld	r25, Z
    1132:	90 7c       	andi	r25, 0xC0	; 192
    1134:	29 f4       	brne	.+10     	; 0x1140 <can_get_mob_free+0x32>
    1136:	01 c0       	rjmp	.+2      	; 0x113a <can_get_mob_free+0x2c>
uint8_t can_get_mob_free(void)
{
    uint8_t mob_number, page_saved;

    page_saved = CANPAGE;
    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    1138:	80 e0       	ldi	r24, 0x00	; 0
    {
        Can_set_mob(mob_number);
        if ((CANCDMOB & 0xC0) == 0x00) //! Disable configuration
        {
            CANPAGE = page_saved;
    113a:	20 93 ed 00 	sts	0x00ED, r18
            return (mob_number);
    113e:	08 95       	ret
uint8_t can_get_mob_free(void)
{
    uint8_t mob_number, page_saved;

    page_saved = CANPAGE;
    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    1140:	8f 5f       	subi	r24, 0xFF	; 255
    1142:	86 30       	cpi	r24, 0x06	; 6
    1144:	89 f7       	brne	.-30     	; 0x1128 <can_get_mob_free+0x1a>
        {
            CANPAGE = page_saved;
            return (mob_number);
        }
    }
    CANPAGE = page_saved;
    1146:	20 93 ed 00 	sts	0x00ED, r18
    return (NO_MOB);
    114a:	8f ef       	ldi	r24, 0xFF	; 255
}
    114c:	08 95       	ret

0000114e <can_get_mob_status>:
uint8_t can_get_mob_status(void)
{
    uint8_t mob_status, canstmob_copy;

    // Test if MOb ENABLE or DISABLE
    if ((CANCDMOB & 0xC0) == 0x00) {return(MOB_DISABLE);}
    114e:	80 91 ef 00 	lds	r24, 0x00EF
    1152:	80 7c       	andi	r24, 0xC0	; 192
    1154:	69 f0       	breq	.+26     	; 0x1170 <can_get_mob_status+0x22>

    canstmob_copy = CANSTMOB; // Copy for test integrity
    1156:	90 91 ee 00 	lds	r25, 0x00EE

    // If MOb is ENABLE, test if MOb is COMPLETED
    // - MOb Status = 0x20 then MOB_RX_COMPLETED
    // - MOb Status = 0x40 then MOB_TX_COMPLETED
    // - MOb Status = 0xA0 then MOB_RX_COMPLETED_DLCW
    mob_status = canstmob_copy & ((1<<DLCW)|(1<<TXOK)|(1<<RXOK));
    115a:	89 2f       	mov	r24, r25
    115c:	80 7e       	andi	r24, 0xE0	; 224
    if ( (mob_status==MOB_RX_COMPLETED) ||   \
    115e:	80 32       	cpi	r24, 0x20	; 32
    1160:	41 f0       	breq	.+16     	; 0x1172 <can_get_mob_status+0x24>
    1162:	80 34       	cpi	r24, 0x40	; 64
    1164:	31 f0       	breq	.+12     	; 0x1172 <can_get_mob_status+0x24>
         (mob_status==MOB_TX_COMPLETED) ||   \
    1166:	80 3a       	cpi	r24, 0xA0	; 160
    1168:	21 f0       	breq	.+8      	; 0x1172 <can_get_mob_status+0x24>
    // - MOb Status bit_0 = MOB_ACK_ERROR
    // - MOb Status bit_1 = MOB_FORM_ERROR
    // - MOb Status bit_2 = MOB_CRC_ERROR
    // - MOb Status bit_3 = MOB_STUFF_ERROR
    // - MOb Status bit_4 = MOB_BIT_ERROR
    mob_status = canstmob_copy & ERR_MOB_MSK;
    116a:	89 2f       	mov	r24, r25
    116c:	8f 71       	andi	r24, 0x1F	; 31
    116e:	08 95       	ret
uint8_t can_get_mob_status(void)
{
    uint8_t mob_status, canstmob_copy;

    // Test if MOb ENABLE or DISABLE
    if ((CANCDMOB & 0xC0) == 0x00) {return(MOB_DISABLE);}
    1170:	8f ef       	ldi	r24, 0xFF	; 255
    mob_status = canstmob_copy & ERR_MOB_MSK;
    if (mob_status != 0) { return(mob_status); }

    // If CANSTMOB = 0 then MOB_NOT_COMPLETED
    return(MOB_NOT_COMPLETED);
}
    1172:	08 95       	ret

00001174 <can_get_data>:
//! @param CAN message data address.
//!
//! @return none.
//------------------------------------------------------------------------------
void can_get_data(uint8_t* p_can_message_data)
{
    1174:	cf 93       	push	r28
    1176:	df 93       	push	r29
    uint8_t data_index;

    for (data_index = 0; data_index < (Can_get_dlc()); data_index++)
    1178:	20 91 ef 00 	lds	r18, 0x00EF
    117c:	2f 70       	andi	r18, 0x0F	; 15
    117e:	99 f0       	breq	.+38     	; 0x11a6 <can_get_data+0x32>
    1180:	60 e0       	ldi	r22, 0x00	; 0
    {
        *(p_can_message_data + data_index) = CANMSG;
    1182:	ca ef       	ldi	r28, 0xFA	; 250
    1184:	d0 e0       	ldi	r29, 0x00	; 0
//------------------------------------------------------------------------------
void can_get_data(uint8_t* p_can_message_data)
{
    uint8_t data_index;

    for (data_index = 0; data_index < (Can_get_dlc()); data_index++)
    1186:	af ee       	ldi	r26, 0xEF	; 239
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    {
        *(p_can_message_data + data_index) = CANMSG;
    118a:	28 81       	ld	r18, Y
    118c:	fc 01       	movw	r30, r24
    118e:	e6 0f       	add	r30, r22
    1190:	f1 1d       	adc	r31, r1
    1192:	20 83       	st	Z, r18
//------------------------------------------------------------------------------
void can_get_data(uint8_t* p_can_message_data)
{
    uint8_t data_index;

    for (data_index = 0; data_index < (Can_get_dlc()); data_index++)
    1194:	6f 5f       	subi	r22, 0xFF	; 255
    1196:	2c 91       	ld	r18, X
    1198:	46 2f       	mov	r20, r22
    119a:	50 e0       	ldi	r21, 0x00	; 0
    119c:	2f 70       	andi	r18, 0x0F	; 15
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	42 17       	cp	r20, r18
    11a2:	53 07       	cpc	r21, r19
    11a4:	94 f3       	brlt	.-28     	; 0x118a <can_get_data+0x16>
    {
        *(p_can_message_data + data_index) = CANMSG;
    }
}
    11a6:	df 91       	pop	r29
    11a8:	cf 91       	pop	r28
    11aa:	08 95       	ret

000011ac <can_fixed_baudrate>:
//! @return Baudrate Status
//!         fixed = 1: baudrate performed
//------------------------------------------------------------------------------
uint8_t can_fixed_baudrate(uint8_t mode)
{
    Can_reset();
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	80 93 d8 00 	sts	0x00D8, r24
    Can_conf_bt();
    11b2:	86 e0       	ldi	r24, 0x06	; 6
    11b4:	80 93 e2 00 	sts	0x00E2, r24
    11b8:	84 e0       	ldi	r24, 0x04	; 4
    11ba:	80 93 e3 00 	sts	0x00E3, r24
    11be:	83 e1       	ldi	r24, 0x13	; 19
    11c0:	80 93 e4 00 	sts	0x00E4, r24
    return 1;
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	08 95       	ret

000011c8 <__udivmodhi4>:
    11c8:	aa 1b       	sub	r26, r26
    11ca:	bb 1b       	sub	r27, r27
    11cc:	51 e1       	ldi	r21, 0x11	; 17
    11ce:	07 c0       	rjmp	.+14     	; 0x11de <__udivmodhi4_ep>

000011d0 <__udivmodhi4_loop>:
    11d0:	aa 1f       	adc	r26, r26
    11d2:	bb 1f       	adc	r27, r27
    11d4:	a6 17       	cp	r26, r22
    11d6:	b7 07       	cpc	r27, r23
    11d8:	10 f0       	brcs	.+4      	; 0x11de <__udivmodhi4_ep>
    11da:	a6 1b       	sub	r26, r22
    11dc:	b7 0b       	sbc	r27, r23

000011de <__udivmodhi4_ep>:
    11de:	88 1f       	adc	r24, r24
    11e0:	99 1f       	adc	r25, r25
    11e2:	5a 95       	dec	r21
    11e4:	a9 f7       	brne	.-22     	; 0x11d0 <__udivmodhi4_loop>
    11e6:	80 95       	com	r24
    11e8:	90 95       	com	r25
    11ea:	bc 01       	movw	r22, r24
    11ec:	cd 01       	movw	r24, r26
    11ee:	08 95       	ret

000011f0 <_exit>:
    11f0:	f8 94       	cli

000011f2 <__stop_program>:
    11f2:	ff cf       	rjmp	.-2      	; 0x11f2 <__stop_program>
