
Rear Sensor Node.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000012ba  0000134e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008c  00800100  00800100  0000134e  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00001350  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00001a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00001ab3  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000188  00000000  00000000  00001ae2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001a4c  00000000  00000000  00001c6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000948  00000000  00000000  000036b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000c86  00000000  00000000  00003ffe  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000003f4  00000000  00000000  00004c84  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000070a  00000000  00000000  00005078  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000013a9  00000000  00000000  00005782  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000128  00000000  00000000  00006b2b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
       8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
       c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      30:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__vector_12>
      34:	0c 94 43 01 	jmp	0x286	; 0x286 <__vector_13>
      38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d0 e1       	ldi	r29, 0x10	; 16
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
      88:	21 e0       	ldi	r18, 0x01	; 1
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
      90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
      92:	ac 38       	cpi	r26, 0x8C	; 140
      94:	b2 07       	cpc	r27, r18
      96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
      98:	0e 94 fd 01 	call	0x3fa	; 0x3fa <main>
      9c:	0c 94 5b 09 	jmp	0x12b6	; 0x12b6 <_exit>

000000a0 <__bad_interrupt>:
      a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <init_fan>:
	 *		
	 *	Clear OC0A on compare match, set OC0A at TOP
	 *		COM0A1, COM0A0 = 1, 0(default) set to FAST PWM Mode
		
	*/
	TCCR0A |= (1<<WGM01)|(1<<WGM00)|(1<<COM0A1);
      a4:	84 b5       	in	r24, 0x24	; 36
      a6:	83 68       	ori	r24, 0x83	; 131
      a8:	84 bd       	out	0x24, r24	; 36
	 *	WGM02 = 0 (default)
		Clock Select, clkI/O/1 (from prescaler)
			CS02:0 = 0,0,1
	*/
	
	TCCR0B |= (1 << CS00);
      aa:	85 b5       	in	r24, 0x25	; 37
      ac:	81 60       	ori	r24, 0x01	; 1
      ae:	85 bd       	out	0x25, r24	; 37
      b0:	08 95       	ret

000000b2 <set_fan_speed>:
	
}
void set_fan_speed(uint8_t duty_cycle){
	OCR0A = duty_cycle; 
      b2:	87 bd       	out	0x27, r24	; 39
      b4:	08 95       	ret

000000b6 <update_cooling>:
}

void update_cooling(uint8_t new_cooling_state, uint8_t fan_speed){
      b6:	cf 93       	push	r28
      b8:	c8 2f       	mov	r28, r24
      ba:	86 2f       	mov	r24, r22
	set_fan_speed(fan_speed); 
      bc:	0e 94 59 00 	call	0xb2	; 0xb2 <set_fan_speed>
	//Switch depending on whether the cooling system is to be updated to enabled or disabled
	switch(new_cooling_state){
      c0:	c1 30       	cpi	r28, 0x01	; 1
      c2:	09 f0       	breq	.+2      	; 0xc6 <update_cooling+0x10>
      c4:	45 c0       	rjmp	.+138    	; 0x150 <update_cooling+0x9a>
		
		case COOLING_ENABLE:
		
			//Cooling system is already on
			if (cooling_state == COOLING_ENABLE){
      c6:	80 91 02 01 	lds	r24, 0x0102
      ca:	81 30       	cpi	r24, 0x01	; 1
      cc:	81 f4       	brne	.+32     	; 0xee <update_cooling+0x38>
				//Ensure fan and pumps are still on (redundant)
				//Enable fan
				set_io_pin(FAN_ENABLE_PORT, FAN_ENABLE_PIN, HIGH);
      ce:	41 e0       	ldi	r20, 0x01	; 1
      d0:	61 e0       	ldi	r22, 0x01	; 1
      d2:	82 e0       	ldi	r24, 0x02	; 2
      d4:	0e 94 66 08 	call	0x10cc	; 0x10cc <set_io_pin>
				//Set fan speed
				
				//Turn on pumps
				set_io_pin(PUMP_L_CTRL_PORT, PUMP_L_CTRL_PIN, HIGH);
      d8:	41 e0       	ldi	r20, 0x01	; 1
      da:	63 e0       	ldi	r22, 0x03	; 3
      dc:	80 e0       	ldi	r24, 0x00	; 0
      de:	0e 94 66 08 	call	0x10cc	; 0x10cc <set_io_pin>
				set_io_pin(PUMP_R_CTRL_PORT, PUMP_R_CTRL_PIN, HIGH);
      e2:	41 e0       	ldi	r20, 0x01	; 1
      e4:	64 e0       	ldi	r22, 0x04	; 4
      e6:	80 e0       	ldi	r24, 0x00	; 0
      e8:	0e 94 66 08 	call	0x10cc	; 0x10cc <set_io_pin>
      ec:	46 c0       	rjmp	.+140    	; 0x17a <update_cooling+0xc4>
			
			//Cooling system is currently off, set delay to turn on. 
			else{
				//Initialize the counter if this is the first loop 
				// for the delay
				if (cooling_delay_flag == 0){
      ee:	80 91 01 01 	lds	r24, 0x0101
      f2:	81 11       	cpse	r24, r1
      f4:	06 c0       	rjmp	.+12     	; 0x102 <update_cooling+0x4c>
					cooling_delay_flag = 1;
      f6:	81 e0       	ldi	r24, 0x01	; 1
      f8:	80 93 01 01 	sts	0x0101, r24
					cooling_delay_cnt = 0;
      fc:	10 92 00 01 	sts	0x0100, r1
     100:	12 c0       	rjmp	.+36     	; 0x126 <update_cooling+0x70>
				}
				//Turn Left pump on if delay is met
				if(cooling_delay_cnt > PUMP_L_CNT) 
     102:	80 91 00 01 	lds	r24, 0x0100
     106:	88 23       	and	r24, r24
     108:	71 f0       	breq	.+28     	; 0x126 <update_cooling+0x70>
					set_io_pin(PUMP_L_CTRL_PORT, PUMP_L_CTRL_PIN, HIGH);
     10a:	41 e0       	ldi	r20, 0x01	; 1
     10c:	63 e0       	ldi	r22, 0x03	; 3
     10e:	80 e0       	ldi	r24, 0x00	; 0
     110:	0e 94 66 08 	call	0x10cc	; 0x10cc <set_io_pin>
				//Turn Right pump on if delay is met
				if(cooling_delay_cnt > PUMP_R_CNT) 
     114:	80 91 00 01 	lds	r24, 0x0100
     118:	83 33       	cpi	r24, 0x33	; 51
     11a:	28 f0       	brcs	.+10     	; 0x126 <update_cooling+0x70>
					set_io_pin(PUMP_R_CTRL_PORT, PUMP_R_CTRL_PIN, HIGH);
     11c:	41 e0       	ldi	r20, 0x01	; 1
     11e:	64 e0       	ldi	r22, 0x04	; 4
     120:	80 e0       	ldi	r24, 0x00	; 0
     122:	0e 94 66 08 	call	0x10cc	; 0x10cc <set_io_pin>
				//Turn Fan on and end delayed turn on
				if(cooling_delay_cnt > FAN_CNT){
     126:	80 91 00 01 	lds	r24, 0x0100
     12a:	85 36       	cpi	r24, 0x65	; 101
     12c:	68 f0       	brcs	.+26     	; 0x148 <update_cooling+0x92>
					//Turn fan on
					//set_fan_speed(50) 15e_todo set fan speed
					set_io_pin(FAN_ENABLE_PORT, FAN_ENABLE_PIN, HIGH);
     12e:	41 e0       	ldi	r20, 0x01	; 1
     130:	61 e0       	ldi	r22, 0x01	; 1
     132:	82 e0       	ldi	r24, 0x02	; 2
     134:	0e 94 66 08 	call	0x10cc	; 0x10cc <set_io_pin>
					//Reset delay counter and flag
					cooling_delay_flag = 0;
     138:	10 92 01 01 	sts	0x0101, r1
					cooling_delay_cnt = 0;
     13c:	10 92 00 01 	sts	0x0100, r1
					cooling_state = COOLING_ENABLE;
     140:	81 e0       	ldi	r24, 0x01	; 1
     142:	80 93 02 01 	sts	0x0102, r24
     146:	19 c0       	rjmp	.+50     	; 0x17a <update_cooling+0xc4>
				}
				//Delayed cooling is not done, so increment count
				else{
					//Increment delay counter
					cooling_delay_cnt++;
     148:	8f 5f       	subi	r24, 0xFF	; 255
     14a:	80 93 00 01 	sts	0x0100, r24
     14e:	15 c0       	rjmp	.+42     	; 0x17a <update_cooling+0xc4>
		case COOLING_DISABLE:
			//Fall into default case, all off
			
		default:
			//Reset cooling state variables
			cooling_delay_flag = 0;
     150:	10 92 01 01 	sts	0x0101, r1
			cooling_delay_cnt = 0;
     154:	10 92 00 01 	sts	0x0100, r1
			cooling_state = COOLING_DISABLE;
     158:	10 92 02 01 	sts	0x0102, r1
			
			//Turn fan off
			set_io_pin(FAN_ENABLE_PORT, FAN_ENABLE_PIN, LOW);
     15c:	40 e0       	ldi	r20, 0x00	; 0
     15e:	61 e0       	ldi	r22, 0x01	; 1
     160:	82 e0       	ldi	r24, 0x02	; 2
     162:	0e 94 66 08 	call	0x10cc	; 0x10cc <set_io_pin>
			
			//Turn pumps off
			set_io_pin(PUMP_L_CTRL_PORT, PUMP_L_CTRL_PIN, LOW);
     166:	40 e0       	ldi	r20, 0x00	; 0
     168:	63 e0       	ldi	r22, 0x03	; 3
     16a:	80 e0       	ldi	r24, 0x00	; 0
     16c:	0e 94 66 08 	call	0x10cc	; 0x10cc <set_io_pin>
			set_io_pin(PUMP_R_CTRL_PORT, PUMP_R_CTRL_PIN, LOW);
     170:	40 e0       	ldi	r20, 0x00	; 0
     172:	64 e0       	ldi	r22, 0x04	; 4
     174:	80 e0       	ldi	r24, 0x00	; 0
     176:	0e 94 66 08 	call	0x10cc	; 0x10cc <set_io_pin>
			break;
			
	}
     17a:	cf 91       	pop	r28
     17c:	08 95       	ret

0000017e <init_interrupts>:
 * Arguments: void
 * Returns: void
 */
void init_interrupts(void) {
	
	set_io_pin(MCU_STATUS_PORT, MCU_STATUS_PIN, HIGH);
     17e:	41 e0       	ldi	r20, 0x01	; 1
     180:	60 e0       	ldi	r22, 0x00	; 0
     182:	81 e0       	ldi	r24, 0x01	; 1
     184:	0e 94 66 08 	call	0x10cc	; 0x10cc <set_io_pin>
	
	//Enable output compare A interrupt for Timer 1 (enables interrupt)
	TIMSK1 |= _BV(OCIE1A);
     188:	ef e6       	ldi	r30, 0x6F	; 111
     18a:	f0 e0       	ldi	r31, 0x00	; 0
     18c:	80 81       	ld	r24, Z
     18e:	82 60       	ori	r24, 0x02	; 2
     190:	80 83       	st	Z, r24
	
	// Set timer1_clk prescaler to clk/256 = 62.5kHz with 16MHz system clock
	TCCR1A = _BV(WGM12);
     192:	a0 e8       	ldi	r26, 0x80	; 128
     194:	b0 e0       	ldi	r27, 0x00	; 0
     196:	88 e0       	ldi	r24, 0x08	; 8
     198:	8c 93       	st	X, r24
	TCCR1B = _BV(CS12) | _BV(CS11);
     19a:	e1 e8       	ldi	r30, 0x81	; 129
     19c:	f0 e0       	ldi	r31, 0x00	; 0
     19e:	86 e0       	ldi	r24, 0x06	; 6
     1a0:	80 83       	st	Z, r24
	
	// Reset timer 1
	TCNT1 = 0;
     1a2:	10 92 85 00 	sts	0x0085, r1
     1a6:	10 92 84 00 	sts	0x0084, r1

	// Set timer1_clk prescaler to clk/256 = 62.5kHz with 16MHz system clock
	TCCR1A = 0;
     1aa:	1c 92       	st	X, r1
	TCCR1B &= (1 << CS12) | (0 << CS11) | (0 << CS10); 
     1ac:	80 81       	ld	r24, Z
     1ae:	84 70       	andi	r24, 0x04	; 4
     1b0:	80 83       	st	Z, r24
	
	/*Set output compare register 1A to 0x271=625
		This sets the timer to count to 625, making a
		100Hz interrupt
	*/
	OCR1A = 0x0271;
     1b2:	81 e7       	ldi	r24, 0x71	; 113
     1b4:	92 e0       	ldi	r25, 0x02	; 2
     1b6:	90 93 89 00 	sts	0x0089, r25
     1ba:	80 93 88 00 	sts	0x0088, r24
	
	// Clear interrupts
	TIFR1 = (1 << OCF1A) || (1 << OCF1B);
     1be:	81 e0       	ldi	r24, 0x01	; 1
     1c0:	86 bb       	out	0x16, r24	; 22

	// enable interrupts
	sei();
     1c2:	78 94       	sei
	
	set_io_pin(MCU_STATUS_PORT, MCU_STATUS_PIN, LOW);
     1c4:	40 e0       	ldi	r20, 0x00	; 0
     1c6:	60 e0       	ldi	r22, 0x00	; 0
     1c8:	0e 94 66 08 	call	0x10cc	; 0x10cc <set_io_pin>
     1cc:	08 95       	ret

000001ce <init_io>:
 * Arguments: void
 * Returns: void
 */
void init_io(void) {
	//Configure pin for MCU Status LED
	config_io_pin(MCU_STATUS_PORT, MCU_STATUS_PIN, IO_DIR_OUTPUT);
     1ce:	41 e0       	ldi	r20, 0x01	; 1
     1d0:	60 e0       	ldi	r22, 0x00	; 0
     1d2:	81 e0       	ldi	r24, 0x01	; 1
     1d4:	0e 94 2d 08 	call	0x105a	; 0x105a <config_io_pin>
	
	/*Configure pins for cooling system */
	//Fan
	//Configure FAN PWM
	init_fan();
     1d8:	0e 94 52 00 	call	0xa4	; 0xa4 <init_fan>
	set_fan_speed(FAN_OFF);
     1dc:	80 e0       	ldi	r24, 0x00	; 0
     1de:	0e 94 59 00 	call	0xb2	; 0xb2 <set_fan_speed>
	//Configure (enable) PWM pin
	config_io_pin(FAN_PWM_PORT, FAN_PWM_PIN, IO_DIR_OUTPUT);
     1e2:	41 e0       	ldi	r20, 0x01	; 1
     1e4:	63 e0       	ldi	r22, 0x03	; 3
     1e6:	82 e0       	ldi	r24, 0x02	; 2
     1e8:	0e 94 2d 08 	call	0x105a	; 0x105a <config_io_pin>
	
	//Fan Output Enable
	config_io_pin(FAN_ENABLE_PORT, FAN_ENABLE_PIN, IO_DIR_OUTPUT);
     1ec:	41 e0       	ldi	r20, 0x01	; 1
     1ee:	61 e0       	ldi	r22, 0x01	; 1
     1f0:	82 e0       	ldi	r24, 0x02	; 2
     1f2:	0e 94 2d 08 	call	0x105a	; 0x105a <config_io_pin>

	//Left Coolant Pump
	config_io_pin(PUMP_L_CTRL_PORT, PUMP_L_CTRL_PIN, IO_DIR_OUTPUT);
     1f6:	41 e0       	ldi	r20, 0x01	; 1
     1f8:	63 e0       	ldi	r22, 0x03	; 3
     1fa:	80 e0       	ldi	r24, 0x00	; 0
     1fc:	0e 94 2d 08 	call	0x105a	; 0x105a <config_io_pin>
	
	//Right Coolant Pump
	config_io_pin(PUMP_R_CTRL_PORT, PUMP_R_CTRL_PIN, IO_DIR_OUTPUT);
     200:	41 e0       	ldi	r20, 0x01	; 1
     202:	64 e0       	ldi	r22, 0x04	; 4
     204:	80 e0       	ldi	r24, 0x00	; 0
     206:	0e 94 2d 08 	call	0x105a	; 0x105a <config_io_pin>
     20a:	08 95       	ret

0000020c <init_adc>:
 * Arguments: void
 * Returns: void
 */
void init_adc(void){

	ADCSRA |= (1 << ADPS2) | (0 << ADPS1) | (0 << ADPS0); // Set ADC prescaler to 16 - 1MHz sample rate @ 16MHz
     20c:	ea e7       	ldi	r30, 0x7A	; 122
     20e:	f0 e0       	ldi	r31, 0x00	; 0
     210:	80 81       	ld	r24, Z
     212:	84 60       	ori	r24, 0x04	; 4
     214:	80 83       	st	Z, r24

	ADMUX  |= (1 << ADLAR); // Left adjust ADC result to allow easy 8 bit reading
     216:	ac e7       	ldi	r26, 0x7C	; 124
     218:	b0 e0       	ldi	r27, 0x00	; 0
     21a:	8c 91       	ld	r24, X
     21c:	80 62       	ori	r24, 0x20	; 32
     21e:	8c 93       	st	X, r24
	ADCSRB |= (1 << ADHSM);	// Set ADC high speed mode
     220:	ab e7       	ldi	r26, 0x7B	; 123
     222:	b0 e0       	ldi	r27, 0x00	; 0
     224:	8c 91       	ld	r24, X
     226:	80 68       	ori	r24, 0x80	; 128
     228:	8c 93       	st	X, r24

	// No MUX values needed to be changed for initialization
	
	ADCSRB |= (1 << AREFEN); // Set ADC reference to AREF (AREFEN = 1, ISRCEN = 0, REFS1 = 0, REFS0 = 0)
     22a:	8c 91       	ld	r24, X
     22c:	80 62       	ori	r24, 0x20	; 32
     22e:	8c 93       	st	X, r24
	
	ADCSRA |= (1 << ADEN);  // Enable ADC
     230:	80 81       	ld	r24, Z
     232:	80 68       	ori	r24, 0x80	; 128
     234:	80 83       	st	Z, r24
	
	// Enable timer 1 output compare B interrupt to sample ADCs
	// 62.5KHz timer clock * 2.5ms compare time = 156 = 0x9C
	OCR1B = 0x009C;
     236:	8c e9       	ldi	r24, 0x9C	; 156
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	90 93 8b 00 	sts	0x008B, r25
     23e:	80 93 8a 00 	sts	0x008A, r24
	// Enable output compare B interrupt
	TIMSK1 |= _BV(OCIE1B);
     242:	ef e6       	ldi	r30, 0x6F	; 111
     244:	f0 e0       	ldi	r31, 0x00	; 0
     246:	80 81       	ld	r24, Z
     248:	84 60       	ori	r24, 0x04	; 4
     24a:	80 83       	st	Z, r24
     24c:	08 95       	ret

0000024e <init_can_mailboxes>:
 *
 */

void init_can_mailboxes(void) {
	// Initialize heartbeat send mailbox for RSN
	setup_can_send(&heartbeat_cmd_st, ((uint8_t *)(&can_send_buffer)), sizeof(struct rsn_heartbeat_st), RSN_HEARTBEAT_ID);
     24e:	22 e0       	ldi	r18, 0x02	; 2
     250:	32 e0       	ldi	r19, 0x02	; 2
     252:	41 e0       	ldi	r20, 0x01	; 1
     254:	64 e0       	ldi	r22, 0x04	; 4
     256:	71 e0       	ldi	r23, 0x01	; 1
     258:	84 e3       	ldi	r24, 0x34	; 52
     25a:	91 e0       	ldi	r25, 0x01	; 1
     25c:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <setup_can_send>
	
	/* Initialize receive mailboxes    */
	//Receive main heartbeat for state transitions
	setup_can_rcv(&rcv_cmd_st[0], ((uint8_t *)(&can_rcv_buffer[0])), sizeof(struct main_heartbeat_st), MAIN_HEARTBEAT_ID); 
     260:	20 e0       	ldi	r18, 0x00	; 0
     262:	32 e0       	ldi	r19, 0x02	; 2
     264:	41 e0       	ldi	r20, 0x01	; 1
     266:	6c e0       	ldi	r22, 0x0C	; 12
     268:	71 e0       	ldi	r23, 0x01	; 1
     26a:	81 e4       	ldi	r24, 0x41	; 65
     26c:	91 e0       	ldi	r25, 0x01	; 1
     26e:	0e 94 c6 08 	call	0x118c	; 0x118c <setup_can_rcv>
	//Receive fsn heartbeat for pressure data, to actuate brake light
	setup_can_rcv(&rcv_cmd_st[1], ((uint8_t *)(&can_rcv_buffer[1])), sizeof(struct fsn_heartbeat_st), FSN_HEARTBEAT_ID);
     272:	21 e0       	ldi	r18, 0x01	; 1
     274:	32 e0       	ldi	r19, 0x02	; 2
     276:	44 e0       	ldi	r20, 0x04	; 4
     278:	64 e1       	ldi	r22, 0x14	; 20
     27a:	71 e0       	ldi	r23, 0x01	; 1
     27c:	8d e4       	ldi	r24, 0x4D	; 77
     27e:	91 e0       	ldi	r25, 0x01	; 1
     280:	0e 94 c6 08 	call	0x118c	; 0x118c <setup_can_rcv>
     284:	08 95       	ret

00000286 <__vector_13>:



// ADC and SPI sampling interrupt handler, fires at 2ms, 12ms, 22ms, etc
// Use this interrupt for anything you need to do before the main interrupt, i.e. sample things
ISR(TIMER1_COMPB_vect) {
     286:	1f 92       	push	r1
     288:	0f 92       	push	r0
     28a:	0f b6       	in	r0, 0x3f	; 63
     28c:	0f 92       	push	r0
     28e:	11 24       	eor	r1, r1
     290:	1f 93       	push	r17
     292:	2f 93       	push	r18
     294:	3f 93       	push	r19
     296:	4f 93       	push	r20
     298:	5f 93       	push	r21
     29a:	6f 93       	push	r22
     29c:	7f 93       	push	r23
     29e:	8f 93       	push	r24
     2a0:	9f 93       	push	r25
     2a2:	af 93       	push	r26
     2a4:	bf 93       	push	r27
     2a6:	cf 93       	push	r28
     2a8:	df 93       	push	r29
     2aa:	ef 93       	push	r30
     2ac:	ff 93       	push	r31
     2ae:	ce e7       	ldi	r28, 0x7E	; 126
     2b0:	d1 e0       	ldi	r29, 0x01	; 1
     2b2:	12 e0       	ldi	r17, 0x02	; 2
	// Grounded low-voltage on
	// 15e_todo: Fill in code for GLV on here
			
	// Sample all ADC channels, 2 through 5
	for(ch = 2; ch < 6; ch++) {
		adc_values[ch-2] = adc_read(ch);
     2b4:	81 2f       	mov	r24, r17
     2b6:	0e 94 15 08 	call	0x102a	; 0x102a <adc_read>
     2ba:	89 93       	st	Y+, r24
     2bc:	1f 5f       	subi	r17, 0xFF	; 255
	int ch = 2;
	// Grounded low-voltage on
	// 15e_todo: Fill in code for GLV on here
			
	// Sample all ADC channels, 2 through 5
	for(ch = 2; ch < 6; ch++) {
     2be:	16 30       	cpi	r17, 0x06	; 6
     2c0:	c9 f7       	brne	.-14     	; 0x2b4 <__vector_13+0x2e>
		adc_values[ch-2] = adc_read(ch);
	}
		
}
     2c2:	ff 91       	pop	r31
     2c4:	ef 91       	pop	r30
     2c6:	df 91       	pop	r29
     2c8:	cf 91       	pop	r28
     2ca:	bf 91       	pop	r27
     2cc:	af 91       	pop	r26
     2ce:	9f 91       	pop	r25
     2d0:	8f 91       	pop	r24
     2d2:	7f 91       	pop	r23
     2d4:	6f 91       	pop	r22
     2d6:	5f 91       	pop	r21
     2d8:	4f 91       	pop	r20
     2da:	3f 91       	pop	r19
     2dc:	2f 91       	pop	r18
     2de:	1f 91       	pop	r17
     2e0:	0f 90       	pop	r0
     2e2:	0f be       	out	0x3f, r0	; 63
     2e4:	0f 90       	pop	r0
     2e6:	1f 90       	pop	r1
     2e8:	18 95       	reti

000002ea <__vector_12>:



// Main 100Hz interrupt handler, fires at 10ms, 20ms, 30ms, etc
// Use this interrupt for any main things you need to do at 100Hz
ISR(TIMER1_COMPA_vect) {
     2ea:	1f 92       	push	r1
     2ec:	0f 92       	push	r0
     2ee:	0f b6       	in	r0, 0x3f	; 63
     2f0:	0f 92       	push	r0
     2f2:	11 24       	eor	r1, r1
     2f4:	2f 93       	push	r18
     2f6:	3f 93       	push	r19
     2f8:	4f 93       	push	r20
     2fa:	5f 93       	push	r21
     2fc:	6f 93       	push	r22
     2fe:	7f 93       	push	r23
     300:	8f 93       	push	r24
     302:	9f 93       	push	r25
     304:	af 93       	push	r26
     306:	bf 93       	push	r27
     308:	ef 93       	push	r30
     30a:	ff 93       	push	r31
	// Function Variables
	
	// Reset the watchdog timer
	wdt_reset();
     30c:	a8 95       	wdr
	
	// Reset counter for main interrupt
	// DO NOT REMOVE THIS LINE
	TCNT1 = 0x0000;
     30e:	10 92 85 00 	sts	0x0085, r1
     312:	10 92 84 00 	sts	0x0084, r1
	
	// Turn on MCU status pin, brightness indicates utilization level (PWM)
	// 15e_todo_done: comment this out if you don't have an MCU status LED
	set_io_pin(MCU_STATUS_PORT, MCU_STATUS_PIN, HIGH);
     316:	41 e0       	ldi	r20, 0x01	; 1
     318:	60 e0       	ldi	r22, 0x00	; 0
     31a:	81 e0       	ldi	r24, 0x01	; 1
     31c:	0e 94 66 08 	call	0x10cc	; 0x10cc <set_io_pin>
// 	can_send_buffer[0] = adc_values[SLINEAR_R_CH-2];
// 	can_tx_sync(SLINEAR_R_CH_ID, can_send_buffer, 1);

	
	// Switch on the current state
	switch(state) {
     320:	80 91 03 01 	lds	r24, 0x0103
     324:	81 30       	cpi	r24, 0x01	; 1
     326:	59 f0       	breq	.+22     	; 0x33e <__vector_12+0x54>
     328:	28 f0       	brcs	.+10     	; 0x334 <__vector_12+0x4a>
     32a:	82 30       	cpi	r24, 0x02	; 2
     32c:	69 f0       	breq	.+26     	; 0x348 <__vector_12+0x5e>
     32e:	83 30       	cpi	r24, 0x03	; 3
     330:	a1 f4       	brne	.+40     	; 0x35a <__vector_12+0x70>
     332:	0f c0       	rjmp	.+30     	; 0x352 <__vector_12+0x68>
		//fan_speed = get_smart_fan_speed(); 15e_todo update fan speed here for non-barebones build
		case GLV_ON:
			// Grounded low-voltage on
			// 15e_todo: Fill in code for GLV on here
			update_cooling(COOLING_DISABLE, GLV_ON_FAN_SPEED);
     334:	60 e0       	ldi	r22, 0x00	; 0
     336:	80 e0       	ldi	r24, 0x00	; 0
     338:	0e 94 5b 00 	call	0xb6	; 0xb6 <update_cooling>
			break;
     33c:	0e c0       	rjmp	.+28     	; 0x35a <__vector_12+0x70>
			
		case HV_EN:
			// High-voltage enable
			// 15e_todo: Fill in code for HV_EN here
			update_cooling(COOLING_ENABLE,HV_EN_FAN_SPEED);
     33e:	6f e7       	ldi	r22, 0x7F	; 127
     340:	81 e0       	ldi	r24, 0x01	; 1
     342:	0e 94 5b 00 	call	0xb6	; 0xb6 <update_cooling>
			break;
     346:	09 c0       	rjmp	.+18     	; 0x35a <__vector_12+0x70>
			
		case RTD:
			// Ready to drive
			// 15e_todo: Fill in code for RTD here
			update_cooling(COOLING_ENABLE,RTD_FAN_SPEED);
     348:	6f ef       	ldi	r22, 0xFF	; 255
     34a:	81 e0       	ldi	r24, 0x01	; 1
     34c:	0e 94 5b 00 	call	0xb6	; 0xb6 <update_cooling>
			break;
     350:	04 c0       	rjmp	.+8      	; 0x35a <__vector_12+0x70>
			
		case ERROR:
			// Error state
			// 15e_todo: Fill in code for ERROR here
			update_cooling(COOLING_DISABLE,ERROR_FAN_SPEED);
     352:	60 e0       	ldi	r22, 0x00	; 0
     354:	80 e0       	ldi	r24, 0x00	; 0
     356:	0e 94 5b 00 	call	0xb6	; 0xb6 <update_cooling>
	
		
	/* Check mailboxes for Main Board Heartbeat message
	 *	and transition states if necessary
	 */
	if(can_get_status(&rcv_cmd_st[0]) != CAN_STATUS_NOT_COMPLETED) {
     35a:	81 e4       	ldi	r24, 0x41	; 65
     35c:	91 e0       	ldi	r25, 0x01	; 1
     35e:	0e 94 6d 07 	call	0xeda	; 0xeda <can_get_status>
     362:	81 30       	cpi	r24, 0x01	; 1
     364:	51 f0       	breq	.+20     	; 0x37a <__vector_12+0x90>
		// There is, update the state
		state = ((struct main_heartbeat_st *)(&can_rcv_buffer[0]))->state;
     366:	80 91 0c 01 	lds	r24, 0x010C
     36a:	80 93 03 01 	sts	0x0103, r24
		/* Setup mailbox to receive Main board state again
		 *		Necessary since the mailbox is cleared after a message is received
		 */
		while(can_cmd(&rcv_cmd_st[0]) != CAN_CMD_ACCEPTED);
     36e:	81 e4       	ldi	r24, 0x41	; 65
     370:	91 e0       	ldi	r25, 0x01	; 1
     372:	0e 94 21 02 	call	0x442	; 0x442 <can_cmd>
     376:	81 11       	cpse	r24, r1
     378:	fa cf       	rjmp	.-12     	; 0x36e <__vector_12+0x84>
	}
	
	/* Check mailboxes for FSN Board Heartbeat message
	 *	and update brake light status
	 */
	if(can_get_status(&rcv_cmd_st[1]) != CAN_STATUS_NOT_COMPLETED) {
     37a:	8d e4       	ldi	r24, 0x4D	; 77
     37c:	91 e0       	ldi	r25, 0x01	; 1
     37e:	0e 94 6d 07 	call	0xeda	; 0xeda <can_get_status>
     382:	81 30       	cpi	r24, 0x01	; 1
     384:	51 f0       	breq	.+20     	; 0x39a <__vector_12+0xb0>
		// There is, update the state
		brake_pressure_val = ((struct fsn_heartbeat_st *)(&can_rcv_buffer[1]))->bps;
     386:	80 91 16 01 	lds	r24, 0x0116
     38a:	80 93 7d 01 	sts	0x017D, r24
		/* Setup mailbox to receive Main board state again
		 *		Necessary since the mailbox is cleared after a message is received
		 */
		while(can_cmd(&rcv_cmd_st[1]) != CAN_CMD_ACCEPTED);
     38e:	8d e4       	ldi	r24, 0x4D	; 77
     390:	91 e0       	ldi	r25, 0x01	; 1
     392:	0e 94 21 02 	call	0x442	; 0x442 <can_cmd>
     396:	81 11       	cpse	r24, r1
     398:	fa cf       	rjmp	.-12     	; 0x38e <__vector_12+0xa4>
	
	
	// Transmit heartbeat
	// Fill in heartbeat data, current state
	// Pack RSN heartbeat struct
	rsn_heartbeat.state = state;
     39a:	80 91 03 01 	lds	r24, 0x0103
     39e:	80 93 40 01 	sts	0x0140, r24
	
	// Transmit over CAN
	can_tx_sync(RSN_HEARTBEAT_ID, (uint8_t *)(&rsn_heartbeat), sizeof(rsn_heartbeat));
     3a2:	41 e0       	ldi	r20, 0x01	; 1
     3a4:	60 e4       	ldi	r22, 0x40	; 64
     3a6:	71 e0       	ldi	r23, 0x01	; 1
     3a8:	82 e0       	ldi	r24, 0x02	; 2
     3aa:	92 e0       	ldi	r25, 0x02	; 2
     3ac:	0e 94 9f 08 	call	0x113e	; 0x113e <can_tx_sync>
	
	// Turn off MCU Status LED
	// Turn off MCU Status LED
	// 15e_todo_done: comment this out if you don't have an MCU status LED
	set_io_pin(MCU_STATUS_PORT, MCU_STATUS_PIN, LOW);
     3b0:	40 e0       	ldi	r20, 0x00	; 0
     3b2:	60 e0       	ldi	r22, 0x00	; 0
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	0e 94 66 08 	call	0x10cc	; 0x10cc <set_io_pin>
	
	//Turn brake light on or off
	if (brake_pressure_val > BRAKE_THRESH){
     3ba:	80 91 7d 01 	lds	r24, 0x017D
     3be:	85 31       	cpi	r24, 0x15	; 21
     3c0:	30 f0       	brcs	.+12     	; 0x3ce <__vector_12+0xe4>
		set_io_pin(BRAKE_CTRL_PORT, BRAKE_CTRL_PIN, HIGH);
     3c2:	41 e0       	ldi	r20, 0x01	; 1
     3c4:	60 e0       	ldi	r22, 0x00	; 0
     3c6:	82 e0       	ldi	r24, 0x02	; 2
     3c8:	0e 94 66 08 	call	0x10cc	; 0x10cc <set_io_pin>
     3cc:	05 c0       	rjmp	.+10     	; 0x3d8 <__vector_12+0xee>
	}
	else {
		set_io_pin(BRAKE_CTRL_PORT, BRAKE_CTRL_PIN, LOW);
     3ce:	40 e0       	ldi	r20, 0x00	; 0
     3d0:	60 e0       	ldi	r22, 0x00	; 0
     3d2:	82 e0       	ldi	r24, 0x02	; 2
     3d4:	0e 94 66 08 	call	0x10cc	; 0x10cc <set_io_pin>
	}
	

}
     3d8:	ff 91       	pop	r31
     3da:	ef 91       	pop	r30
     3dc:	bf 91       	pop	r27
     3de:	af 91       	pop	r26
     3e0:	9f 91       	pop	r25
     3e2:	8f 91       	pop	r24
     3e4:	7f 91       	pop	r23
     3e6:	6f 91       	pop	r22
     3e8:	5f 91       	pop	r21
     3ea:	4f 91       	pop	r20
     3ec:	3f 91       	pop	r19
     3ee:	2f 91       	pop	r18
     3f0:	0f 90       	pop	r0
     3f2:	0f be       	out	0x3f, r0	; 63
     3f4:	0f 90       	pop	r0
     3f6:	1f 90       	pop	r1
     3f8:	18 95       	reti

000003fa <main>:
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	80 e8       	ldi	r24, 0x80	; 128
     3fe:	0f b6       	in	r0, 0x3f	; 63
     400:	f8 94       	cli
     402:	80 93 61 00 	sts	0x0061, r24
     406:	90 93 61 00 	sts	0x0061, r25
     40a:	0f be       	out	0x3f, r0	; 63
{
	// Set the clock prescaler to be 1 (full clock rate)
	clock_prescale_set(clock_div_1);
	
	// Initialize all board I/O, including cooling control
	init_io();
     40c:	0e 94 e7 00 	call	0x1ce	; 0x1ce <init_io>
	
	// Initialize CAN, fixed baudrate defined in config.h (passing 0 does autobaud)
	can_init(1);	// Fixed baud rate
     410:	81 e0       	ldi	r24, 0x01	; 1
     412:	0e 94 12 02 	call	0x424	; 0x424 <can_init>
	
	// Initialize CAN mailboxes 
	init_can_mailboxes();
     416:	0e 94 27 01 	call	0x24e	; 0x24e <init_can_mailboxes>
	
	// Initialize ADC and 100Hz ADC sampling interrupt.
	// 15e_todo_done: Comment this out if you do not use ADC. This should be called before init_interrupts
	// if you use ADC
	init_adc();
     41a:	0e 94 06 01 	call	0x20c	; 0x20c <init_adc>
	
	// Initialize main timer output compare interrupt (100Hz) and enable interrupts
	init_interrupts();
     41e:	0e 94 bf 00 	call	0x17e	; 0x17e <init_interrupts>
     422:	ff cf       	rjmp	.-2      	; 0x422 <main+0x28>

00000424 <can_init>:
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
     424:	0e 94 4d 09 	call	0x129a	; 0x129a <can_fixed_baudrate>
     428:	88 23       	and	r24, r24
     42a:	49 f0       	breq	.+18     	; 0x43e <can_init+0x1a>
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
     42c:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <can_clear_all_mob>
    Can_enable();                               // c.f. macro in "can_drv.h" 
     430:	e8 ed       	ldi	r30, 0xD8	; 216
     432:	f0 e0       	ldi	r31, 0x00	; 0
     434:	80 81       	ld	r24, Z
     436:	82 60       	ori	r24, 0x02	; 2
     438:	80 83       	st	Z, r24
    return (1);
     43a:	81 e0       	ldi	r24, 0x01	; 1
     43c:	08 95       	ret
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
     43e:	80 e0       	ldi	r24, 0x00	; 0
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
    Can_enable();                               // c.f. macro in "can_drv.h" 
    return (1);
}
     440:	08 95       	ret

00000442 <can_cmd>:
//! @return CAN_CMD_ACCEPTED - command is accepted
//!         CAN_CMD_REFUSED  - command is refused
//!
//------------------------------------------------------------------------------
uint8_t can_cmd(st_cmd_t* cmd)
{
     442:	0f 93       	push	r16
     444:	1f 93       	push	r17
     446:	cf 93       	push	r28
     448:	df 93       	push	r29
     44a:	00 d0       	rcall	.+0      	; 0x44c <can_cmd+0xa>
     44c:	00 d0       	rcall	.+0      	; 0x44e <can_cmd+0xc>
     44e:	cd b7       	in	r28, 0x3d	; 61
     450:	de b7       	in	r29, 0x3e	; 62
     452:	8c 01       	movw	r16, r24
  uint8_t mob_handle, cpt;
  uint32_t u32_temp;
  
  if (cmd->cmd == CMD_ABORT)
     454:	dc 01       	movw	r26, r24
     456:	11 96       	adiw	r26, 0x01	; 1
     458:	8c 91       	ld	r24, X
     45a:	11 97       	sbiw	r26, 0x01	; 1
     45c:	8c 30       	cpi	r24, 0x0C	; 12
     45e:	b1 f4       	brne	.+44     	; 0x48c <can_cmd+0x4a>
  {
    if (cmd->status == MOB_PENDING)
     460:	19 96       	adiw	r26, 0x09	; 9
     462:	8c 91       	ld	r24, X
     464:	19 97       	sbiw	r26, 0x09	; 9
     466:	80 36       	cpi	r24, 0x60	; 96
     468:	69 f4       	brne	.+26     	; 0x484 <can_cmd+0x42>
    {
      // Rx or Tx not yet performed
      Can_set_mob(cmd->handle);
     46a:	8c 91       	ld	r24, X
     46c:	82 95       	swap	r24
     46e:	80 7f       	andi	r24, 0xF0	; 240
     470:	80 93 ed 00 	sts	0x00ED, r24
      Can_mob_abort();
     474:	ef ee       	ldi	r30, 0xEF	; 239
     476:	f0 e0       	ldi	r31, 0x00	; 0
     478:	80 81       	ld	r24, Z
     47a:	8f 73       	andi	r24, 0x3F	; 63
     47c:	80 83       	st	Z, r24
      Can_clear_status_mob();       // To be sure !
     47e:	10 92 ee 00 	sts	0x00EE, r1
      cmd->handle = 0;
     482:	1c 92       	st	X, r1
    }
    cmd->status = STATUS_CLEARED; 
     484:	f8 01       	movw	r30, r16
     486:	11 86       	std	Z+9, r1	; 0x09
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     488:	80 e0       	ldi	r24, 0x00	; 0
     48a:	1e c5       	rjmp	.+2620   	; 0xec8 <can_cmd+0xa86>
    }
    cmd->status = STATUS_CLEARED; 
  }
  else
  {
    mob_handle = can_get_mob_free();
     48c:	0e 94 fe 08 	call	0x11fc	; 0x11fc <can_get_mob_free>
    if (mob_handle!= NO_MOB)
     490:	8f 3f       	cpi	r24, 0xFF	; 255
     492:	09 f4       	brne	.+2      	; 0x496 <can_cmd+0x54>
     494:	14 c5       	rjmp	.+2600   	; 0xebe <can_cmd+0xa7c>
    {
      cmd->status = MOB_PENDING; 
     496:	90 e6       	ldi	r25, 0x60	; 96
     498:	d8 01       	movw	r26, r16
     49a:	19 96       	adiw	r26, 0x09	; 9
     49c:	9c 93       	st	X, r25
     49e:	19 97       	sbiw	r26, 0x09	; 9
      cmd->handle = mob_handle;
     4a0:	8c 93       	st	X, r24
      Can_set_mob(mob_handle);
     4a2:	82 95       	swap	r24
     4a4:	80 7f       	andi	r24, 0xF0	; 240
     4a6:	80 93 ed 00 	sts	0x00ED, r24
      Can_clear_mob();
     4aa:	ee ee       	ldi	r30, 0xEE	; 238
     4ac:	f0 e0       	ldi	r31, 0x00	; 0
     4ae:	11 92       	st	Z+, r1
     4b0:	e8 3f       	cpi	r30, 0xF8	; 248
     4b2:	f1 05       	cpc	r31, r1
     4b4:	e1 f7       	brne	.-8      	; 0x4ae <can_cmd+0x6c>
          
      switch (cmd->cmd)
     4b6:	f8 01       	movw	r30, r16
     4b8:	81 81       	ldd	r24, Z+1	; 0x01
     4ba:	86 30       	cpi	r24, 0x06	; 6
     4bc:	09 f4       	brne	.+2      	; 0x4c0 <can_cmd+0x7e>
     4be:	fe c1       	rjmp	.+1020   	; 0x8bc <can_cmd+0x47a>
     4c0:	88 f4       	brcc	.+34     	; 0x4e4 <can_cmd+0xa2>
     4c2:	83 30       	cpi	r24, 0x03	; 3
     4c4:	09 f4       	brne	.+2      	; 0x4c8 <can_cmd+0x86>
     4c6:	19 c1       	rjmp	.+562    	; 0x6fa <can_cmd+0x2b8>
     4c8:	30 f4       	brcc	.+12     	; 0x4d6 <can_cmd+0x94>
     4ca:	81 30       	cpi	r24, 0x01	; 1
     4cc:	01 f1       	breq	.+64     	; 0x50e <can_cmd+0xcc>
     4ce:	82 30       	cpi	r24, 0x02	; 2
     4d0:	09 f0       	breq	.+2      	; 0x4d4 <can_cmd+0x92>
     4d2:	f1 c4       	rjmp	.+2530   	; 0xeb6 <can_cmd+0xa74>
     4d4:	9b c0       	rjmp	.+310    	; 0x60c <can_cmd+0x1ca>
     4d6:	84 30       	cpi	r24, 0x04	; 4
     4d8:	09 f4       	brne	.+2      	; 0x4dc <can_cmd+0x9a>
     4da:	70 c1       	rjmp	.+736    	; 0x7bc <can_cmd+0x37a>
     4dc:	85 30       	cpi	r24, 0x05	; 5
     4de:	09 f0       	breq	.+2      	; 0x4e2 <can_cmd+0xa0>
     4e0:	ea c4       	rjmp	.+2516   	; 0xeb6 <can_cmd+0xa74>
     4e2:	a7 c1       	rjmp	.+846    	; 0x832 <can_cmd+0x3f0>
     4e4:	89 30       	cpi	r24, 0x09	; 9
     4e6:	09 f4       	brne	.+2      	; 0x4ea <can_cmd+0xa8>
     4e8:	4a c3       	rjmp	.+1684   	; 0xb7e <can_cmd+0x73c>
     4ea:	38 f4       	brcc	.+14     	; 0x4fa <can_cmd+0xb8>
     4ec:	87 30       	cpi	r24, 0x07	; 7
     4ee:	09 f4       	brne	.+2      	; 0x4f2 <can_cmd+0xb0>
     4f0:	2e c2       	rjmp	.+1116   	; 0x94e <can_cmd+0x50c>
     4f2:	88 30       	cpi	r24, 0x08	; 8
     4f4:	09 f0       	breq	.+2      	; 0x4f8 <can_cmd+0xb6>
     4f6:	df c4       	rjmp	.+2494   	; 0xeb6 <can_cmd+0xa74>
     4f8:	b1 c2       	rjmp	.+1378   	; 0xa5c <can_cmd+0x61a>
     4fa:	8a 30       	cpi	r24, 0x0A	; 10
     4fc:	21 f0       	breq	.+8      	; 0x506 <can_cmd+0xc4>
     4fe:	8b 30       	cpi	r24, 0x0B	; 11
     500:	09 f0       	breq	.+2      	; 0x504 <can_cmd+0xc2>
     502:	d9 c4       	rjmp	.+2482   	; 0xeb6 <can_cmd+0xa74>
     504:	2c c4       	rjmp	.+2136   	; 0xd5e <can_cmd+0x91c>
          Can_set_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     506:	86 81       	ldd	r24, Z+6	; 0x06
     508:	81 11       	cpse	r24, r1
     50a:	ce c3       	rjmp	.+1948   	; 0xca8 <can_cmd+0x866>
     50c:	df c3       	rjmp	.+1982   	; 0xccc <can_cmd+0x88a>
          
      switch (cmd->cmd)
      {
        //------------      
        case CMD_TX:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     50e:	f8 01       	movw	r30, r16
     510:	83 85       	ldd	r24, Z+11	; 0x0b
     512:	88 23       	and	r24, r24
     514:	69 f1       	breq	.+90     	; 0x570 <can_cmd+0x12e>
     516:	94 81       	ldd	r25, Z+4	; 0x04
     518:	92 95       	swap	r25
     51a:	96 95       	lsr	r25
     51c:	97 70       	andi	r25, 0x07	; 7
     51e:	85 81       	ldd	r24, Z+5	; 0x05
     520:	88 0f       	add	r24, r24
     522:	88 0f       	add	r24, r24
     524:	88 0f       	add	r24, r24
     526:	89 0f       	add	r24, r25
     528:	80 93 f3 00 	sts	0x00F3, r24
     52c:	93 81       	ldd	r25, Z+3	; 0x03
     52e:	92 95       	swap	r25
     530:	96 95       	lsr	r25
     532:	97 70       	andi	r25, 0x07	; 7
     534:	84 81       	ldd	r24, Z+4	; 0x04
     536:	88 0f       	add	r24, r24
     538:	88 0f       	add	r24, r24
     53a:	88 0f       	add	r24, r24
     53c:	89 0f       	add	r24, r25
     53e:	80 93 f2 00 	sts	0x00F2, r24
     542:	92 81       	ldd	r25, Z+2	; 0x02
     544:	92 95       	swap	r25
     546:	96 95       	lsr	r25
     548:	97 70       	andi	r25, 0x07	; 7
     54a:	83 81       	ldd	r24, Z+3	; 0x03
     54c:	88 0f       	add	r24, r24
     54e:	88 0f       	add	r24, r24
     550:	88 0f       	add	r24, r24
     552:	89 0f       	add	r24, r25
     554:	80 93 f1 00 	sts	0x00F1, r24
     558:	82 81       	ldd	r24, Z+2	; 0x02
     55a:	88 0f       	add	r24, r24
     55c:	88 0f       	add	r24, r24
     55e:	88 0f       	add	r24, r24
     560:	80 93 f0 00 	sts	0x00F0, r24
     564:	ef ee       	ldi	r30, 0xEF	; 239
     566:	f0 e0       	ldi	r31, 0x00	; 0
     568:	80 81       	ld	r24, Z
     56a:	80 61       	ori	r24, 0x10	; 16
     56c:	80 83       	st	Z, r24
     56e:	17 c0       	rjmp	.+46     	; 0x59e <can_cmd+0x15c>
          else              { Can_set_std_id(cmd->id.std);}
     570:	82 81       	ldd	r24, Z+2	; 0x02
     572:	86 95       	lsr	r24
     574:	86 95       	lsr	r24
     576:	86 95       	lsr	r24
     578:	93 81       	ldd	r25, Z+3	; 0x03
     57a:	b0 e2       	ldi	r27, 0x20	; 32
     57c:	9b 9f       	mul	r25, r27
     57e:	80 0d       	add	r24, r0
     580:	11 24       	eor	r1, r1
     582:	80 93 f3 00 	sts	0x00F3, r24
     586:	f8 01       	movw	r30, r16
     588:	82 81       	ldd	r24, Z+2	; 0x02
     58a:	82 95       	swap	r24
     58c:	88 0f       	add	r24, r24
     58e:	80 7e       	andi	r24, 0xE0	; 224
     590:	80 93 f2 00 	sts	0x00F2, r24
     594:	ef ee       	ldi	r30, 0xEF	; 239
     596:	f0 e0       	ldi	r31, 0x00	; 0
     598:	80 81       	ld	r24, Z
     59a:	8f 7e       	andi	r24, 0xEF	; 239
     59c:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     59e:	d8 01       	movw	r26, r16
     5a0:	16 96       	adiw	r26, 0x06	; 6
     5a2:	8c 91       	ld	r24, X
     5a4:	88 23       	and	r24, r24
     5a6:	91 f0       	breq	.+36     	; 0x5cc <can_cmd+0x18a>
     5a8:	80 e0       	ldi	r24, 0x00	; 0
     5aa:	2a ef       	ldi	r18, 0xFA	; 250
     5ac:	30 e0       	ldi	r19, 0x00	; 0
     5ae:	d8 01       	movw	r26, r16
     5b0:	17 96       	adiw	r26, 0x07	; 7
     5b2:	ed 91       	ld	r30, X+
     5b4:	fc 91       	ld	r31, X
     5b6:	18 97       	sbiw	r26, 0x08	; 8
     5b8:	e8 0f       	add	r30, r24
     5ba:	f1 1d       	adc	r31, r1
     5bc:	90 81       	ld	r25, Z
     5be:	f9 01       	movw	r30, r18
     5c0:	90 83       	st	Z, r25
     5c2:	8f 5f       	subi	r24, 0xFF	; 255
     5c4:	16 96       	adiw	r26, 0x06	; 6
     5c6:	9c 91       	ld	r25, X
     5c8:	89 17       	cp	r24, r25
     5ca:	88 f3       	brcs	.-30     	; 0x5ae <can_cmd+0x16c>
          if (cmd->ctrl.rtr) Can_set_rtr(); 
     5cc:	d8 01       	movw	r26, r16
     5ce:	1a 96       	adiw	r26, 0x0a	; 10
     5d0:	8c 91       	ld	r24, X
     5d2:	88 23       	and	r24, r24
     5d4:	31 f0       	breq	.+12     	; 0x5e2 <can_cmd+0x1a0>
     5d6:	e0 ef       	ldi	r30, 0xF0	; 240
     5d8:	f0 e0       	ldi	r31, 0x00	; 0
     5da:	80 81       	ld	r24, Z
     5dc:	84 60       	ori	r24, 0x04	; 4
     5de:	80 83       	st	Z, r24
     5e0:	05 c0       	rjmp	.+10     	; 0x5ec <can_cmd+0x1aa>
            else Can_clear_rtr();    
     5e2:	e0 ef       	ldi	r30, 0xF0	; 240
     5e4:	f0 e0       	ldi	r31, 0x00	; 0
     5e6:	80 81       	ld	r24, Z
     5e8:	8b 7f       	andi	r24, 0xFB	; 251
     5ea:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     5ec:	ef ee       	ldi	r30, 0xEF	; 239
     5ee:	f0 e0       	ldi	r31, 0x00	; 0
     5f0:	90 81       	ld	r25, Z
     5f2:	d8 01       	movw	r26, r16
     5f4:	16 96       	adiw	r26, 0x06	; 6
     5f6:	8c 91       	ld	r24, X
     5f8:	89 2b       	or	r24, r25
     5fa:	80 83       	st	Z, r24
          Can_config_tx();
     5fc:	80 81       	ld	r24, Z
     5fe:	8f 73       	andi	r24, 0x3F	; 63
     600:	80 83       	st	Z, r24
     602:	80 81       	ld	r24, Z
     604:	80 64       	ori	r24, 0x40	; 64
     606:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     608:	80 e0       	ldi	r24, 0x00	; 0
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          if (cmd->ctrl.rtr) Can_set_rtr(); 
            else Can_clear_rtr();    
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     60a:	5e c4       	rjmp	.+2236   	; 0xec8 <can_cmd+0xa86>
        //------------      
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     60c:	f8 01       	movw	r30, r16
     60e:	83 85       	ldd	r24, Z+11	; 0x0b
     610:	88 23       	and	r24, r24
     612:	69 f1       	breq	.+90     	; 0x66e <can_cmd+0x22c>
     614:	94 81       	ldd	r25, Z+4	; 0x04
     616:	92 95       	swap	r25
     618:	96 95       	lsr	r25
     61a:	97 70       	andi	r25, 0x07	; 7
     61c:	85 81       	ldd	r24, Z+5	; 0x05
     61e:	88 0f       	add	r24, r24
     620:	88 0f       	add	r24, r24
     622:	88 0f       	add	r24, r24
     624:	89 0f       	add	r24, r25
     626:	80 93 f3 00 	sts	0x00F3, r24
     62a:	93 81       	ldd	r25, Z+3	; 0x03
     62c:	92 95       	swap	r25
     62e:	96 95       	lsr	r25
     630:	97 70       	andi	r25, 0x07	; 7
     632:	84 81       	ldd	r24, Z+4	; 0x04
     634:	88 0f       	add	r24, r24
     636:	88 0f       	add	r24, r24
     638:	88 0f       	add	r24, r24
     63a:	89 0f       	add	r24, r25
     63c:	80 93 f2 00 	sts	0x00F2, r24
     640:	92 81       	ldd	r25, Z+2	; 0x02
     642:	92 95       	swap	r25
     644:	96 95       	lsr	r25
     646:	97 70       	andi	r25, 0x07	; 7
     648:	83 81       	ldd	r24, Z+3	; 0x03
     64a:	88 0f       	add	r24, r24
     64c:	88 0f       	add	r24, r24
     64e:	88 0f       	add	r24, r24
     650:	89 0f       	add	r24, r25
     652:	80 93 f1 00 	sts	0x00F1, r24
     656:	82 81       	ldd	r24, Z+2	; 0x02
     658:	88 0f       	add	r24, r24
     65a:	88 0f       	add	r24, r24
     65c:	88 0f       	add	r24, r24
     65e:	80 93 f0 00 	sts	0x00F0, r24
     662:	ef ee       	ldi	r30, 0xEF	; 239
     664:	f0 e0       	ldi	r31, 0x00	; 0
     666:	80 81       	ld	r24, Z
     668:	80 61       	ori	r24, 0x10	; 16
     66a:	80 83       	st	Z, r24
     66c:	17 c0       	rjmp	.+46     	; 0x69c <can_cmd+0x25a>
          else              { Can_set_std_id(cmd->id.std);}
     66e:	82 81       	ldd	r24, Z+2	; 0x02
     670:	86 95       	lsr	r24
     672:	86 95       	lsr	r24
     674:	86 95       	lsr	r24
     676:	93 81       	ldd	r25, Z+3	; 0x03
     678:	b0 e2       	ldi	r27, 0x20	; 32
     67a:	9b 9f       	mul	r25, r27
     67c:	80 0d       	add	r24, r0
     67e:	11 24       	eor	r1, r1
     680:	80 93 f3 00 	sts	0x00F3, r24
     684:	f8 01       	movw	r30, r16
     686:	82 81       	ldd	r24, Z+2	; 0x02
     688:	82 95       	swap	r24
     68a:	88 0f       	add	r24, r24
     68c:	80 7e       	andi	r24, 0xE0	; 224
     68e:	80 93 f2 00 	sts	0x00F2, r24
     692:	ef ee       	ldi	r30, 0xEF	; 239
     694:	f0 e0       	ldi	r31, 0x00	; 0
     696:	80 81       	ld	r24, Z
     698:	8f 7e       	andi	r24, 0xEF	; 239
     69a:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     69c:	d8 01       	movw	r26, r16
     69e:	16 96       	adiw	r26, 0x06	; 6
     6a0:	8c 91       	ld	r24, X
     6a2:	88 23       	and	r24, r24
     6a4:	91 f0       	breq	.+36     	; 0x6ca <can_cmd+0x288>
     6a6:	80 e0       	ldi	r24, 0x00	; 0
     6a8:	2a ef       	ldi	r18, 0xFA	; 250
     6aa:	30 e0       	ldi	r19, 0x00	; 0
     6ac:	d8 01       	movw	r26, r16
     6ae:	17 96       	adiw	r26, 0x07	; 7
     6b0:	ed 91       	ld	r30, X+
     6b2:	fc 91       	ld	r31, X
     6b4:	18 97       	sbiw	r26, 0x08	; 8
     6b6:	e8 0f       	add	r30, r24
     6b8:	f1 1d       	adc	r31, r1
     6ba:	90 81       	ld	r25, Z
     6bc:	f9 01       	movw	r30, r18
     6be:	90 83       	st	Z, r25
     6c0:	8f 5f       	subi	r24, 0xFF	; 255
     6c2:	16 96       	adiw	r26, 0x06	; 6
     6c4:	9c 91       	ld	r25, X
     6c6:	89 17       	cp	r24, r25
     6c8:	88 f3       	brcs	.-30     	; 0x6ac <can_cmd+0x26a>
          cmd->ctrl.rtr=0; Can_clear_rtr();
     6ca:	d8 01       	movw	r26, r16
     6cc:	1a 96       	adiw	r26, 0x0a	; 10
     6ce:	1c 92       	st	X, r1
     6d0:	1a 97       	sbiw	r26, 0x0a	; 10
     6d2:	e0 ef       	ldi	r30, 0xF0	; 240
     6d4:	f0 e0       	ldi	r31, 0x00	; 0
     6d6:	80 81       	ld	r24, Z
     6d8:	8b 7f       	andi	r24, 0xFB	; 251
     6da:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     6dc:	ef ee       	ldi	r30, 0xEF	; 239
     6de:	f0 e0       	ldi	r31, 0x00	; 0
     6e0:	90 81       	ld	r25, Z
     6e2:	16 96       	adiw	r26, 0x06	; 6
     6e4:	8c 91       	ld	r24, X
     6e6:	89 2b       	or	r24, r25
     6e8:	80 83       	st	Z, r24
          Can_config_tx();
     6ea:	80 81       	ld	r24, Z
     6ec:	8f 73       	andi	r24, 0x3F	; 63
     6ee:	80 83       	st	Z, r24
     6f0:	80 81       	ld	r24, Z
     6f2:	80 64       	ori	r24, 0x40	; 64
     6f4:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     6f6:	80 e0       	ldi	r24, 0x00	; 0
          else              { Can_set_std_id(cmd->id.std);}
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          cmd->ctrl.rtr=0; Can_clear_rtr();
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     6f8:	e7 c3       	rjmp	.+1998   	; 0xec8 <can_cmd+0xa86>
        //------------      
        case CMD_TX_REMOTE:       
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     6fa:	f8 01       	movw	r30, r16
     6fc:	83 85       	ldd	r24, Z+11	; 0x0b
     6fe:	88 23       	and	r24, r24
     700:	69 f1       	breq	.+90     	; 0x75c <can_cmd+0x31a>
     702:	94 81       	ldd	r25, Z+4	; 0x04
     704:	92 95       	swap	r25
     706:	96 95       	lsr	r25
     708:	97 70       	andi	r25, 0x07	; 7
     70a:	85 81       	ldd	r24, Z+5	; 0x05
     70c:	88 0f       	add	r24, r24
     70e:	88 0f       	add	r24, r24
     710:	88 0f       	add	r24, r24
     712:	89 0f       	add	r24, r25
     714:	80 93 f3 00 	sts	0x00F3, r24
     718:	93 81       	ldd	r25, Z+3	; 0x03
     71a:	92 95       	swap	r25
     71c:	96 95       	lsr	r25
     71e:	97 70       	andi	r25, 0x07	; 7
     720:	84 81       	ldd	r24, Z+4	; 0x04
     722:	88 0f       	add	r24, r24
     724:	88 0f       	add	r24, r24
     726:	88 0f       	add	r24, r24
     728:	89 0f       	add	r24, r25
     72a:	80 93 f2 00 	sts	0x00F2, r24
     72e:	92 81       	ldd	r25, Z+2	; 0x02
     730:	92 95       	swap	r25
     732:	96 95       	lsr	r25
     734:	97 70       	andi	r25, 0x07	; 7
     736:	83 81       	ldd	r24, Z+3	; 0x03
     738:	88 0f       	add	r24, r24
     73a:	88 0f       	add	r24, r24
     73c:	88 0f       	add	r24, r24
     73e:	89 0f       	add	r24, r25
     740:	80 93 f1 00 	sts	0x00F1, r24
     744:	82 81       	ldd	r24, Z+2	; 0x02
     746:	88 0f       	add	r24, r24
     748:	88 0f       	add	r24, r24
     74a:	88 0f       	add	r24, r24
     74c:	80 93 f0 00 	sts	0x00F0, r24
     750:	ef ee       	ldi	r30, 0xEF	; 239
     752:	f0 e0       	ldi	r31, 0x00	; 0
     754:	80 81       	ld	r24, Z
     756:	80 61       	ori	r24, 0x10	; 16
     758:	80 83       	st	Z, r24
     75a:	17 c0       	rjmp	.+46     	; 0x78a <can_cmd+0x348>
          else              { Can_set_std_id(cmd->id.std);}
     75c:	82 81       	ldd	r24, Z+2	; 0x02
     75e:	86 95       	lsr	r24
     760:	86 95       	lsr	r24
     762:	86 95       	lsr	r24
     764:	93 81       	ldd	r25, Z+3	; 0x03
     766:	b0 e2       	ldi	r27, 0x20	; 32
     768:	9b 9f       	mul	r25, r27
     76a:	80 0d       	add	r24, r0
     76c:	11 24       	eor	r1, r1
     76e:	80 93 f3 00 	sts	0x00F3, r24
     772:	f8 01       	movw	r30, r16
     774:	82 81       	ldd	r24, Z+2	; 0x02
     776:	82 95       	swap	r24
     778:	88 0f       	add	r24, r24
     77a:	80 7e       	andi	r24, 0xE0	; 224
     77c:	80 93 f2 00 	sts	0x00F2, r24
     780:	ef ee       	ldi	r30, 0xEF	; 239
     782:	f0 e0       	ldi	r31, 0x00	; 0
     784:	80 81       	ld	r24, Z
     786:	8f 7e       	andi	r24, 0xEF	; 239
     788:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtr();
     78a:	81 e0       	ldi	r24, 0x01	; 1
     78c:	d8 01       	movw	r26, r16
     78e:	1a 96       	adiw	r26, 0x0a	; 10
     790:	8c 93       	st	X, r24
     792:	1a 97       	sbiw	r26, 0x0a	; 10
     794:	e0 ef       	ldi	r30, 0xF0	; 240
     796:	f0 e0       	ldi	r31, 0x00	; 0
     798:	80 81       	ld	r24, Z
     79a:	84 60       	ori	r24, 0x04	; 4
     79c:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     79e:	ef ee       	ldi	r30, 0xEF	; 239
     7a0:	f0 e0       	ldi	r31, 0x00	; 0
     7a2:	90 81       	ld	r25, Z
     7a4:	16 96       	adiw	r26, 0x06	; 6
     7a6:	8c 91       	ld	r24, X
     7a8:	89 2b       	or	r24, r25
     7aa:	80 83       	st	Z, r24
          Can_config_tx();
     7ac:	80 81       	ld	r24, Z
     7ae:	8f 73       	andi	r24, 0x3F	; 63
     7b0:	80 83       	st	Z, r24
     7b2:	80 81       	ld	r24, Z
     7b4:	80 64       	ori	r24, 0x40	; 64
     7b6:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     7b8:	80 e0       	ldi	r24, 0x00	; 0
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
          cmd->ctrl.rtr=1; Can_set_rtr();
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     7ba:	86 c3       	rjmp	.+1804   	; 0xec8 <can_cmd+0xa86>
        //------------      
        case CMD_RX:
          u32_temp=0; Can_set_ext_msk(u32_temp);
     7bc:	19 82       	std	Y+1, r1	; 0x01
     7be:	1a 82       	std	Y+2, r1	; 0x02
     7c0:	1b 82       	std	Y+3, r1	; 0x03
     7c2:	1c 82       	std	Y+4, r1	; 0x04
     7c4:	10 92 f7 00 	sts	0x00F7, r1
     7c8:	9a 81       	ldd	r25, Y+2	; 0x02
     7ca:	92 95       	swap	r25
     7cc:	96 95       	lsr	r25
     7ce:	97 70       	andi	r25, 0x07	; 7
     7d0:	8b 81       	ldd	r24, Y+3	; 0x03
     7d2:	88 0f       	add	r24, r24
     7d4:	88 0f       	add	r24, r24
     7d6:	88 0f       	add	r24, r24
     7d8:	89 0f       	add	r24, r25
     7da:	80 93 f6 00 	sts	0x00F6, r24
     7de:	99 81       	ldd	r25, Y+1	; 0x01
     7e0:	92 95       	swap	r25
     7e2:	96 95       	lsr	r25
     7e4:	97 70       	andi	r25, 0x07	; 7
     7e6:	8a 81       	ldd	r24, Y+2	; 0x02
     7e8:	88 0f       	add	r24, r24
     7ea:	88 0f       	add	r24, r24
     7ec:	88 0f       	add	r24, r24
     7ee:	89 0f       	add	r24, r25
     7f0:	80 93 f5 00 	sts	0x00F5, r24
     7f4:	89 81       	ldd	r24, Y+1	; 0x01
     7f6:	88 0f       	add	r24, r24
     7f8:	88 0f       	add	r24, r24
     7fa:	88 0f       	add	r24, r24
     7fc:	24 ef       	ldi	r18, 0xF4	; 244
     7fe:	30 e0       	ldi	r19, 0x00	; 0
     800:	f9 01       	movw	r30, r18
     802:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     804:	ef ee       	ldi	r30, 0xEF	; 239
     806:	f0 e0       	ldi	r31, 0x00	; 0
     808:	90 81       	ld	r25, Z
     80a:	d8 01       	movw	r26, r16
     80c:	16 96       	adiw	r26, 0x06	; 6
     80e:	8c 91       	ld	r24, X
     810:	89 2b       	or	r24, r25
     812:	80 83       	st	Z, r24
          Can_clear_rtrmsk();
     814:	d9 01       	movw	r26, r18
     816:	8c 91       	ld	r24, X
     818:	8b 7f       	andi	r24, 0xFB	; 251
     81a:	8c 93       	st	X, r24
          Can_clear_idemsk();
     81c:	8c 91       	ld	r24, X
     81e:	8e 7f       	andi	r24, 0xFE	; 254
     820:	8c 93       	st	X, r24
          Can_config_rx();       
     822:	80 81       	ld	r24, Z
     824:	8f 73       	andi	r24, 0x3F	; 63
     826:	80 83       	st	Z, r24
     828:	80 81       	ld	r24, Z
     82a:	80 68       	ori	r24, 0x80	; 128
     82c:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     82e:	80 e0       	ldi	r24, 0x00	; 0
          u32_temp=0; Can_set_ext_msk(u32_temp);
          Can_set_dlc(cmd->dlc);
          Can_clear_rtrmsk();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     830:	4b c3       	rjmp	.+1686   	; 0xec8 <can_cmd+0xa86>
        //------------      
        case CMD_RX_DATA:
          u32_temp=0; Can_set_ext_msk(u32_temp);
     832:	19 82       	std	Y+1, r1	; 0x01
     834:	1a 82       	std	Y+2, r1	; 0x02
     836:	1b 82       	std	Y+3, r1	; 0x03
     838:	1c 82       	std	Y+4, r1	; 0x04
     83a:	10 92 f7 00 	sts	0x00F7, r1
     83e:	9a 81       	ldd	r25, Y+2	; 0x02
     840:	92 95       	swap	r25
     842:	96 95       	lsr	r25
     844:	97 70       	andi	r25, 0x07	; 7
     846:	8b 81       	ldd	r24, Y+3	; 0x03
     848:	88 0f       	add	r24, r24
     84a:	88 0f       	add	r24, r24
     84c:	88 0f       	add	r24, r24
     84e:	89 0f       	add	r24, r25
     850:	80 93 f6 00 	sts	0x00F6, r24
     854:	99 81       	ldd	r25, Y+1	; 0x01
     856:	92 95       	swap	r25
     858:	96 95       	lsr	r25
     85a:	97 70       	andi	r25, 0x07	; 7
     85c:	8a 81       	ldd	r24, Y+2	; 0x02
     85e:	88 0f       	add	r24, r24
     860:	88 0f       	add	r24, r24
     862:	88 0f       	add	r24, r24
     864:	89 0f       	add	r24, r25
     866:	80 93 f5 00 	sts	0x00F5, r24
     86a:	89 81       	ldd	r24, Y+1	; 0x01
     86c:	88 0f       	add	r24, r24
     86e:	88 0f       	add	r24, r24
     870:	88 0f       	add	r24, r24
     872:	44 ef       	ldi	r20, 0xF4	; 244
     874:	50 e0       	ldi	r21, 0x00	; 0
     876:	fa 01       	movw	r30, r20
     878:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     87a:	ef ee       	ldi	r30, 0xEF	; 239
     87c:	f0 e0       	ldi	r31, 0x00	; 0
     87e:	90 81       	ld	r25, Z
     880:	d8 01       	movw	r26, r16
     882:	16 96       	adiw	r26, 0x06	; 6
     884:	8c 91       	ld	r24, X
     886:	16 97       	sbiw	r26, 0x06	; 6
     888:	89 2b       	or	r24, r25
     88a:	80 83       	st	Z, r24
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
     88c:	1a 96       	adiw	r26, 0x0a	; 10
     88e:	1c 92       	st	X, r1
     890:	da 01       	movw	r26, r20
     892:	8c 91       	ld	r24, X
     894:	84 60       	ori	r24, 0x04	; 4
     896:	8c 93       	st	X, r24
     898:	80 ef       	ldi	r24, 0xF0	; 240
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	dc 01       	movw	r26, r24
     89e:	2c 91       	ld	r18, X
     8a0:	2b 7f       	andi	r18, 0xFB	; 251
     8a2:	2c 93       	st	X, r18
          Can_clear_idemsk();
     8a4:	da 01       	movw	r26, r20
     8a6:	8c 91       	ld	r24, X
     8a8:	8e 7f       	andi	r24, 0xFE	; 254
     8aa:	8c 93       	st	X, r24
          Can_config_rx();       
     8ac:	80 81       	ld	r24, Z
     8ae:	8f 73       	andi	r24, 0x3F	; 63
     8b0:	80 83       	st	Z, r24
     8b2:	80 81       	ld	r24, Z
     8b4:	80 68       	ori	r24, 0x80	; 128
     8b6:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     8b8:	80 e0       	ldi	r24, 0x00	; 0
          u32_temp=0; Can_set_ext_msk(u32_temp);
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     8ba:	06 c3       	rjmp	.+1548   	; 0xec8 <can_cmd+0xa86>
        //------------      
        case CMD_RX_REMOTE:
          u32_temp=0; Can_set_ext_msk(u32_temp);
     8bc:	19 82       	std	Y+1, r1	; 0x01
     8be:	1a 82       	std	Y+2, r1	; 0x02
     8c0:	1b 82       	std	Y+3, r1	; 0x03
     8c2:	1c 82       	std	Y+4, r1	; 0x04
     8c4:	10 92 f7 00 	sts	0x00F7, r1
     8c8:	9a 81       	ldd	r25, Y+2	; 0x02
     8ca:	92 95       	swap	r25
     8cc:	96 95       	lsr	r25
     8ce:	97 70       	andi	r25, 0x07	; 7
     8d0:	8b 81       	ldd	r24, Y+3	; 0x03
     8d2:	88 0f       	add	r24, r24
     8d4:	88 0f       	add	r24, r24
     8d6:	88 0f       	add	r24, r24
     8d8:	89 0f       	add	r24, r25
     8da:	80 93 f6 00 	sts	0x00F6, r24
     8de:	99 81       	ldd	r25, Y+1	; 0x01
     8e0:	92 95       	swap	r25
     8e2:	96 95       	lsr	r25
     8e4:	97 70       	andi	r25, 0x07	; 7
     8e6:	8a 81       	ldd	r24, Y+2	; 0x02
     8e8:	88 0f       	add	r24, r24
     8ea:	88 0f       	add	r24, r24
     8ec:	88 0f       	add	r24, r24
     8ee:	89 0f       	add	r24, r25
     8f0:	80 93 f5 00 	sts	0x00F5, r24
     8f4:	89 81       	ldd	r24, Y+1	; 0x01
     8f6:	88 0f       	add	r24, r24
     8f8:	88 0f       	add	r24, r24
     8fa:	88 0f       	add	r24, r24
     8fc:	44 ef       	ldi	r20, 0xF4	; 244
     8fe:	50 e0       	ldi	r21, 0x00	; 0
     900:	fa 01       	movw	r30, r20
     902:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     904:	ef ee       	ldi	r30, 0xEF	; 239
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	90 81       	ld	r25, Z
     90a:	d8 01       	movw	r26, r16
     90c:	16 96       	adiw	r26, 0x06	; 6
     90e:	8c 91       	ld	r24, X
     910:	16 97       	sbiw	r26, 0x06	; 6
     912:	89 2b       	or	r24, r25
     914:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
     916:	81 e0       	ldi	r24, 0x01	; 1
     918:	1a 96       	adiw	r26, 0x0a	; 10
     91a:	8c 93       	st	X, r24
     91c:	da 01       	movw	r26, r20
     91e:	8c 91       	ld	r24, X
     920:	84 60       	ori	r24, 0x04	; 4
     922:	8c 93       	st	X, r24
     924:	80 ef       	ldi	r24, 0xF0	; 240
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	dc 01       	movw	r26, r24
     92a:	2c 91       	ld	r18, X
     92c:	24 60       	ori	r18, 0x04	; 4
     92e:	2c 93       	st	X, r18
          Can_clear_rplv();
     930:	80 81       	ld	r24, Z
     932:	8f 7d       	andi	r24, 0xDF	; 223
     934:	80 83       	st	Z, r24
          Can_clear_idemsk();
     936:	da 01       	movw	r26, r20
     938:	8c 91       	ld	r24, X
     93a:	8e 7f       	andi	r24, 0xFE	; 254
     93c:	8c 93       	st	X, r24
          Can_config_rx();       
     93e:	80 81       	ld	r24, Z
     940:	8f 73       	andi	r24, 0x3F	; 63
     942:	80 83       	st	Z, r24
     944:	80 81       	ld	r24, Z
     946:	80 68       	ori	r24, 0x80	; 128
     948:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     94a:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_clear_rplv();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     94c:	bd c2       	rjmp	.+1402   	; 0xec8 <can_cmd+0xa86>
        //------------      
        case CMD_RX_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     94e:	f8 01       	movw	r30, r16
     950:	83 85       	ldd	r24, Z+11	; 0x0b
     952:	88 23       	and	r24, r24
     954:	69 f1       	breq	.+90     	; 0x9b0 <can_cmd+0x56e>
     956:	94 81       	ldd	r25, Z+4	; 0x04
     958:	92 95       	swap	r25
     95a:	96 95       	lsr	r25
     95c:	97 70       	andi	r25, 0x07	; 7
     95e:	85 81       	ldd	r24, Z+5	; 0x05
     960:	88 0f       	add	r24, r24
     962:	88 0f       	add	r24, r24
     964:	88 0f       	add	r24, r24
     966:	89 0f       	add	r24, r25
     968:	80 93 f3 00 	sts	0x00F3, r24
     96c:	93 81       	ldd	r25, Z+3	; 0x03
     96e:	92 95       	swap	r25
     970:	96 95       	lsr	r25
     972:	97 70       	andi	r25, 0x07	; 7
     974:	84 81       	ldd	r24, Z+4	; 0x04
     976:	88 0f       	add	r24, r24
     978:	88 0f       	add	r24, r24
     97a:	88 0f       	add	r24, r24
     97c:	89 0f       	add	r24, r25
     97e:	80 93 f2 00 	sts	0x00F2, r24
     982:	92 81       	ldd	r25, Z+2	; 0x02
     984:	92 95       	swap	r25
     986:	96 95       	lsr	r25
     988:	97 70       	andi	r25, 0x07	; 7
     98a:	83 81       	ldd	r24, Z+3	; 0x03
     98c:	88 0f       	add	r24, r24
     98e:	88 0f       	add	r24, r24
     990:	88 0f       	add	r24, r24
     992:	89 0f       	add	r24, r25
     994:	80 93 f1 00 	sts	0x00F1, r24
     998:	82 81       	ldd	r24, Z+2	; 0x02
     99a:	88 0f       	add	r24, r24
     99c:	88 0f       	add	r24, r24
     99e:	88 0f       	add	r24, r24
     9a0:	80 93 f0 00 	sts	0x00F0, r24
     9a4:	ef ee       	ldi	r30, 0xEF	; 239
     9a6:	f0 e0       	ldi	r31, 0x00	; 0
     9a8:	80 81       	ld	r24, Z
     9aa:	80 61       	ori	r24, 0x10	; 16
     9ac:	80 83       	st	Z, r24
     9ae:	17 c0       	rjmp	.+46     	; 0x9de <can_cmd+0x59c>
          else              { Can_set_std_id(cmd->id.std);}
     9b0:	82 81       	ldd	r24, Z+2	; 0x02
     9b2:	86 95       	lsr	r24
     9b4:	86 95       	lsr	r24
     9b6:	86 95       	lsr	r24
     9b8:	93 81       	ldd	r25, Z+3	; 0x03
     9ba:	b0 e2       	ldi	r27, 0x20	; 32
     9bc:	9b 9f       	mul	r25, r27
     9be:	80 0d       	add	r24, r0
     9c0:	11 24       	eor	r1, r1
     9c2:	80 93 f3 00 	sts	0x00F3, r24
     9c6:	f8 01       	movw	r30, r16
     9c8:	82 81       	ldd	r24, Z+2	; 0x02
     9ca:	82 95       	swap	r24
     9cc:	88 0f       	add	r24, r24
     9ce:	80 7e       	andi	r24, 0xE0	; 224
     9d0:	80 93 f2 00 	sts	0x00F2, r24
     9d4:	ef ee       	ldi	r30, 0xEF	; 239
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	80 81       	ld	r24, Z
     9da:	8f 7e       	andi	r24, 0xEF	; 239
     9dc:	80 83       	st	Z, r24
          u32_temp=~0; Can_set_ext_msk(u32_temp);
     9de:	8f ef       	ldi	r24, 0xFF	; 255
     9e0:	9f ef       	ldi	r25, 0xFF	; 255
     9e2:	dc 01       	movw	r26, r24
     9e4:	89 83       	std	Y+1, r24	; 0x01
     9e6:	9a 83       	std	Y+2, r25	; 0x02
     9e8:	ab 83       	std	Y+3, r26	; 0x03
     9ea:	bc 83       	std	Y+4, r27	; 0x04
     9ec:	8f ef       	ldi	r24, 0xFF	; 255
     9ee:	80 93 f7 00 	sts	0x00F7, r24
     9f2:	9a 81       	ldd	r25, Y+2	; 0x02
     9f4:	92 95       	swap	r25
     9f6:	96 95       	lsr	r25
     9f8:	97 70       	andi	r25, 0x07	; 7
     9fa:	8b 81       	ldd	r24, Y+3	; 0x03
     9fc:	88 0f       	add	r24, r24
     9fe:	88 0f       	add	r24, r24
     a00:	88 0f       	add	r24, r24
     a02:	89 0f       	add	r24, r25
     a04:	80 93 f6 00 	sts	0x00F6, r24
     a08:	99 81       	ldd	r25, Y+1	; 0x01
     a0a:	92 95       	swap	r25
     a0c:	96 95       	lsr	r25
     a0e:	97 70       	andi	r25, 0x07	; 7
     a10:	8a 81       	ldd	r24, Y+2	; 0x02
     a12:	88 0f       	add	r24, r24
     a14:	88 0f       	add	r24, r24
     a16:	88 0f       	add	r24, r24
     a18:	89 0f       	add	r24, r25
     a1a:	80 93 f5 00 	sts	0x00F5, r24
     a1e:	89 81       	ldd	r24, Y+1	; 0x01
     a20:	88 0f       	add	r24, r24
     a22:	88 0f       	add	r24, r24
     a24:	88 0f       	add	r24, r24
     a26:	24 ef       	ldi	r18, 0xF4	; 244
     a28:	30 e0       	ldi	r19, 0x00	; 0
     a2a:	d9 01       	movw	r26, r18
     a2c:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
     a2e:	ef ee       	ldi	r30, 0xEF	; 239
     a30:	f0 e0       	ldi	r31, 0x00	; 0
     a32:	90 81       	ld	r25, Z
     a34:	d8 01       	movw	r26, r16
     a36:	16 96       	adiw	r26, 0x06	; 6
     a38:	8c 91       	ld	r24, X
     a3a:	89 2b       	or	r24, r25
     a3c:	80 83       	st	Z, r24
          Can_clear_rtrmsk();
     a3e:	d9 01       	movw	r26, r18
     a40:	8c 91       	ld	r24, X
     a42:	8b 7f       	andi	r24, 0xFB	; 251
     a44:	8c 93       	st	X, r24
          Can_set_idemsk();
     a46:	8c 91       	ld	r24, X
     a48:	81 60       	ori	r24, 0x01	; 1
     a4a:	8c 93       	st	X, r24
          Can_config_rx();       
     a4c:	80 81       	ld	r24, Z
     a4e:	8f 73       	andi	r24, 0x3F	; 63
     a50:	80 83       	st	Z, r24
     a52:	80 81       	ld	r24, Z
     a54:	80 68       	ori	r24, 0x80	; 128
     a56:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     a58:	80 e0       	ldi	r24, 0x00	; 0
          u32_temp=~0; Can_set_ext_msk(u32_temp);
          Can_set_dlc(cmd->dlc);
          Can_clear_rtrmsk();
          Can_set_idemsk();
          Can_config_rx();       
          break;
     a5a:	36 c2       	rjmp	.+1132   	; 0xec8 <can_cmd+0xa86>
        //------------      
        case CMD_RX_DATA_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     a5c:	f8 01       	movw	r30, r16
     a5e:	83 85       	ldd	r24, Z+11	; 0x0b
     a60:	88 23       	and	r24, r24
     a62:	69 f1       	breq	.+90     	; 0xabe <can_cmd+0x67c>
     a64:	94 81       	ldd	r25, Z+4	; 0x04
     a66:	92 95       	swap	r25
     a68:	96 95       	lsr	r25
     a6a:	97 70       	andi	r25, 0x07	; 7
     a6c:	85 81       	ldd	r24, Z+5	; 0x05
     a6e:	88 0f       	add	r24, r24
     a70:	88 0f       	add	r24, r24
     a72:	88 0f       	add	r24, r24
     a74:	89 0f       	add	r24, r25
     a76:	80 93 f3 00 	sts	0x00F3, r24
     a7a:	93 81       	ldd	r25, Z+3	; 0x03
     a7c:	92 95       	swap	r25
     a7e:	96 95       	lsr	r25
     a80:	97 70       	andi	r25, 0x07	; 7
     a82:	84 81       	ldd	r24, Z+4	; 0x04
     a84:	88 0f       	add	r24, r24
     a86:	88 0f       	add	r24, r24
     a88:	88 0f       	add	r24, r24
     a8a:	89 0f       	add	r24, r25
     a8c:	80 93 f2 00 	sts	0x00F2, r24
     a90:	92 81       	ldd	r25, Z+2	; 0x02
     a92:	92 95       	swap	r25
     a94:	96 95       	lsr	r25
     a96:	97 70       	andi	r25, 0x07	; 7
     a98:	83 81       	ldd	r24, Z+3	; 0x03
     a9a:	88 0f       	add	r24, r24
     a9c:	88 0f       	add	r24, r24
     a9e:	88 0f       	add	r24, r24
     aa0:	89 0f       	add	r24, r25
     aa2:	80 93 f1 00 	sts	0x00F1, r24
     aa6:	82 81       	ldd	r24, Z+2	; 0x02
     aa8:	88 0f       	add	r24, r24
     aaa:	88 0f       	add	r24, r24
     aac:	88 0f       	add	r24, r24
     aae:	80 93 f0 00 	sts	0x00F0, r24
     ab2:	ef ee       	ldi	r30, 0xEF	; 239
     ab4:	f0 e0       	ldi	r31, 0x00	; 0
     ab6:	80 81       	ld	r24, Z
     ab8:	80 61       	ori	r24, 0x10	; 16
     aba:	80 83       	st	Z, r24
     abc:	17 c0       	rjmp	.+46     	; 0xaec <can_cmd+0x6aa>
          else              { Can_set_std_id(cmd->id.std);}
     abe:	82 81       	ldd	r24, Z+2	; 0x02
     ac0:	86 95       	lsr	r24
     ac2:	86 95       	lsr	r24
     ac4:	86 95       	lsr	r24
     ac6:	93 81       	ldd	r25, Z+3	; 0x03
     ac8:	b0 e2       	ldi	r27, 0x20	; 32
     aca:	9b 9f       	mul	r25, r27
     acc:	80 0d       	add	r24, r0
     ace:	11 24       	eor	r1, r1
     ad0:	80 93 f3 00 	sts	0x00F3, r24
     ad4:	f8 01       	movw	r30, r16
     ad6:	82 81       	ldd	r24, Z+2	; 0x02
     ad8:	82 95       	swap	r24
     ada:	88 0f       	add	r24, r24
     adc:	80 7e       	andi	r24, 0xE0	; 224
     ade:	80 93 f2 00 	sts	0x00F2, r24
     ae2:	ef ee       	ldi	r30, 0xEF	; 239
     ae4:	f0 e0       	ldi	r31, 0x00	; 0
     ae6:	80 81       	ld	r24, Z
     ae8:	8f 7e       	andi	r24, 0xEF	; 239
     aea:	80 83       	st	Z, r24
          u32_temp=~0; Can_set_ext_msk(u32_temp);
     aec:	8f ef       	ldi	r24, 0xFF	; 255
     aee:	9f ef       	ldi	r25, 0xFF	; 255
     af0:	dc 01       	movw	r26, r24
     af2:	89 83       	std	Y+1, r24	; 0x01
     af4:	9a 83       	std	Y+2, r25	; 0x02
     af6:	ab 83       	std	Y+3, r26	; 0x03
     af8:	bc 83       	std	Y+4, r27	; 0x04
     afa:	8f ef       	ldi	r24, 0xFF	; 255
     afc:	80 93 f7 00 	sts	0x00F7, r24
     b00:	9a 81       	ldd	r25, Y+2	; 0x02
     b02:	92 95       	swap	r25
     b04:	96 95       	lsr	r25
     b06:	97 70       	andi	r25, 0x07	; 7
     b08:	8b 81       	ldd	r24, Y+3	; 0x03
     b0a:	88 0f       	add	r24, r24
     b0c:	88 0f       	add	r24, r24
     b0e:	88 0f       	add	r24, r24
     b10:	89 0f       	add	r24, r25
     b12:	80 93 f6 00 	sts	0x00F6, r24
     b16:	99 81       	ldd	r25, Y+1	; 0x01
     b18:	92 95       	swap	r25
     b1a:	96 95       	lsr	r25
     b1c:	97 70       	andi	r25, 0x07	; 7
     b1e:	8a 81       	ldd	r24, Y+2	; 0x02
     b20:	88 0f       	add	r24, r24
     b22:	88 0f       	add	r24, r24
     b24:	88 0f       	add	r24, r24
     b26:	89 0f       	add	r24, r25
     b28:	80 93 f5 00 	sts	0x00F5, r24
     b2c:	89 81       	ldd	r24, Y+1	; 0x01
     b2e:	88 0f       	add	r24, r24
     b30:	88 0f       	add	r24, r24
     b32:	88 0f       	add	r24, r24
     b34:	44 ef       	ldi	r20, 0xF4	; 244
     b36:	50 e0       	ldi	r21, 0x00	; 0
     b38:	da 01       	movw	r26, r20
     b3a:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
     b3c:	ef ee       	ldi	r30, 0xEF	; 239
     b3e:	f0 e0       	ldi	r31, 0x00	; 0
     b40:	90 81       	ld	r25, Z
     b42:	d8 01       	movw	r26, r16
     b44:	16 96       	adiw	r26, 0x06	; 6
     b46:	8c 91       	ld	r24, X
     b48:	16 97       	sbiw	r26, 0x06	; 6
     b4a:	89 2b       	or	r24, r25
     b4c:	80 83       	st	Z, r24
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
     b4e:	1a 96       	adiw	r26, 0x0a	; 10
     b50:	1c 92       	st	X, r1
     b52:	da 01       	movw	r26, r20
     b54:	8c 91       	ld	r24, X
     b56:	84 60       	ori	r24, 0x04	; 4
     b58:	8c 93       	st	X, r24
     b5a:	80 ef       	ldi	r24, 0xF0	; 240
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	dc 01       	movw	r26, r24
     b60:	2c 91       	ld	r18, X
     b62:	2b 7f       	andi	r18, 0xFB	; 251
     b64:	2c 93       	st	X, r18
          Can_set_idemsk();
     b66:	da 01       	movw	r26, r20
     b68:	8c 91       	ld	r24, X
     b6a:	81 60       	ori	r24, 0x01	; 1
     b6c:	8c 93       	st	X, r24
          Can_config_rx();       
     b6e:	80 81       	ld	r24, Z
     b70:	8f 73       	andi	r24, 0x3F	; 63
     b72:	80 83       	st	Z, r24
     b74:	80 81       	ld	r24, Z
     b76:	80 68       	ori	r24, 0x80	; 128
     b78:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     b7a:	80 e0       	ldi	r24, 0x00	; 0
          u32_temp=~0; Can_set_ext_msk(u32_temp);
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
          Can_set_idemsk();
          Can_config_rx();       
          break;
     b7c:	a5 c1       	rjmp	.+842    	; 0xec8 <can_cmd+0xa86>
        //------------      
        case CMD_RX_REMOTE_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     b7e:	f8 01       	movw	r30, r16
     b80:	83 85       	ldd	r24, Z+11	; 0x0b
     b82:	88 23       	and	r24, r24
     b84:	69 f1       	breq	.+90     	; 0xbe0 <can_cmd+0x79e>
     b86:	94 81       	ldd	r25, Z+4	; 0x04
     b88:	92 95       	swap	r25
     b8a:	96 95       	lsr	r25
     b8c:	97 70       	andi	r25, 0x07	; 7
     b8e:	85 81       	ldd	r24, Z+5	; 0x05
     b90:	88 0f       	add	r24, r24
     b92:	88 0f       	add	r24, r24
     b94:	88 0f       	add	r24, r24
     b96:	89 0f       	add	r24, r25
     b98:	80 93 f3 00 	sts	0x00F3, r24
     b9c:	93 81       	ldd	r25, Z+3	; 0x03
     b9e:	92 95       	swap	r25
     ba0:	96 95       	lsr	r25
     ba2:	97 70       	andi	r25, 0x07	; 7
     ba4:	84 81       	ldd	r24, Z+4	; 0x04
     ba6:	88 0f       	add	r24, r24
     ba8:	88 0f       	add	r24, r24
     baa:	88 0f       	add	r24, r24
     bac:	89 0f       	add	r24, r25
     bae:	80 93 f2 00 	sts	0x00F2, r24
     bb2:	92 81       	ldd	r25, Z+2	; 0x02
     bb4:	92 95       	swap	r25
     bb6:	96 95       	lsr	r25
     bb8:	97 70       	andi	r25, 0x07	; 7
     bba:	83 81       	ldd	r24, Z+3	; 0x03
     bbc:	88 0f       	add	r24, r24
     bbe:	88 0f       	add	r24, r24
     bc0:	88 0f       	add	r24, r24
     bc2:	89 0f       	add	r24, r25
     bc4:	80 93 f1 00 	sts	0x00F1, r24
     bc8:	82 81       	ldd	r24, Z+2	; 0x02
     bca:	88 0f       	add	r24, r24
     bcc:	88 0f       	add	r24, r24
     bce:	88 0f       	add	r24, r24
     bd0:	80 93 f0 00 	sts	0x00F0, r24
     bd4:	ef ee       	ldi	r30, 0xEF	; 239
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	80 81       	ld	r24, Z
     bda:	80 61       	ori	r24, 0x10	; 16
     bdc:	80 83       	st	Z, r24
     bde:	17 c0       	rjmp	.+46     	; 0xc0e <can_cmd+0x7cc>
          else              { Can_set_std_id(cmd->id.std);}
     be0:	82 81       	ldd	r24, Z+2	; 0x02
     be2:	86 95       	lsr	r24
     be4:	86 95       	lsr	r24
     be6:	86 95       	lsr	r24
     be8:	93 81       	ldd	r25, Z+3	; 0x03
     bea:	b0 e2       	ldi	r27, 0x20	; 32
     bec:	9b 9f       	mul	r25, r27
     bee:	80 0d       	add	r24, r0
     bf0:	11 24       	eor	r1, r1
     bf2:	80 93 f3 00 	sts	0x00F3, r24
     bf6:	f8 01       	movw	r30, r16
     bf8:	82 81       	ldd	r24, Z+2	; 0x02
     bfa:	82 95       	swap	r24
     bfc:	88 0f       	add	r24, r24
     bfe:	80 7e       	andi	r24, 0xE0	; 224
     c00:	80 93 f2 00 	sts	0x00F2, r24
     c04:	ef ee       	ldi	r30, 0xEF	; 239
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	80 81       	ld	r24, Z
     c0a:	8f 7e       	andi	r24, 0xEF	; 239
     c0c:	80 83       	st	Z, r24
          u32_temp=~0; Can_set_ext_msk(u32_temp);
     c0e:	8f ef       	ldi	r24, 0xFF	; 255
     c10:	9f ef       	ldi	r25, 0xFF	; 255
     c12:	dc 01       	movw	r26, r24
     c14:	89 83       	std	Y+1, r24	; 0x01
     c16:	9a 83       	std	Y+2, r25	; 0x02
     c18:	ab 83       	std	Y+3, r26	; 0x03
     c1a:	bc 83       	std	Y+4, r27	; 0x04
     c1c:	8f ef       	ldi	r24, 0xFF	; 255
     c1e:	80 93 f7 00 	sts	0x00F7, r24
     c22:	9a 81       	ldd	r25, Y+2	; 0x02
     c24:	92 95       	swap	r25
     c26:	96 95       	lsr	r25
     c28:	97 70       	andi	r25, 0x07	; 7
     c2a:	8b 81       	ldd	r24, Y+3	; 0x03
     c2c:	88 0f       	add	r24, r24
     c2e:	88 0f       	add	r24, r24
     c30:	88 0f       	add	r24, r24
     c32:	89 0f       	add	r24, r25
     c34:	80 93 f6 00 	sts	0x00F6, r24
     c38:	99 81       	ldd	r25, Y+1	; 0x01
     c3a:	92 95       	swap	r25
     c3c:	96 95       	lsr	r25
     c3e:	97 70       	andi	r25, 0x07	; 7
     c40:	8a 81       	ldd	r24, Y+2	; 0x02
     c42:	88 0f       	add	r24, r24
     c44:	88 0f       	add	r24, r24
     c46:	88 0f       	add	r24, r24
     c48:	89 0f       	add	r24, r25
     c4a:	80 93 f5 00 	sts	0x00F5, r24
     c4e:	89 81       	ldd	r24, Y+1	; 0x01
     c50:	88 0f       	add	r24, r24
     c52:	88 0f       	add	r24, r24
     c54:	88 0f       	add	r24, r24
     c56:	44 ef       	ldi	r20, 0xF4	; 244
     c58:	50 e0       	ldi	r21, 0x00	; 0
     c5a:	da 01       	movw	r26, r20
     c5c:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
     c5e:	ef ee       	ldi	r30, 0xEF	; 239
     c60:	f0 e0       	ldi	r31, 0x00	; 0
     c62:	90 81       	ld	r25, Z
     c64:	d8 01       	movw	r26, r16
     c66:	16 96       	adiw	r26, 0x06	; 6
     c68:	8c 91       	ld	r24, X
     c6a:	16 97       	sbiw	r26, 0x06	; 6
     c6c:	89 2b       	or	r24, r25
     c6e:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	1a 96       	adiw	r26, 0x0a	; 10
     c74:	8c 93       	st	X, r24
     c76:	da 01       	movw	r26, r20
     c78:	8c 91       	ld	r24, X
     c7a:	84 60       	ori	r24, 0x04	; 4
     c7c:	8c 93       	st	X, r24
     c7e:	80 ef       	ldi	r24, 0xF0	; 240
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	dc 01       	movw	r26, r24
     c84:	2c 91       	ld	r18, X
     c86:	24 60       	ori	r18, 0x04	; 4
     c88:	2c 93       	st	X, r18
          Can_clear_rplv();
     c8a:	80 81       	ld	r24, Z
     c8c:	8f 7d       	andi	r24, 0xDF	; 223
     c8e:	80 83       	st	Z, r24
          Can_set_idemsk();
     c90:	da 01       	movw	r26, r20
     c92:	8c 91       	ld	r24, X
     c94:	81 60       	ori	r24, 0x01	; 1
     c96:	8c 93       	st	X, r24
          Can_config_rx();       
     c98:	80 81       	ld	r24, Z
     c9a:	8f 73       	andi	r24, 0x3F	; 63
     c9c:	80 83       	st	Z, r24
     c9e:	80 81       	ld	r24, Z
     ca0:	80 68       	ori	r24, 0x80	; 128
     ca2:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     ca4:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_clear_rplv();
          Can_set_idemsk();
          Can_config_rx();       
          break;
     ca6:	10 c1       	rjmp	.+544    	; 0xec8 <can_cmd+0xa86>
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     ca8:	80 e0       	ldi	r24, 0x00	; 0
     caa:	2a ef       	ldi	r18, 0xFA	; 250
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	d8 01       	movw	r26, r16
     cb0:	17 96       	adiw	r26, 0x07	; 7
     cb2:	ed 91       	ld	r30, X+
     cb4:	fc 91       	ld	r31, X
     cb6:	18 97       	sbiw	r26, 0x08	; 8
     cb8:	e8 0f       	add	r30, r24
     cba:	f1 1d       	adc	r31, r1
     cbc:	90 81       	ld	r25, Z
     cbe:	f9 01       	movw	r30, r18
     cc0:	90 83       	st	Z, r25
     cc2:	8f 5f       	subi	r24, 0xFF	; 255
     cc4:	16 96       	adiw	r26, 0x06	; 6
     cc6:	9c 91       	ld	r25, X
     cc8:	89 17       	cp	r24, r25
     cca:	88 f3       	brcs	.-30     	; 0xcae <can_cmd+0x86c>
          u32_temp=0; Can_set_ext_msk(u32_temp);
     ccc:	19 82       	std	Y+1, r1	; 0x01
     cce:	1a 82       	std	Y+2, r1	; 0x02
     cd0:	1b 82       	std	Y+3, r1	; 0x03
     cd2:	1c 82       	std	Y+4, r1	; 0x04
     cd4:	10 92 f7 00 	sts	0x00F7, r1
     cd8:	9a 81       	ldd	r25, Y+2	; 0x02
     cda:	92 95       	swap	r25
     cdc:	96 95       	lsr	r25
     cde:	97 70       	andi	r25, 0x07	; 7
     ce0:	8b 81       	ldd	r24, Y+3	; 0x03
     ce2:	88 0f       	add	r24, r24
     ce4:	88 0f       	add	r24, r24
     ce6:	88 0f       	add	r24, r24
     ce8:	89 0f       	add	r24, r25
     cea:	80 93 f6 00 	sts	0x00F6, r24
     cee:	99 81       	ldd	r25, Y+1	; 0x01
     cf0:	92 95       	swap	r25
     cf2:	96 95       	lsr	r25
     cf4:	97 70       	andi	r25, 0x07	; 7
     cf6:	8a 81       	ldd	r24, Y+2	; 0x02
     cf8:	88 0f       	add	r24, r24
     cfa:	88 0f       	add	r24, r24
     cfc:	88 0f       	add	r24, r24
     cfe:	89 0f       	add	r24, r25
     d00:	80 93 f5 00 	sts	0x00F5, r24
     d04:	89 81       	ldd	r24, Y+1	; 0x01
     d06:	88 0f       	add	r24, r24
     d08:	88 0f       	add	r24, r24
     d0a:	88 0f       	add	r24, r24
     d0c:	44 ef       	ldi	r20, 0xF4	; 244
     d0e:	50 e0       	ldi	r21, 0x00	; 0
     d10:	da 01       	movw	r26, r20
     d12:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
     d14:	ef ee       	ldi	r30, 0xEF	; 239
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	90 81       	ld	r25, Z
     d1a:	d8 01       	movw	r26, r16
     d1c:	16 96       	adiw	r26, 0x06	; 6
     d1e:	8c 91       	ld	r24, X
     d20:	16 97       	sbiw	r26, 0x06	; 6
     d22:	89 2b       	or	r24, r25
     d24:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
     d26:	81 e0       	ldi	r24, 0x01	; 1
     d28:	1a 96       	adiw	r26, 0x0a	; 10
     d2a:	8c 93       	st	X, r24
     d2c:	da 01       	movw	r26, r20
     d2e:	8c 91       	ld	r24, X
     d30:	84 60       	ori	r24, 0x04	; 4
     d32:	8c 93       	st	X, r24
     d34:	80 ef       	ldi	r24, 0xF0	; 240
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	dc 01       	movw	r26, r24
     d3a:	2c 91       	ld	r18, X
     d3c:	24 60       	ori	r18, 0x04	; 4
     d3e:	2c 93       	st	X, r18
          Can_set_rplv();
     d40:	80 81       	ld	r24, Z
     d42:	80 62       	ori	r24, 0x20	; 32
     d44:	80 83       	st	Z, r24
          Can_clear_idemsk();
     d46:	da 01       	movw	r26, r20
     d48:	8c 91       	ld	r24, X
     d4a:	8e 7f       	andi	r24, 0xFE	; 254
     d4c:	8c 93       	st	X, r24
          Can_config_rx();       
     d4e:	80 81       	ld	r24, Z
     d50:	8f 73       	andi	r24, 0x3F	; 63
     d52:	80 83       	st	Z, r24
     d54:	80 81       	ld	r24, Z
     d56:	80 68       	ori	r24, 0x80	; 128
     d58:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     d5a:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_set_rplv();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     d5c:	b5 c0       	rjmp	.+362    	; 0xec8 <can_cmd+0xa86>
        //------------      
        case CMD_REPLY_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     d5e:	f8 01       	movw	r30, r16
     d60:	83 85       	ldd	r24, Z+11	; 0x0b
     d62:	88 23       	and	r24, r24
     d64:	69 f1       	breq	.+90     	; 0xdc0 <can_cmd+0x97e>
     d66:	94 81       	ldd	r25, Z+4	; 0x04
     d68:	92 95       	swap	r25
     d6a:	96 95       	lsr	r25
     d6c:	97 70       	andi	r25, 0x07	; 7
     d6e:	85 81       	ldd	r24, Z+5	; 0x05
     d70:	88 0f       	add	r24, r24
     d72:	88 0f       	add	r24, r24
     d74:	88 0f       	add	r24, r24
     d76:	89 0f       	add	r24, r25
     d78:	80 93 f3 00 	sts	0x00F3, r24
     d7c:	93 81       	ldd	r25, Z+3	; 0x03
     d7e:	92 95       	swap	r25
     d80:	96 95       	lsr	r25
     d82:	97 70       	andi	r25, 0x07	; 7
     d84:	84 81       	ldd	r24, Z+4	; 0x04
     d86:	88 0f       	add	r24, r24
     d88:	88 0f       	add	r24, r24
     d8a:	88 0f       	add	r24, r24
     d8c:	89 0f       	add	r24, r25
     d8e:	80 93 f2 00 	sts	0x00F2, r24
     d92:	92 81       	ldd	r25, Z+2	; 0x02
     d94:	92 95       	swap	r25
     d96:	96 95       	lsr	r25
     d98:	97 70       	andi	r25, 0x07	; 7
     d9a:	83 81       	ldd	r24, Z+3	; 0x03
     d9c:	88 0f       	add	r24, r24
     d9e:	88 0f       	add	r24, r24
     da0:	88 0f       	add	r24, r24
     da2:	89 0f       	add	r24, r25
     da4:	80 93 f1 00 	sts	0x00F1, r24
     da8:	82 81       	ldd	r24, Z+2	; 0x02
     daa:	88 0f       	add	r24, r24
     dac:	88 0f       	add	r24, r24
     dae:	88 0f       	add	r24, r24
     db0:	80 93 f0 00 	sts	0x00F0, r24
     db4:	ef ee       	ldi	r30, 0xEF	; 239
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	80 81       	ld	r24, Z
     dba:	80 61       	ori	r24, 0x10	; 16
     dbc:	80 83       	st	Z, r24
     dbe:	17 c0       	rjmp	.+46     	; 0xdee <can_cmd+0x9ac>
          else              { Can_set_std_id(cmd->id.std);}
     dc0:	82 81       	ldd	r24, Z+2	; 0x02
     dc2:	86 95       	lsr	r24
     dc4:	86 95       	lsr	r24
     dc6:	86 95       	lsr	r24
     dc8:	93 81       	ldd	r25, Z+3	; 0x03
     dca:	b0 e2       	ldi	r27, 0x20	; 32
     dcc:	9b 9f       	mul	r25, r27
     dce:	80 0d       	add	r24, r0
     dd0:	11 24       	eor	r1, r1
     dd2:	80 93 f3 00 	sts	0x00F3, r24
     dd6:	f8 01       	movw	r30, r16
     dd8:	82 81       	ldd	r24, Z+2	; 0x02
     dda:	82 95       	swap	r24
     ddc:	88 0f       	add	r24, r24
     dde:	80 7e       	andi	r24, 0xE0	; 224
     de0:	80 93 f2 00 	sts	0x00F2, r24
     de4:	ef ee       	ldi	r30, 0xEF	; 239
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 81       	ld	r24, Z
     dea:	8f 7e       	andi	r24, 0xEF	; 239
     dec:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     dee:	d8 01       	movw	r26, r16
     df0:	16 96       	adiw	r26, 0x06	; 6
     df2:	8c 91       	ld	r24, X
     df4:	88 23       	and	r24, r24
     df6:	91 f0       	breq	.+36     	; 0xe1c <can_cmd+0x9da>
     df8:	80 e0       	ldi	r24, 0x00	; 0
     dfa:	2a ef       	ldi	r18, 0xFA	; 250
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	d8 01       	movw	r26, r16
     e00:	17 96       	adiw	r26, 0x07	; 7
     e02:	ed 91       	ld	r30, X+
     e04:	fc 91       	ld	r31, X
     e06:	18 97       	sbiw	r26, 0x08	; 8
     e08:	e8 0f       	add	r30, r24
     e0a:	f1 1d       	adc	r31, r1
     e0c:	90 81       	ld	r25, Z
     e0e:	f9 01       	movw	r30, r18
     e10:	90 83       	st	Z, r25
     e12:	8f 5f       	subi	r24, 0xFF	; 255
     e14:	16 96       	adiw	r26, 0x06	; 6
     e16:	9c 91       	ld	r25, X
     e18:	89 17       	cp	r24, r25
     e1a:	88 f3       	brcs	.-30     	; 0xdfe <can_cmd+0x9bc>
          u32_temp=~0; Can_set_ext_msk(u32_temp);
     e1c:	4f ef       	ldi	r20, 0xFF	; 255
     e1e:	5f ef       	ldi	r21, 0xFF	; 255
     e20:	ba 01       	movw	r22, r20
     e22:	49 83       	std	Y+1, r20	; 0x01
     e24:	5a 83       	std	Y+2, r21	; 0x02
     e26:	6b 83       	std	Y+3, r22	; 0x03
     e28:	7c 83       	std	Y+4, r23	; 0x04
     e2a:	8f ef       	ldi	r24, 0xFF	; 255
     e2c:	80 93 f7 00 	sts	0x00F7, r24
     e30:	9a 81       	ldd	r25, Y+2	; 0x02
     e32:	92 95       	swap	r25
     e34:	96 95       	lsr	r25
     e36:	97 70       	andi	r25, 0x07	; 7
     e38:	8b 81       	ldd	r24, Y+3	; 0x03
     e3a:	88 0f       	add	r24, r24
     e3c:	88 0f       	add	r24, r24
     e3e:	88 0f       	add	r24, r24
     e40:	89 0f       	add	r24, r25
     e42:	80 93 f6 00 	sts	0x00F6, r24
     e46:	99 81       	ldd	r25, Y+1	; 0x01
     e48:	92 95       	swap	r25
     e4a:	96 95       	lsr	r25
     e4c:	97 70       	andi	r25, 0x07	; 7
     e4e:	8a 81       	ldd	r24, Y+2	; 0x02
     e50:	88 0f       	add	r24, r24
     e52:	88 0f       	add	r24, r24
     e54:	88 0f       	add	r24, r24
     e56:	89 0f       	add	r24, r25
     e58:	80 93 f5 00 	sts	0x00F5, r24
     e5c:	89 81       	ldd	r24, Y+1	; 0x01
     e5e:	88 0f       	add	r24, r24
     e60:	88 0f       	add	r24, r24
     e62:	88 0f       	add	r24, r24
     e64:	44 ef       	ldi	r20, 0xF4	; 244
     e66:	50 e0       	ldi	r21, 0x00	; 0
     e68:	da 01       	movw	r26, r20
     e6a:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
     e6c:	ef ee       	ldi	r30, 0xEF	; 239
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	90 81       	ld	r25, Z
     e72:	d8 01       	movw	r26, r16
     e74:	16 96       	adiw	r26, 0x06	; 6
     e76:	8c 91       	ld	r24, X
     e78:	16 97       	sbiw	r26, 0x06	; 6
     e7a:	89 2b       	or	r24, r25
     e7c:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	1a 96       	adiw	r26, 0x0a	; 10
     e82:	8c 93       	st	X, r24
     e84:	da 01       	movw	r26, r20
     e86:	8c 91       	ld	r24, X
     e88:	84 60       	ori	r24, 0x04	; 4
     e8a:	8c 93       	st	X, r24
     e8c:	80 ef       	ldi	r24, 0xF0	; 240
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	dc 01       	movw	r26, r24
     e92:	2c 91       	ld	r18, X
     e94:	24 60       	ori	r18, 0x04	; 4
     e96:	2c 93       	st	X, r18
          Can_set_rplv();
     e98:	80 81       	ld	r24, Z
     e9a:	80 62       	ori	r24, 0x20	; 32
     e9c:	80 83       	st	Z, r24
          Can_set_idemsk();
     e9e:	da 01       	movw	r26, r20
     ea0:	8c 91       	ld	r24, X
     ea2:	81 60       	ori	r24, 0x01	; 1
     ea4:	8c 93       	st	X, r24
          Can_config_rx();       
     ea6:	80 81       	ld	r24, Z
     ea8:	8f 73       	andi	r24, 0x3F	; 63
     eaa:	80 83       	st	Z, r24
     eac:	80 81       	ld	r24, Z
     eae:	80 68       	ori	r24, 0x80	; 128
     eb0:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     eb2:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_set_rplv();
          Can_set_idemsk();
          Can_config_rx();       
          break;
     eb4:	09 c0       	rjmp	.+18     	; 0xec8 <can_cmd+0xa86>
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
     eb6:	f8 01       	movw	r30, r16
     eb8:	11 86       	std	Z+9, r1	; 0x09
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     eba:	80 e0       	ldi	r24, 0x00	; 0
          break;
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
          break;
     ebc:	05 c0       	rjmp	.+10     	; 0xec8 <can_cmd+0xa86>
        //------------      
      } // switch (cmd ...
    } // if (mob_handle ...
    else
    {
      cmd->status = MOB_NOT_REACHED;
     ebe:	8f e1       	ldi	r24, 0x1F	; 31
     ec0:	d8 01       	movw	r26, r16
     ec2:	19 96       	adiw	r26, 0x09	; 9
     ec4:	8c 93       	st	X, r24
      return CAN_CMD_REFUSED;
     ec6:	8f ef       	ldi	r24, 0xFF	; 255
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
}
     ec8:	0f 90       	pop	r0
     eca:	0f 90       	pop	r0
     ecc:	0f 90       	pop	r0
     ece:	0f 90       	pop	r0
     ed0:	df 91       	pop	r29
     ed2:	cf 91       	pop	r28
     ed4:	1f 91       	pop	r17
     ed6:	0f 91       	pop	r16
     ed8:	08 95       	ret

00000eda <can_get_status>:
//!         CAN_STATUS_ERROR         - Error in configuration or in the
//!                                    CAN communication
//!
//------------------------------------------------------------------------------
uint8_t can_get_status (st_cmd_t* cmd)
{
     eda:	ef 92       	push	r14
     edc:	ff 92       	push	r15
     ede:	1f 93       	push	r17
     ee0:	cf 93       	push	r28
     ee2:	df 93       	push	r29
     ee4:	ec 01       	movw	r28, r24
    uint8_t a_status, rtn_val;
     
    a_status = cmd->status;
     ee6:	89 85       	ldd	r24, Y+9	; 0x09
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
     ee8:	88 23       	and	r24, r24
     eea:	09 f4       	brne	.+2      	; 0xeee <can_get_status+0x14>
     eec:	91 c0       	rjmp	.+290    	; 0x1010 <can_get_status+0x136>
     eee:	8f 31       	cpi	r24, 0x1F	; 31
     ef0:	09 f4       	brne	.+2      	; 0xef4 <can_get_status+0x1a>
     ef2:	90 c0       	rjmp	.+288    	; 0x1014 <can_get_status+0x13a>
     ef4:	8f 3f       	cpi	r24, 0xFF	; 255
     ef6:	09 f4       	brne	.+2      	; 0xefa <can_get_status+0x20>
     ef8:	8f c0       	rjmp	.+286    	; 0x1018 <can_get_status+0x13e>
    {
        return CAN_STATUS_ERROR;
    }

    Can_set_mob(cmd->handle);
     efa:	88 81       	ld	r24, Y
     efc:	82 95       	swap	r24
     efe:	80 7f       	andi	r24, 0xF0	; 240
     f00:	80 93 ed 00 	sts	0x00ED, r24
    a_status = can_get_mob_status();
     f04:	0e 94 1e 09 	call	0x123c	; 0x123c <can_get_mob_status>
     f08:	18 2f       	mov	r17, r24
    
    switch (a_status)
     f0a:	80 32       	cpi	r24, 0x20	; 32
     f0c:	59 f0       	breq	.+22     	; 0xf24 <can_get_status+0x4a>
     f0e:	20 f4       	brcc	.+8      	; 0xf18 <can_get_status+0x3e>
     f10:	88 23       	and	r24, r24
     f12:	09 f4       	brne	.+2      	; 0xf16 <can_get_status+0x3c>
     f14:	83 c0       	rjmp	.+262    	; 0x101c <can_get_status+0x142>
     f16:	72 c0       	rjmp	.+228    	; 0xffc <can_get_status+0x122>
     f18:	80 34       	cpi	r24, 0x40	; 64
     f1a:	09 f4       	brne	.+2      	; 0xf1e <can_get_status+0x44>
     f1c:	64 c0       	rjmp	.+200    	; 0xfe6 <can_get_status+0x10c>
     f1e:	80 3a       	cpi	r24, 0xA0	; 160
     f20:	09 f0       	breq	.+2      	; 0xf24 <can_get_status+0x4a>
     f22:	6c c0       	rjmp	.+216    	; 0xffc <can_get_status+0x122>
            rtn_val = CAN_STATUS_NOT_COMPLETED;
            break;
        //---------------      
        case MOB_RX_COMPLETED:     
        case MOB_RX_COMPLETED_DLCW:
            cmd->dlc = Can_get_dlc();
     f24:	0f 2e       	mov	r0, r31
     f26:	ff ee       	ldi	r31, 0xEF	; 239
     f28:	ef 2e       	mov	r14, r31
     f2a:	f1 2c       	mov	r15, r1
     f2c:	f0 2d       	mov	r31, r0
     f2e:	f7 01       	movw	r30, r14
     f30:	80 81       	ld	r24, Z
     f32:	8f 70       	andi	r24, 0x0F	; 15
     f34:	8e 83       	std	Y+6, r24	; 0x06
            can_get_data(cmd->pt_data);
     f36:	8f 81       	ldd	r24, Y+7	; 0x07
     f38:	98 85       	ldd	r25, Y+8	; 0x08
     f3a:	0e 94 31 09 	call	0x1262	; 0x1262 <can_get_data>
            cmd->ctrl.rtr = Can_get_rtr();
     f3e:	80 91 f0 00 	lds	r24, 0x00F0
     f42:	82 fb       	bst	r24, 2
     f44:	88 27       	eor	r24, r24
     f46:	80 f9       	bld	r24, 0
     f48:	8a 87       	std	Y+10, r24	; 0x0a
            if (Can_get_ide()) // if extended frame
     f4a:	f7 01       	movw	r30, r14
     f4c:	80 81       	ld	r24, Z
     f4e:	84 ff       	sbrs	r24, 4
     f50:	2d c0       	rjmp	.+90     	; 0xfac <can_get_status+0xd2>
            {
                cmd->ctrl.ide = 1; // extended frame
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	8b 87       	std	Y+11, r24	; 0x0b
                Can_get_ext_id(cmd->id.ext);
     f56:	e3 ef       	ldi	r30, 0xF3	; 243
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	86 95       	lsr	r24
     f5e:	86 95       	lsr	r24
     f60:	86 95       	lsr	r24
     f62:	8d 83       	std	Y+5, r24	; 0x05
     f64:	a2 ef       	ldi	r26, 0xF2	; 242
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	8c 91       	ld	r24, X
     f6a:	90 81       	ld	r25, Z
     f6c:	86 95       	lsr	r24
     f6e:	86 95       	lsr	r24
     f70:	86 95       	lsr	r24
     f72:	f0 e2       	ldi	r31, 0x20	; 32
     f74:	9f 9f       	mul	r25, r31
     f76:	80 0d       	add	r24, r0
     f78:	11 24       	eor	r1, r1
     f7a:	8c 83       	std	Y+4, r24	; 0x04
     f7c:	e1 ef       	ldi	r30, 0xF1	; 241
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	9c 91       	ld	r25, X
     f84:	86 95       	lsr	r24
     f86:	86 95       	lsr	r24
     f88:	86 95       	lsr	r24
     f8a:	20 e2       	ldi	r18, 0x20	; 32
     f8c:	92 9f       	mul	r25, r18
     f8e:	80 0d       	add	r24, r0
     f90:	11 24       	eor	r1, r1
     f92:	8b 83       	std	Y+3, r24	; 0x03
     f94:	80 91 f0 00 	lds	r24, 0x00F0
     f98:	90 81       	ld	r25, Z
     f9a:	86 95       	lsr	r24
     f9c:	86 95       	lsr	r24
     f9e:	86 95       	lsr	r24
     fa0:	e0 e2       	ldi	r30, 0x20	; 32
     fa2:	9e 9f       	mul	r25, r30
     fa4:	80 0d       	add	r24, r0
     fa6:	11 24       	eor	r1, r1
     fa8:	8a 83       	std	Y+2, r24	; 0x02
     faa:	13 c0       	rjmp	.+38     	; 0xfd2 <can_get_status+0xf8>
            }
            else // else standard frame
                {
                    cmd->ctrl.ide = 0;
     fac:	1b 86       	std	Y+11, r1	; 0x0b
                    Can_get_std_id(cmd->id.std);
     fae:	e3 ef       	ldi	r30, 0xF3	; 243
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	82 95       	swap	r24
     fb6:	86 95       	lsr	r24
     fb8:	87 70       	andi	r24, 0x07	; 7
     fba:	8b 83       	std	Y+3, r24	; 0x03
     fbc:	80 91 f2 00 	lds	r24, 0x00F2
     fc0:	90 81       	ld	r25, Z
     fc2:	99 0f       	add	r25, r25
     fc4:	99 0f       	add	r25, r25
     fc6:	99 0f       	add	r25, r25
     fc8:	82 95       	swap	r24
     fca:	86 95       	lsr	r24
     fcc:	87 70       	andi	r24, 0x07	; 7
     fce:	89 0f       	add	r24, r25
     fd0:	8a 83       	std	Y+2, r24	; 0x02
                }
            // Status field of descriptor: 0x20 if Rx completed
            // Status field of descriptor: 0xA0 if Rx completed with DLCWarning    
            cmd->status = a_status;
     fd2:	19 87       	std	Y+9, r17	; 0x09
            Can_mob_abort();        // Freed the MOB
     fd4:	ef ee       	ldi	r30, 0xEF	; 239
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	8f 73       	andi	r24, 0x3F	; 63
     fdc:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
     fde:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = CAN_STATUS_COMPLETED;
     fe2:	80 e0       	ldi	r24, 0x00	; 0
            break;
     fe4:	1c c0       	rjmp	.+56     	; 0x101e <can_get_status+0x144>
        //---------------      
        case MOB_TX_COMPLETED:     
            // Status field of descriptor: 0x40 if Tx completed
            cmd->status = a_status;
     fe6:	80 e4       	ldi	r24, 0x40	; 64
     fe8:	89 87       	std	Y+9, r24	; 0x09
            Can_mob_abort();        // Freed the MOB
     fea:	ef ee       	ldi	r30, 0xEF	; 239
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	8f 73       	andi	r24, 0x3F	; 63
     ff2:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
     ff4:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = CAN_STATUS_COMPLETED;
     ff8:	80 e0       	ldi	r24, 0x00	; 0
            break;
     ffa:	11 c0       	rjmp	.+34     	; 0x101e <can_get_status+0x144>
        //---------------      
        default:
            // Status field of descriptor: (bin)000b.scfa if MOb error
            cmd->status = a_status;
     ffc:	19 87       	std	Y+9, r17	; 0x09
            Can_mob_abort();        // Freed the MOB
     ffe:	ef ee       	ldi	r30, 0xEF	; 239
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	8f 73       	andi	r24, 0x3F	; 63
    1006:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
    1008:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = CAN_STATUS_ERROR;
    100c:	82 e0       	ldi	r24, 0x02	; 2
            break;
    100e:	07 c0       	rjmp	.+14     	; 0x101e <can_get_status+0x144>
    uint8_t a_status, rtn_val;
     
    a_status = cmd->status;
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    {
        return CAN_STATUS_ERROR;
    1010:	82 e0       	ldi	r24, 0x02	; 2
    1012:	05 c0       	rjmp	.+10     	; 0x101e <can_get_status+0x144>
    1014:	82 e0       	ldi	r24, 0x02	; 2
    1016:	03 c0       	rjmp	.+6      	; 0x101e <can_get_status+0x144>
    1018:	82 e0       	ldi	r24, 0x02	; 2
    101a:	01 c0       	rjmp	.+2      	; 0x101e <can_get_status+0x144>
    
    switch (a_status)
    {
        case MOB_NOT_COMPLETED:
            // cmd->status not updated
            rtn_val = CAN_STATUS_NOT_COMPLETED;
    101c:	81 e0       	ldi	r24, 0x01	; 1
            break;
             
    } // switch (a_status...
 
    return (rtn_val);
}
    101e:	df 91       	pop	r29
    1020:	cf 91       	pop	r28
    1022:	1f 91       	pop	r17
    1024:	ff 90       	pop	r15
    1026:	ef 90       	pop	r14
    1028:	08 95       	ret

0000102a <adc_read>:
 */
uint8_t adc_read(uint8_t ch) {
	// Set which channel to read. Leave all ADMUX bits as is except MUX4-0
	
	// Clear MUX bits
	ADMUX &= 0xE0;
    102a:	ec e7       	ldi	r30, 0x7C	; 124
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	90 81       	ld	r25, Z
    1030:	90 7e       	andi	r25, 0xE0	; 224
    1032:	90 83       	st	Z, r25
	// Guard against invalid channel
	if(ch > 12) ch = 18; // Read ground
    1034:	8d 30       	cpi	r24, 0x0D	; 13
    1036:	08 f0       	brcs	.+2      	; 0x103a <adc_read+0x10>
    1038:	82 e1       	ldi	r24, 0x12	; 18
	// Set MUX to channel
	ADMUX |= ch;
    103a:	ec e7       	ldi	r30, 0x7C	; 124
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	90 81       	ld	r25, Z
    1040:	89 2b       	or	r24, r25
    1042:	80 83       	st	Z, r24
	
	// Set ADC start conversion bit
	ADCSRA |= (1 << ADSC);
    1044:	ea e7       	ldi	r30, 0x7A	; 122
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	80 64       	ori	r24, 0x40	; 64
    104c:	80 83       	st	Z, r24
	
	// Wait for ADCSRA bit ADSC to go low for data conversion to complete
	while(ADCSRA & (1 << ADSC));
    104e:	80 81       	ld	r24, Z
    1050:	86 fd       	sbrc	r24, 6
    1052:	fd cf       	rjmp	.-6      	; 0x104e <adc_read+0x24>
	
	// Return read channel
	return ADCH;
    1054:	80 91 79 00 	lds	r24, 0x0079
}
    1058:	08 95       	ret

0000105a <config_io_pin>:
 *  port_ch: the channel to set, 0-7
 *  dir: the direction, IO_DIR_INPUT or IO_DIR_OUTPUT
 * Returns: void
 */
void config_io_pin(uint8_t port, uint8_t port_ch, uint8_t dir){
	switch(port){
    105a:	81 30       	cpi	r24, 0x01	; 1
    105c:	a9 f0       	breq	.+42     	; 0x1088 <config_io_pin+0x2e>
    105e:	18 f0       	brcs	.+6      	; 0x1066 <config_io_pin+0xc>
    1060:	82 30       	cpi	r24, 0x02	; 2
    1062:	99 f5       	brne	.+102    	; 0x10ca <config_io_pin+0x70>
    1064:	22 c0       	rjmp	.+68     	; 0x10aa <config_io_pin+0x50>
		case IO_PORT_B:
			//Crazy bit trickery that sets the port_ch bit of DDRB to dir
			DDRB ^= ((-dir) ^ DDRB) & (1 << port_ch);
    1066:	24 b1       	in	r18, 0x04	; 4
    1068:	84 b1       	in	r24, 0x04	; 4
    106a:	41 95       	neg	r20
    106c:	48 27       	eor	r20, r24
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	fc 01       	movw	r30, r24
    1074:	02 c0       	rjmp	.+4      	; 0x107a <config_io_pin+0x20>
    1076:	ee 0f       	add	r30, r30
    1078:	ff 1f       	adc	r31, r31
    107a:	6a 95       	dec	r22
    107c:	e2 f7       	brpl	.-8      	; 0x1076 <config_io_pin+0x1c>
    107e:	bf 01       	movw	r22, r30
    1080:	64 23       	and	r22, r20
    1082:	62 27       	eor	r22, r18
    1084:	64 b9       	out	0x04, r22	; 4
			break;
    1086:	08 95       	ret
		case IO_PORT_C:
			DDRC ^= ((-dir) ^ DDRC) & (1 << port_ch);
    1088:	27 b1       	in	r18, 0x07	; 7
    108a:	87 b1       	in	r24, 0x07	; 7
    108c:	41 95       	neg	r20
    108e:	48 27       	eor	r20, r24
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	fc 01       	movw	r30, r24
    1096:	02 c0       	rjmp	.+4      	; 0x109c <config_io_pin+0x42>
    1098:	ee 0f       	add	r30, r30
    109a:	ff 1f       	adc	r31, r31
    109c:	6a 95       	dec	r22
    109e:	e2 f7       	brpl	.-8      	; 0x1098 <config_io_pin+0x3e>
    10a0:	bf 01       	movw	r22, r30
    10a2:	64 23       	and	r22, r20
    10a4:	62 27       	eor	r22, r18
    10a6:	67 b9       	out	0x07, r22	; 7
			break;
    10a8:	08 95       	ret
		case IO_PORT_D:
			DDRD ^= ((-dir) ^ DDRD) & (1 << port_ch);
    10aa:	2a b1       	in	r18, 0x0a	; 10
    10ac:	8a b1       	in	r24, 0x0a	; 10
    10ae:	41 95       	neg	r20
    10b0:	48 27       	eor	r20, r24
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	fc 01       	movw	r30, r24
    10b8:	02 c0       	rjmp	.+4      	; 0x10be <config_io_pin+0x64>
    10ba:	ee 0f       	add	r30, r30
    10bc:	ff 1f       	adc	r31, r31
    10be:	6a 95       	dec	r22
    10c0:	e2 f7       	brpl	.-8      	; 0x10ba <config_io_pin+0x60>
    10c2:	bf 01       	movw	r22, r30
    10c4:	64 23       	and	r22, r20
    10c6:	62 27       	eor	r22, r18
    10c8:	6a b9       	out	0x0a, r22	; 10
    10ca:	08 95       	ret

000010cc <set_io_pin>:
 *  port_ch: the channel to set, 0-7
 *  val: the value, HIGH or LOW
 * Returns: void
 */
void set_io_pin(uint8_t port, uint8_t port_ch, uint8_t val){
	switch(port){
    10cc:	81 30       	cpi	r24, 0x01	; 1
    10ce:	a9 f0       	breq	.+42     	; 0x10fa <set_io_pin+0x2e>
    10d0:	18 f0       	brcs	.+6      	; 0x10d8 <set_io_pin+0xc>
    10d2:	82 30       	cpi	r24, 0x02	; 2
    10d4:	99 f5       	brne	.+102    	; 0x113c <__stack+0x3d>
    10d6:	22 c0       	rjmp	.+68     	; 0x111c <__stack+0x1d>
		case IO_PORT_B:
			PORTB ^= ((-val) ^ PORTB) & (1 << port_ch);
    10d8:	25 b1       	in	r18, 0x05	; 5
    10da:	85 b1       	in	r24, 0x05	; 5
    10dc:	41 95       	neg	r20
    10de:	48 27       	eor	r20, r24
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	fc 01       	movw	r30, r24
    10e6:	02 c0       	rjmp	.+4      	; 0x10ec <set_io_pin+0x20>
    10e8:	ee 0f       	add	r30, r30
    10ea:	ff 1f       	adc	r31, r31
    10ec:	6a 95       	dec	r22
    10ee:	e2 f7       	brpl	.-8      	; 0x10e8 <set_io_pin+0x1c>
    10f0:	bf 01       	movw	r22, r30
    10f2:	64 23       	and	r22, r20
    10f4:	62 27       	eor	r22, r18
    10f6:	65 b9       	out	0x05, r22	; 5
			break;
    10f8:	08 95       	ret
		case IO_PORT_C:
			PORTC ^= ((-val) ^ PORTC) & (1 << port_ch);
    10fa:	28 b1       	in	r18, 0x08	; 8
    10fc:	88 b1       	in	r24, 0x08	; 8
    10fe:	41 95       	neg	r20
    1100:	48 27       	eor	r20, r24
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	fc 01       	movw	r30, r24
    1108:	02 c0       	rjmp	.+4      	; 0x110e <__stack+0xf>
    110a:	ee 0f       	add	r30, r30
    110c:	ff 1f       	adc	r31, r31
    110e:	6a 95       	dec	r22
    1110:	e2 f7       	brpl	.-8      	; 0x110a <__stack+0xb>
    1112:	bf 01       	movw	r22, r30
    1114:	64 23       	and	r22, r20
    1116:	62 27       	eor	r22, r18
    1118:	68 b9       	out	0x08, r22	; 8
			break;
    111a:	08 95       	ret
		case IO_PORT_D:
			PORTD ^= ((-val) ^ PORTD) & (1 << port_ch);
    111c:	2b b1       	in	r18, 0x0b	; 11
    111e:	8b b1       	in	r24, 0x0b	; 11
    1120:	41 95       	neg	r20
    1122:	48 27       	eor	r20, r24
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	fc 01       	movw	r30, r24
    112a:	02 c0       	rjmp	.+4      	; 0x1130 <__stack+0x31>
    112c:	ee 0f       	add	r30, r30
    112e:	ff 1f       	adc	r31, r31
    1130:	6a 95       	dec	r22
    1132:	e2 f7       	brpl	.-8      	; 0x112c <__stack+0x2d>
    1134:	bf 01       	movw	r22, r30
    1136:	64 23       	and	r22, r20
    1138:	62 27       	eor	r22, r18
    113a:	6b b9       	out	0x0b, r22	; 11
    113c:	08 95       	ret

0000113e <can_tx_sync>:
 *		buf_size, the size of the buffer
 * 
 * Returns:
 *		void	
 */
void can_tx_sync(uint16_t id, uint8_t *buffer, uint8_t buf_size) {
    113e:	cf 93       	push	r28
    1140:	df 93       	push	r29
    1142:	cd b7       	in	r28, 0x3d	; 61
    1144:	de b7       	in	r29, 0x3e	; 62
    1146:	2c 97       	sbiw	r28, 0x0c	; 12
    1148:	0f b6       	in	r0, 0x3f	; 63
    114a:	f8 94       	cli
    114c:	de bf       	out	0x3e, r29	; 62
    114e:	0f be       	out	0x3f, r0	; 63
    1150:	cd bf       	out	0x3d, r28	; 61
	// Message command object
	st_cmd_t can_msg;
	
	// Configure TX mailbox
	can_msg.pt_data = buffer;	// point message object to the data buffer
    1152:	79 87       	std	Y+9, r23	; 0x09
    1154:	68 87       	std	Y+8, r22	; 0x08
	can_msg.ctrl.ide = 0;		// CAN 2.0A
    1156:	1c 86       	std	Y+12, r1	; 0x0c
	can_msg.dlc = buf_size;		// Number of data bytes (8 max) requested from remote node
    1158:	4f 83       	std	Y+7, r20	; 0x07
	can_msg.id.std = id;		// Message ID
    115a:	9c 83       	std	Y+4, r25	; 0x04
    115c:	8b 83       	std	Y+3, r24	; 0x03
	can_msg.cmd = CMD_TX_DATA;	// Transmit data command object
    115e:	82 e0       	ldi	r24, 0x02	; 2
    1160:	8a 83       	std	Y+2, r24	; 0x02

	// Wait for MOb to configure (Must re-configure MOb for every transaction) and send request
	while(can_cmd(&can_msg) != CAN_CMD_ACCEPTED);
    1162:	ce 01       	movw	r24, r28
    1164:	01 96       	adiw	r24, 0x01	; 1
    1166:	0e 94 21 02 	call	0x442	; 0x442 <can_cmd>
    116a:	81 11       	cpse	r24, r1
    116c:	fa cf       	rjmp	.-12     	; 0x1162 <can_tx_sync+0x24>
	// Wait for Tx to complete
	while(can_get_status(&can_msg) == CAN_STATUS_NOT_COMPLETED);
    116e:	ce 01       	movw	r24, r28
    1170:	01 96       	adiw	r24, 0x01	; 1
    1172:	0e 94 6d 07 	call	0xeda	; 0xeda <can_get_status>
    1176:	81 30       	cpi	r24, 0x01	; 1
    1178:	d1 f3       	breq	.-12     	; 0x116e <can_tx_sync+0x30>
}
    117a:	2c 96       	adiw	r28, 0x0c	; 12
    117c:	0f b6       	in	r0, 0x3f	; 63
    117e:	f8 94       	cli
    1180:	de bf       	out	0x3e, r29	; 62
    1182:	0f be       	out	0x3f, r0	; 63
    1184:	cd bf       	out	0x3d, r28	; 61
    1186:	df 91       	pop	r29
    1188:	cf 91       	pop	r28
    118a:	08 95       	ret

0000118c <setup_can_rcv>:
 * Arguments:
 *  can_receive_msg: pointer to can cmd msg struct
 *  can_receive_buffer: pointer to buffer to receive msg_id into
 *  buffer_len: length of the buffer to receive
 */
void setup_can_rcv(st_cmd_t *can_receive_msg, uint8_t *can_receive_buffer, uint8_t buffer_len, uint16_t msg_id) {
    118c:	cf 93       	push	r28
    118e:	df 93       	push	r29
    1190:	ec 01       	movw	r28, r24
	// Populate message object
	can_receive_msg->pt_data = &can_receive_buffer[0];			// Point to receive buffer
    1192:	78 87       	std	Y+8, r23	; 0x08
    1194:	6f 83       	std	Y+7, r22	; 0x07
	can_receive_msg->ctrl.ide = 0;								// CAN 2.0A
    1196:	1b 86       	std	Y+11, r1	; 0x0b
	can_receive_msg->dlc	= buffer_len;							// Data buffer length
    1198:	4e 83       	std	Y+6, r20	; 0x06
	can_receive_msg->id.std = msg_id;							// Set the receive ID to be the state ID
    119a:	3b 83       	std	Y+3, r19	; 0x03
    119c:	2a 83       	std	Y+2, r18	; 0x02
	can_receive_msg->cmd = CMD_RX_DATA_MASKED;					// Receive data
    119e:	88 e0       	ldi	r24, 0x08	; 8
    11a0:	89 83       	std	Y+1, r24	; 0x01
	
	/* Wait for an open mailbox and bind msg_id to the mailbox when available*/
	
	while(can_cmd(can_receive_msg) != CAN_CMD_ACCEPTED);
    11a2:	ce 01       	movw	r24, r28
    11a4:	0e 94 21 02 	call	0x442	; 0x442 <can_cmd>
    11a8:	81 11       	cpse	r24, r1
    11aa:	fb cf       	rjmp	.-10     	; 0x11a2 <setup_can_rcv+0x16>
}
    11ac:	df 91       	pop	r29
    11ae:	cf 91       	pop	r28
    11b0:	08 95       	ret

000011b2 <setup_can_send>:
 * Arguments:
 *  can_send_msg: pointer to can cmd msg struct
 *  can_send_buffer: pointer to buffer to send msg_id from
 *  buffer_len: length of the buffer to send
 */
void setup_can_send(st_cmd_t *can_send_msg, uint8_t *can_send_buffer, uint8_t buffer_len, uint16_t msg_id) {
    11b2:	cf 93       	push	r28
    11b4:	df 93       	push	r29
    11b6:	ec 01       	movw	r28, r24
	// Populate message object
	can_send_msg->pt_data = &can_send_buffer[0];				// Point to send buffer
    11b8:	78 87       	std	Y+8, r23	; 0x08
    11ba:	6f 83       	std	Y+7, r22	; 0x07
	can_send_msg->ctrl.ide = 0;									// CAN 2.0A
    11bc:	1b 86       	std	Y+11, r1	; 0x0b
	can_send_msg->dlc	= buffer_len;							// Data buffer length
    11be:	4e 83       	std	Y+6, r20	; 0x06
	can_send_msg->id.std = msg_id;								// Set the receive ID to be the state ID
    11c0:	3b 83       	std	Y+3, r19	; 0x03
    11c2:	2a 83       	std	Y+2, r18	; 0x02
	can_send_msg->cmd = CMD_TX_DATA;							// Send data
    11c4:	82 e0       	ldi	r24, 0x02	; 2
    11c6:	89 83       	std	Y+1, r24	; 0x01
	
	/* Wait for an open mailbox and bind msg_id to the mailbox when available*/
	while(can_cmd(can_send_msg) != CAN_CMD_ACCEPTED);
    11c8:	ce 01       	movw	r24, r28
    11ca:	0e 94 21 02 	call	0x442	; 0x442 <can_cmd>
    11ce:	81 11       	cpse	r24, r1
    11d0:	fb cf       	rjmp	.-10     	; 0x11c8 <setup_can_send+0x16>
    11d2:	df 91       	pop	r29
    11d4:	cf 91       	pop	r28
    11d6:	08 95       	ret

000011d8 <can_clear_all_mob>:
uint8_t  mob_number;
/*
    uint8_t  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    11d8:	20 e0       	ldi	r18, 0x00	; 0
    {
        CANPAGE = (mob_number << 4);    //! Page index
    11da:	ad ee       	ldi	r26, 0xED	; 237
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
        Can_clear_mob();                //! All MOb Registers=0
    11de:	8e ee       	ldi	r24, 0xEE	; 238
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    uint8_t  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    {
        CANPAGE = (mob_number << 4);    //! Page index
    11e2:	32 2f       	mov	r19, r18
    11e4:	32 95       	swap	r19
    11e6:	30 7f       	andi	r19, 0xF0	; 240
    11e8:	3c 93       	st	X, r19
        Can_clear_mob();                //! All MOb Registers=0
    11ea:	fc 01       	movw	r30, r24
    11ec:	11 92       	st	Z+, r1
    11ee:	e8 3f       	cpi	r30, 0xF8	; 248
    11f0:	f1 05       	cpc	r31, r1
    11f2:	e1 f7       	brne	.-8      	; 0x11ec <can_clear_all_mob+0x14>
uint8_t  mob_number;
/*
    uint8_t  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    11f4:	2f 5f       	subi	r18, 0xFF	; 255
    11f6:	26 30       	cpi	r18, 0x06	; 6
    11f8:	a1 f7       	brne	.-24     	; 0x11e2 <can_clear_all_mob+0xa>
        {
            CANMSG = 0;                 //! MOb data FIFO
        }
*/
    }
}
    11fa:	08 95       	ret

000011fc <can_get_mob_free>:
//------------------------------------------------------------------------------
uint8_t can_get_mob_free(void)
{
    uint8_t mob_number, page_saved;

    page_saved = CANPAGE;
    11fc:	ed ee       	ldi	r30, 0xED	; 237
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	20 81       	ld	r18, Z
    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    {
        Can_set_mob(mob_number);
    1202:	10 82       	st	Z, r1
        if ((CANCDMOB & 0xC0) == 0x00) //! Disable configuration
    1204:	80 91 ef 00 	lds	r24, 0x00EF
    1208:	80 7c       	andi	r24, 0xC0	; 192
    120a:	69 f0       	breq	.+26     	; 0x1226 <can_get_mob_free+0x2a>
uint8_t can_get_mob_free(void)
{
    uint8_t mob_number, page_saved;

    page_saved = CANPAGE;
    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    120c:	81 e0       	ldi	r24, 0x01	; 1
    {
        Can_set_mob(mob_number);
    120e:	ad ee       	ldi	r26, 0xED	; 237
    1210:	b0 e0       	ldi	r27, 0x00	; 0
        if ((CANCDMOB & 0xC0) == 0x00) //! Disable configuration
    1212:	ef ee       	ldi	r30, 0xEF	; 239
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    uint8_t mob_number, page_saved;

    page_saved = CANPAGE;
    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    {
        Can_set_mob(mob_number);
    1216:	98 2f       	mov	r25, r24
    1218:	92 95       	swap	r25
    121a:	90 7f       	andi	r25, 0xF0	; 240
    121c:	9c 93       	st	X, r25
        if ((CANCDMOB & 0xC0) == 0x00) //! Disable configuration
    121e:	90 81       	ld	r25, Z
    1220:	90 7c       	andi	r25, 0xC0	; 192
    1222:	29 f4       	brne	.+10     	; 0x122e <can_get_mob_free+0x32>
    1224:	01 c0       	rjmp	.+2      	; 0x1228 <can_get_mob_free+0x2c>
uint8_t can_get_mob_free(void)
{
    uint8_t mob_number, page_saved;

    page_saved = CANPAGE;
    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    1226:	80 e0       	ldi	r24, 0x00	; 0
    {
        Can_set_mob(mob_number);
        if ((CANCDMOB & 0xC0) == 0x00) //! Disable configuration
        {
            CANPAGE = page_saved;
    1228:	20 93 ed 00 	sts	0x00ED, r18
            return (mob_number);
    122c:	08 95       	ret
uint8_t can_get_mob_free(void)
{
    uint8_t mob_number, page_saved;

    page_saved = CANPAGE;
    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    122e:	8f 5f       	subi	r24, 0xFF	; 255
    1230:	86 30       	cpi	r24, 0x06	; 6
    1232:	89 f7       	brne	.-30     	; 0x1216 <can_get_mob_free+0x1a>
        {
            CANPAGE = page_saved;
            return (mob_number);
        }
    }
    CANPAGE = page_saved;
    1234:	20 93 ed 00 	sts	0x00ED, r18
    return (NO_MOB);
    1238:	8f ef       	ldi	r24, 0xFF	; 255
}
    123a:	08 95       	ret

0000123c <can_get_mob_status>:
uint8_t can_get_mob_status(void)
{
    uint8_t mob_status, canstmob_copy;

    // Test if MOb ENABLE or DISABLE
    if ((CANCDMOB & 0xC0) == 0x00) {return(MOB_DISABLE);}
    123c:	80 91 ef 00 	lds	r24, 0x00EF
    1240:	80 7c       	andi	r24, 0xC0	; 192
    1242:	69 f0       	breq	.+26     	; 0x125e <can_get_mob_status+0x22>

    canstmob_copy = CANSTMOB; // Copy for test integrity
    1244:	90 91 ee 00 	lds	r25, 0x00EE

    // If MOb is ENABLE, test if MOb is COMPLETED
    // - MOb Status = 0x20 then MOB_RX_COMPLETED
    // - MOb Status = 0x40 then MOB_TX_COMPLETED
    // - MOb Status = 0xA0 then MOB_RX_COMPLETED_DLCW
    mob_status = canstmob_copy & ((1<<DLCW)|(1<<TXOK)|(1<<RXOK));
    1248:	89 2f       	mov	r24, r25
    124a:	80 7e       	andi	r24, 0xE0	; 224
    if ( (mob_status==MOB_RX_COMPLETED) ||   \
    124c:	80 32       	cpi	r24, 0x20	; 32
    124e:	41 f0       	breq	.+16     	; 0x1260 <can_get_mob_status+0x24>
    1250:	80 34       	cpi	r24, 0x40	; 64
    1252:	31 f0       	breq	.+12     	; 0x1260 <can_get_mob_status+0x24>
         (mob_status==MOB_TX_COMPLETED) ||   \
    1254:	80 3a       	cpi	r24, 0xA0	; 160
    1256:	21 f0       	breq	.+8      	; 0x1260 <can_get_mob_status+0x24>
    // - MOb Status bit_0 = MOB_ACK_ERROR
    // - MOb Status bit_1 = MOB_FORM_ERROR
    // - MOb Status bit_2 = MOB_CRC_ERROR
    // - MOb Status bit_3 = MOB_STUFF_ERROR
    // - MOb Status bit_4 = MOB_BIT_ERROR
    mob_status = canstmob_copy & ERR_MOB_MSK;
    1258:	89 2f       	mov	r24, r25
    125a:	8f 71       	andi	r24, 0x1F	; 31
    125c:	08 95       	ret
uint8_t can_get_mob_status(void)
{
    uint8_t mob_status, canstmob_copy;

    // Test if MOb ENABLE or DISABLE
    if ((CANCDMOB & 0xC0) == 0x00) {return(MOB_DISABLE);}
    125e:	8f ef       	ldi	r24, 0xFF	; 255
    mob_status = canstmob_copy & ERR_MOB_MSK;
    if (mob_status != 0) { return(mob_status); }

    // If CANSTMOB = 0 then MOB_NOT_COMPLETED
    return(MOB_NOT_COMPLETED);
}
    1260:	08 95       	ret

00001262 <can_get_data>:
//! @param CAN message data address.
//!
//! @return none.
//------------------------------------------------------------------------------
void can_get_data(uint8_t* p_can_message_data)
{
    1262:	cf 93       	push	r28
    1264:	df 93       	push	r29
    uint8_t data_index;

    for (data_index = 0; data_index < (Can_get_dlc()); data_index++)
    1266:	20 91 ef 00 	lds	r18, 0x00EF
    126a:	2f 70       	andi	r18, 0x0F	; 15
    126c:	99 f0       	breq	.+38     	; 0x1294 <can_get_data+0x32>
    126e:	60 e0       	ldi	r22, 0x00	; 0
    {
        *(p_can_message_data + data_index) = CANMSG;
    1270:	ca ef       	ldi	r28, 0xFA	; 250
    1272:	d0 e0       	ldi	r29, 0x00	; 0
//------------------------------------------------------------------------------
void can_get_data(uint8_t* p_can_message_data)
{
    uint8_t data_index;

    for (data_index = 0; data_index < (Can_get_dlc()); data_index++)
    1274:	af ee       	ldi	r26, 0xEF	; 239
    1276:	b0 e0       	ldi	r27, 0x00	; 0
    {
        *(p_can_message_data + data_index) = CANMSG;
    1278:	28 81       	ld	r18, Y
    127a:	fc 01       	movw	r30, r24
    127c:	e6 0f       	add	r30, r22
    127e:	f1 1d       	adc	r31, r1
    1280:	20 83       	st	Z, r18
//------------------------------------------------------------------------------
void can_get_data(uint8_t* p_can_message_data)
{
    uint8_t data_index;

    for (data_index = 0; data_index < (Can_get_dlc()); data_index++)
    1282:	6f 5f       	subi	r22, 0xFF	; 255
    1284:	2c 91       	ld	r18, X
    1286:	46 2f       	mov	r20, r22
    1288:	50 e0       	ldi	r21, 0x00	; 0
    128a:	2f 70       	andi	r18, 0x0F	; 15
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	42 17       	cp	r20, r18
    1290:	53 07       	cpc	r21, r19
    1292:	94 f3       	brlt	.-28     	; 0x1278 <can_get_data+0x16>
    {
        *(p_can_message_data + data_index) = CANMSG;
    }
}
    1294:	df 91       	pop	r29
    1296:	cf 91       	pop	r28
    1298:	08 95       	ret

0000129a <can_fixed_baudrate>:
//! @return Baudrate Status
//!         fixed = 1: baudrate performed
//------------------------------------------------------------------------------
uint8_t can_fixed_baudrate(uint8_t mode)
{
    Can_reset();
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	80 93 d8 00 	sts	0x00D8, r24
    Can_conf_bt();
    12a0:	86 e0       	ldi	r24, 0x06	; 6
    12a2:	80 93 e2 00 	sts	0x00E2, r24
    12a6:	84 e0       	ldi	r24, 0x04	; 4
    12a8:	80 93 e3 00 	sts	0x00E3, r24
    12ac:	83 e1       	ldi	r24, 0x13	; 19
    12ae:	80 93 e4 00 	sts	0x00E4, r24
    return 1;
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	08 95       	ret

000012b6 <_exit>:
    12b6:	f8 94       	cli

000012b8 <__stop_program>:
    12b8:	ff cf       	rjmp	.-2      	; 0x12b8 <__stop_program>
