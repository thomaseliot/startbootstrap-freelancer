/*
 * tasks.c
 *
 *  Created on: Apr 9, 2016
 *      Author: Tom
 */
#include "tasks.h"
#include "cmsis_os.h"
#include "stm32f4xx_hal.h"

void vPollButtonsTask(void * pvParameters) {

	portTickType xLastWakeTime;
	xLastWakeTime = osKernelSysTick();



	ButtonObject NEXT_BTN_object = {.button = NEXT_BTN, .buttonState = unpressed};
	ButtonObject DOWN_BTN_object = {.button = DOWN_BTN, .buttonState = unpressed};
	ButtonObject SELECT_BTN_object = {.button = SELECT_BTN, .buttonState = unpressed};
	ButtonObject RETURN_BTN_object = {.button = RETURN_BTN, .buttonState = unpressed};
	ButtonObject UP_BTN_object = {.button = UP_BTN, .buttonState = unpressed};
	ButtonObject DOWN_BTN_object = {.button = DOWN_BTN, .buttonState = unpressed};

	for( ;; )
	{
		/* Poll GPIO */
		updateButton(NEXT_BTN_GPIO_Port, NEXT_BTN_Pin, NEXT_BTN_object);
		updateButton(DOWN_BTN_GPIO_Port, DOWN_BTN_Pin, DOWN_BTN_object);
		updateButton(SELECT_BTN_GPIO_Port, SELECT_BTN_Pin, SELECT_BTN_object);
		updateButton(RETURN_BTN_GPIO_Port, RETURN_BTN_Pin, RETURN_BTN_object);
		updateButton(UP_BTN_GPIO_Port, UP_BTN_Pin, UP_BTN_object);
		updateButton(DOWN_BTN_GPIO_Port, DOWN_BTN_Pin, DOWN_BTN_object);


	/* 10ms period = 100Hz */
	vTaskDelayUntil( &xLastWakeTime, ( osKernelSysTickMicroSec(10*1000) ) );
	}
}

static void updateButton(GPIO_TypeDef * GPIOx, uint16_t GPIO_pin, GPIO_PinState * button_state){
	if (button_state == HAL_GPIO_ReadPin(GPIOx, GPIO_pin)) {
			;;
		}
		else {
			button_state = !button_state;
			//Send button change message
			osStatus messageStatus = osMessagePut(buttonQueue, uint32_t info, uint32_t millisec);

		}
}


#define BSPD_ERR_GPIO_Port GPIOE
