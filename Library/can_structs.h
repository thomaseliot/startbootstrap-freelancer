/*
 * can_structs.h
 * 
 * Contains struct definitions for all CAN messages
 * This file should eventually be auto-generated by a PCAN/Python script
 * 
 * Copyright (c) Carnegie Mellon Racing 2016
 */

#ifndef CAN_STRUCTS_H_
#define CAN_STRUCTS_H_

#include <stdint.h>

/************************************************************************/
/* GLV NODE HEARTBEATS                                                  */
/************************************************************************/

// Safety Module
typedef struct SMHeartbeat_t {
	uint8_t state;
	uint8_t vbatt;
	uint8_t targetState;
	uint8_t nodeHeartbeatStatus;			// Bit field, see PCAN
	uint8_t nodeStateStatus;				// Bit field, see PCAN
} SMHeartbeat_t;

// Central Controller
typedef struct CCHeartbeat_t {
	uint8_t state;
	uint8_t vbatt;
} CCHeartbeat_t;

// Front Sensor Module
typedef struct FSMHeartbeat_t {
	uint8_t state;
	uint8_t vbatt;
	uint8_t requestedTorque;
	uint8_t speed;
} FSMHeartbeat_t;

// Rear Sensor Module
typedef struct RSMHeartbeat_t {
	uint8_t state;
	uint8_t vbatt;
	uint8_t radiatorFanStatus;
	uint8_t radiatorFanCurrent;
	uint8_t leftPumpStatus;
	uint8_t rightPumpStatus;
} RSMHeartbeat_t;

// Driver Interface Module
typedef struct DIMHeartbeat_t {
	uint8_t state;
	uint8_t vbatt;
	uint8_t requestedState;
} DIMHeartbeat_t;

// Accumulator Fan Controller
typedef struct AFCHeartbeat_t {
	uint8_t state;
	uint8_t vbatt;
	uint8_t fan1Status;
	uint8_t fan1Current;
	uint8_t fan2Status;
	uint8_t fan2Current;
	uint8_t fan3Status;
	uint8_t fan3Current;
} AFCHeartbeat_t;

// Telemetry Module
typedef struct TMHeartbeat_t {
	uint8_t state;
	uint8_t vbatt;
} TMHeartbeat_t;


/************************************************************************/
/* MOTOR CONTROLLERS                                                    */
/************************************************************************/

typedef struct MCTemperatureSet1_t {
	int16_t moduleATemp;
	int16_t moduleBTemp;
	int16_t moduleCTemp;
	int16_t gateDriverBoardTemp;
} MCTemperatureSet1_t;

typedef struct MCTemperatureSet2_t {
	int16_t controlBoardTemp;
	int16_t RTD1Temp;
	int16_t RTD2Temp;
	int16_t RTD3Temp;
} MCTemperatureSet2_t;

typedef struct MCTemperatureSet3_t {
	int16_t RTD4Temp;
	int16_t RTD5Temp;
	int16_t motorTemp;
	int16_t torqueShudder;
} MCTemperatureSet3_t;

typedef struct MCAnalogInputVoltages_t {
	int16_t analogInput1Voltage;
	int16_t analogInput2Voltage;
	int16_t analogInput3Voltage;
	int16_t analogInput4Voltage;
} MCAnalogInputVoltages_t;

typedef struct MCDigitalInputStatus_t {
	uint8_t digitalInput1;
	uint8_t digitalInput2;
	uint8_t digitalInput3;
	uint8_t digitalInput4;
	uint8_t digitalInput5;
	uint8_t digitalInput6;
	uint8_t digitalInput7;
	uint8_t digitalInput8;
} MCDigitalInputStatus_t;

typedef struct MCMotorPositionInfo_t {
	uint16_t motorAngleElectrical;
	int16_t motorSpeed;
	int16_t electricalOutputFrequency;
	int16_t deltaResolverFiltered;
} MCMotorPositionInfo_t;

typedef struct MCCurrentInfo_t {
	int16_t phaseACurrent;
	int16_t phaseBCurrent;
	int16_t phaseCCurrent;
	int16_t DCBusCurrent;
} MCCurrentInfo_t;

typedef struct MCVoltageInfo_t {
	int16_t DCBusVoltage;
	int16_t OutputVoltage;
	int16_t PhaseABVoltage;
	int16_t PhaseBCVoltage;
} MCVoltageInfo_t;

typedef struct MCFluxIdIq_t {
	int16_t fluxCommand;
	int16_t fluxFeedback;
	int16_t id;
	int16_t iq;
} MCFluxIdIq_t;

typedef struct MCInternalVoltages_t {
	int16_t referenceVoltage1_5;
	int16_t referenceVoltage2_5;
	int16_t referenceVoltage5_0;
	int16_t referenceVoltage12_0;
} MCInternalVoltages_t;

typedef struct MCInternalStates_t {
	uint16_t VSMState;
	uint8_t inverterState;
	uint8_t relayStatuses;						// Multiple variables, see PCAN & Mask
	uint8_t inverterDischargeRunState;			// Multiple variables, see PCAN & Mask
	uint8_t inverterCommandMode;
	uint8_t inverterEnableStateLockout;			// Multiple variables, see PCAN & Mask
	uint8_t directionCommand;
} MCInternalStates_t;

typedef struct MCFaultCodes_t {
	uint16_t postFaultLo;
	uint16_t postFaultHi;
	uint16_t runFaultLo;
	uint16_t runFaultHi;
} MCFaultCodes_t;

typedef struct MCTorqueAndTimer_t {
	int16_t commandedTorque;
	int16_t torqueFeedback;
	uint32_t powerOnTimer;
} MCTorqueAndTimer_t;

typedef struct MCModulationAndFlux_t {
	int16_t modulationIndex;
	int16_t fluxWeakeningOutput;
	int16_t idCommand;
	int16_t iqCommand;
} MCModulationAndFlux_t;

typedef struct MCFirmwareInfo_t {
	uint16_t projectCodeEEPVer;
	uint16_t swVersion;
	uint16_t dateCodeMMDD;
	uint16_t dateCodeYYYY;
} MCFirmwareInfo_t;

typedef struct MCDiagnosticData_t {
	uint8_t bufferRecord;
	uint8_t bufferSegment;
	int16_t diagData1;
	int16_t diagData2;
	int16_t diagData3;
} MCDiagnosticData_t;

typedef struct MCCommandMessage_t {
	int16_t torqueCommand;
	int16_t speedCommand;
	uint8_t directonCommand;
	uint8_t inverterEnableDischargeSpeedMode;	// Multiple variables, see PCAN & Mask	
} MCCommandMessage_t;

typedef struct MCReadWriteParamCommand_t {
	uint16_t parameterAddressCommand;
	uint8_t readWriteCommand;
	uint8_t padding;
	int16_t dataCommand;
} MCReadWriteParamCommand_t;

typedef struct MCReadWriteParamResponse_t {
	uint16_t parameterAddressResponse;
	uint8_t writeSuccess;
	uint8_t padding;
	uint16_t dataResponse;
} MCReadWriteParamResponse_t;


/************************************************************************/
/* BMS                                                                  */
/************************************************************************/

typedef struct BMSBMUHeartbeat_t {
	uint32_t deviceID;
	uint32_t deviceSerial;
} BMSBMUHeartbeat_t;

typedef struct BMSCMUStatus_t {
	uint32_t serial;
	uint16_t PCBTemp;
	uint16_t cellTemp;
} BMSCMUStatus_t;

typedef struct BMSCMULowCells_t {
	uint16_t cell0Voltage;
	uint16_t cell1Voltage;
	uint16_t cell2Voltage;
	uint16_t cell3Voltage;
} BMSCMULowCells_t;

typedef struct BMSCMUHighCells_t {
	uint16_t cell4Voltage;
	uint16_t cell5Voltage;
	uint16_t cell6Voltage;
	uint16_t cell7Voltage;
} BMSCMUHighCells_t;

typedef struct BMSPackSOC_t {
	uint32_t packSOCAh;
	uint32_t packSOCPercent;
} BMSPackSOC_t;

typedef struct BMSBalanceSOC_t {
	uint32_t balanceSOCAh;
	uint32_t balanceSOCPercent;
} BMSBalanceSOC_t;

typedef struct BMSChargerControlInfo_t {
	uint16_t chargingCellVoltageError;
	uint16_t cellTempMargin;
	uint16_t dischargeCellVoltageError;
	uint16_t totalPackCapacity;
} BMSChargerControlInfo_t;

typedef struct BMSPrecharge12VStatus_t {
	uint8_t contactorStatuses;				// Multiple variables, see PCAN & Mask	
	uint8_t prechargeStatus;
	uint16_t contactorSupplyVoltage;
	uint16_t padding;
	uint8_t prechargeTimerStatus;
	uint8_t prechargeTimerCounter;
} BMSPrecharge12VStatus_t;

typedef struct BMSMinMaxCellVoltage_t {
	uint16_t minCellVoltage;
	uint16_t maxCellVoltage;
	uint8_t minVoltageCMUNum;
	uint8_t minVoltageCMUCellNum;
	uint8_t maxVoltageCMUNum;
	uint8_t maxVoltageCMUCellNum;
} BMSMinMaxCellVoltage_t;

typedef struct BMSMinMaxCellTemperature_t {
	uint16_t minCellTemp;
	uint16_t maxCellTemp;
	uint8_t minTempCMU;
	uint8_t padding1;
	uint8_t maxTempCMUNum;
	uint8_t padding2;
} BMSMinMaxCellTemperature_t;

typedef struct BMSPackVoltageCurrent_t {
	uint32_t batteryCurrent;
	uint32_t batteryVoltage;
} BMSPackVoltageCurrent_t;

typedef struct BMSPackStatus_t {
	uint16_t balanceVoltageThreshRise;
	uint16_t balanceVoltageThreshFall;
	uint8_t statusFlags;
	uint8_t CMUCount;
	uint16_t firmwareBuild;
} BMSPackStatus_t;

typedef struct BMSFan12VStatus_t {
	uint16_t fanSpeed0;
	uint16_t fanSpeed1;
	uint16_t fanContactorCurrent;
	uint16_t CMUCurrent;
} BMSFan12VStatus_t;

typedef struct BMSExtendedPackStatus_t {
	uint16_t BMSFlags;
	uint16_t padding1;
	uint8_t BMUHardwareVersion;
	uint8_t BMUModelID;
	uint16_t padding2;
} BMSExtendedPackStatus_t;


#endif /* CAN_STRUCTS_H_ */