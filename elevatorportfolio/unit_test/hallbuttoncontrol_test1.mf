; 18-649 Fall 2015
;
; Group 12
; ---------------------------
; Daniel Gorziglia - dgorzigl
; Shepard Emerson - semerson
; Tom Eliot - tke
; Daniel Haddox - dhaddox
;
; Hall Button Control Unit Test

#INCLUDE defines.mf

; ------------------
; Initialize
; ------------------
; HallCall[1,FRONT,UP] = false
0s I 0s F HallCall 1 FRONT UP = false
; mAtFloor[1,FRONT] = false
0s I 0s N AT_FLOOR_[1][FRONT]_CAN_ID AtFloor 1 FRONT = false
; mDoorClosed[FRONT,LEFT] = true
0s I 0s N DOOR_CLOSED_SENSOR_[FRONT][LEFT]_CAN_ID DoorClosed FRONT LEFT = true
; mDoorClosed[FRONT,RIGHT] = true
0s I 0s N DOOR_CLOSED_SENSOR_[FRONT][RIGHT]_CAN_ID DoorClosed FRONT RIGHT = true

; mDoorClosed[BACK,LEFT] = true
0s I 0s N DOOR_CLOSED_SENSOR_[BACK][LEFT]_CAN_ID DoorClosed BACK LEFT = true
; mDoorClosed[BACK,RIGHT] = true
0s I 0s N DOOR_CLOSED_SENSOR_[BACK][RIGHT]_CAN_ID DoorClosed BACK RIGHT = true

; mDesiredFloor = (2, UP, FRONT)
0s I 0s N DESIRED_FLOOR_CAN_ID DesiredFloor = 2 UP FRONT

; ------------------
; State 1: No Hall Selected
; ------------------

; Should be in NO_HALL_SELECTED state
;#state '8.S.1'
; Check that HallLight is off
0.5s A F HallLight 1 FRONT UP : lighted == false
; Check mHallCall is false
0.5s A N HALL_CALL_[1][FRONT][UP]_CAN_ID HallCall 1 FRONT UP : getValue == false


; ------------------
; 8.T.1
; ------------------
;#transition '8.T.1'
; HallCall[1,FRONT,UP] pulse button to simulate a press
1.0s I 0s F HallCall 1 FRONT UP = true
1.2s I 0s F HallCall 1 FRONT UP = false
; mAtFloor[1,FRONT] = false (already)
; mDoorClosed[FRONT,LEFT] = true (already)
; mDoorClosed[FRONT,RIGHT] = true (already)
; mDesiredFloor = (2, UP, FRONT) (already)

; ------------------
; State 2: Hall Selected
; ------------------

; Should be in HALL_SELECTED state
;#state '8.S.2'
; Check that HallLight is on
1.5s A F HallLight 1 FRONT UP : lighted == true
; Check mHallCall is true
1.5s A N HALL_CALL_[1][FRONT][UP]_CAN_ID HallCall 1 FRONT UP : getValue == true


; ------------------
; 8.T.2
; ------------------
;#transition '8.T.2'
; HallCall[1,FRONT,UP] = false (already)
; mAtFloor[1,FRONT] = true
2.0s I 0s N AT_FLOOR_[1][FRONT]_CAN_ID AtFloor 1 FRONT = true
; mDoorClosed[FRONT,LEFT] = false
2.0s I 0s N DOOR_CLOSED_SENSOR_[FRONT][LEFT]_CAN_ID DoorClosed FRONT LEFT = false
; mDoorClosed[FRONT,RIGHT] = false
2.0s I 0s N DOOR_CLOSED_SENSOR_[FRONT][RIGHT]_CAN_ID DoorClosed FRONT RIGHT = false
; mDesiredFloor = (1, UP, FRONT) (would be updated by dispatcher)
2.0s I 0s N DESIRED_FLOOR_CAN_ID DesiredFloor = 1 UP FRONT


; ------------------
; State 3: Servicing Call
; ------------------

; Should be in SERVICING_CALL state
;#state '8.S.3'
; Check that HallLight is on
2.5s A F HallLight 1 FRONT UP : lighted == true
; Check mHallCall is false
2.5s A N HALL_CALL_[1][FRONT][UP]_CAN_ID HallCall 1 FRONT UP : getValue == false


; ------------------
; 8.T.3
; ------------------
;#transition '8.T.3'
; HallCall[1,FRONT,UP] = false (already)
; mAtFloor[1,FRONT] = true (already)
; mDoorClosed[FRONT,LEFT] = true
3.0s I 0s N DOOR_CLOSED_SENSOR_[FRONT][LEFT]_CAN_ID DoorClosed FRONT LEFT = true
; mDoorClosed[FRONT,RIGHT] = true
3.0s I 0s N DOOR_CLOSED_SENSOR_[FRONT][RIGHT]_CAN_ID DoorClosed FRONT RIGHT = true
; mDesiredFloor = (1, UP, FRONT) (already)


; ------------------
; State 1: No Hall Selected
; ------------------

;#state '8.S.1'
; Should be in NO_HALL_SELECTED state
; Check that HallLight is off
3.5s A F HallLight 1 FRONT UP : lighted == false
; Check mHallCall is false
3.5s A N HALL_CALL_[1][FRONT][UP]_CAN_ID HallCall 1 FRONT UP : getValue == false
